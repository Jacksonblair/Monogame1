<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MonoGame.Extended</name>
    </assembly>
    <members>
        <member name="T:MonoGame.Extended.Animations.AnimationController">
            <summary>
            Represents an animation controller with features to play, pause, stop, reset, and set the state of
            animation playback such as looping, reversing, and ping-pong effects.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Animations.AnimationController.IsDisposed">
            <summary>
            Gets a value that indicates whether this animation has been disposed of.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Animations.AnimationController.IsPaused">
            <inheritdoc />
        </member>
        <member name="P:MonoGame.Extended.Animations.AnimationController.IsAnimating">
            <inheritdoc />
        </member>
        <member name="P:MonoGame.Extended.Animations.AnimationController.IsLooping">
            <inheritdoc />
        </member>
        <member name="P:MonoGame.Extended.Animations.AnimationController.IsReversed">
            <inheritdoc />
        </member>
        <member name="P:MonoGame.Extended.Animations.AnimationController.IsPingPong">
            <inheritdoc />
        </member>
        <member name="P:MonoGame.Extended.Animations.AnimationController.Speed">
            <inheritdoc />
        </member>
        <member name="E:MonoGame.Extended.Animations.AnimationController.OnAnimationEvent">
            <inheritdoc />
        </member>
        <member name="P:MonoGame.Extended.Animations.AnimationController.CurrentFrameTimeRemaining">
            <inheritdoc />
        </member>
        <member name="P:MonoGame.Extended.Animations.AnimationController.CurrentFrame">
            <inheritdoc />
        </member>
        <member name="P:MonoGame.Extended.Animations.AnimationController.FrameCount">
            <inheritdoc />
        </member>
        <member name="M:MonoGame.Extended.Animations.AnimationController.#ctor(MonoGame.Extended.Animations.IAnimation)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoGame.Extended.Animations.AnimationController"/> class with the specified definition.
            </summary>
            <param name="definition">The definition of the animation.</param>
        </member>
        <member name="M:MonoGame.Extended.Animations.AnimationController.Pause">
            <inheritdoc />
        </member>
        <member name="M:MonoGame.Extended.Animations.AnimationController.Pause(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:MonoGame.Extended.Animations.AnimationController.Play">
            <inheritdoc />
        </member>
        <member name="M:MonoGame.Extended.Animations.AnimationController.Play(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:MonoGame.Extended.Animations.AnimationController.Reset">
            <inheritdoc />
        </member>
        <member name="M:MonoGame.Extended.Animations.AnimationController.SetFrame(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:MonoGame.Extended.Animations.AnimationController.Stop">
            <inheritdoc />
        </member>
        <member name="M:MonoGame.Extended.Animations.AnimationController.Unpause">
            <inheritdoc />
        </member>
        <member name="M:MonoGame.Extended.Animations.AnimationController.Unpause(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:MonoGame.Extended.Animations.AnimationController.Update(Microsoft.Xna.Framework.GameTime)">
            <inheritdoc />
        </member>
        <member name="M:MonoGame.Extended.Animations.AnimationController.Dispose">
            <inheritdoc />
        </member>
        <member name="M:MonoGame.Extended.Animations.AnimationController.Dispose(System.Boolean)">
            <inheritdoc cref="M:MonoGame.Extended.Animations.AnimationController.Dispose"/>
            <remarks>
                <para>
                    When overriding this method, check if <paramref name="disposing"/> is <see langword="true"/> or
                    <see langword="false"/>.  Only dispose of other managed resources when it is <see langword="true"/>.
                </para>
                <see href="https://learn.microsoft.com/en-us/dotnet/standard/design-guidelines/dispose-pattern#basic-dispose-pattern"/>
            </remarks>
            <param name="disposing">Indicates whether this was called from <see cref="M:MonoGame.Extended.Animations.AnimationController.Dispose"/> or the finalizer.</param>
        </member>
        <member name="T:MonoGame.Extended.Animations.AnimationEvent">
            <summary>
            Represents an event that occurs during an animation.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Animations.AnimationEvent.Animation">
            <summary>
            Gets the animation controller associated with the event.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Animations.AnimationEvent.Trigger">
            <summary>
            Gets the trigger that caused the event.
            </summary>
        </member>
        <member name="T:MonoGame.Extended.Animations.AnimationEventTrigger">
            <summary>
            Specifies the trigger for an animation event.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.Animations.AnimationEventTrigger.FrameBegin">
            <summary>
            Triggered at the beginning of a frame.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.Animations.AnimationEventTrigger.FrameEnd">
            <summary>
            Triggered at the end of a frame.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.Animations.AnimationEventTrigger.FrameSkipped">
            <summary>
            Triggered when a frame is skipped.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.Animations.AnimationEventTrigger.AnimationLoop">
            <summary>
            Triggered when the animation loops.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.Animations.AnimationEventTrigger.AnimationCompleted">
            <summary>
            Triggered when the animation completes.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.Animations.AnimationEventTrigger.AnimationStopped">
            <summary>
            Triggered when the animation stops.
            </summary>
        </member>
        <member name="T:MonoGame.Extended.Animations.IAnimation">
            <summary>
            Defines the interface for an animation, specifying properties of the animation such as frames, looping, reversing,
            and ping-pong effects.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Animations.IAnimation.Name">
            <summary>
            Gets the name of the animation.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Animations.IAnimation.Frames">
            <summary>
            Gets the read-only collection of frames in the animation.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Animations.IAnimation.FrameCount">
            <summary>
            Gets the total number of frames in the animation.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Animations.IAnimation.IsLooping">
            <summary>
            Gets a value indicating whether the animation should loop.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Animations.IAnimation.IsReversed">
            <summary>
            Gets a value indicating whether the animation is reversed.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Animations.IAnimation.IsPingPong">
            <summary>
            Gets a value indicating whether the animation should ping-pong (reverse direction at the ends).
            </summary>
        </member>
        <member name="T:MonoGame.Extended.Animations.IAnimationController">
            <summary>
            Defines the interface for an animation controller with features to play, pause, stop, reset, and set the state of
            animation playback such as looping, reversing, and ping-pong effects.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Animations.IAnimationController.IsDisposed">
            <summary>
            Gets a value indicating whether this animation controller has been disposed of.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Animations.IAnimationController.IsPaused">
            <summary>
            Gets a value indicating whether the animation is paused.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Animations.IAnimationController.IsAnimating">
            <summary>
            Gets a value indicating whether the animation is currently animating.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Animations.IAnimationController.IsLooping">
            <summary>
            Gets or sets a value indicating whether the animation should loop.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Animations.IAnimationController.IsReversed">
            <summary>
            Gets or sets a value indicating whether the animation is reversed.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Animations.IAnimationController.IsPingPong">
            <summary>
            Gets or sets a value indicating whether the animation should ping-pong (reverse direction at the ends).
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Animations.IAnimationController.Speed">
            <summary>
            Gets or sets the speed of the animation.
            </summary>
            <value>The speed cannot be less than zero.</value>
        </member>
        <member name="E:MonoGame.Extended.Animations.IAnimationController.OnAnimationEvent">
            <summary>
            Gets or sets the action to perform when an animation event is triggered.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Animations.IAnimationController.CurrentFrameTimeRemaining">
            <summary>
            Gets the time remaining for the current frame.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Animations.IAnimationController.CurrentFrame">
            <summary>
            Gets the index of the current frame of the animation.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Animations.IAnimationController.FrameCount">
            <summary>
            Gets the total number of frames in the animation.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Animations.IAnimationController.SetFrame(System.Int32)">
            <summary>
            Sets the animation to a specified frame.
            </summary>
            <param name="index">The index of the frame to set.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the <paramref name="index"/> parameter is less than zero or greater than or equal to the total
            number of frames.
            </exception>
        </member>
        <member name="M:MonoGame.Extended.Animations.IAnimationController.Play">
            <summary>
            Plays the animation from the beginning.
            </summary>
            <returns>
            <see langword="true"/> if the animation was successfully started; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Animations.IAnimationController.Play(System.Int32)">
            <summary>
            Plays the animation from a specified starting frame.
            </summary>
            <param name="startingFrame">The frame to start the animation from.</param>
            <returns>
            <see langword="true"/> if the animation was successfully started; otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the <paramref name="startingFrame"/> parameter is less than zero or greater than or equal to the
            total number of frames.
            </exception>
        </member>
        <member name="M:MonoGame.Extended.Animations.IAnimationController.Pause">
            <summary>
            Pauses the animation.
            </summary>
            <returns>
            <see langword="true"/> if the animation was successfully paused; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Animations.IAnimationController.Pause(System.Boolean)">
            <summary>
            Pauses the animation.
            </summary>
            <param name="resetFrameDuration">If set to <see langword="true"/>, resets the frame duration.</param>
            <returns>
            <see langword="true"/> if the animation was successfully paused; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Animations.IAnimationController.Unpause">
            <summary>
            Unpauses the animation.
            </summary>
            <returns>
            <see langword="true"/> if the animation was successfully unpaused; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Animations.IAnimationController.Unpause(System.Boolean)">
            <summary>
            Unpauses the animation.
            </summary>
            <param name="advanceToNextFrame">If set to <see langword="true"/>, advances to the next frame.</param>
            <returns>
            <see langword="true"/> if the animation was successfully unpaused; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Animations.IAnimationController.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Updates the animation.
            </summary>
            <param name="gameTime">A snapshot of the timing values for the current update cycle.</param>
        </member>
        <member name="M:MonoGame.Extended.Animations.IAnimationController.Stop">
            <summary>
            Stops the animation.
            </summary>
            <returns>
            <see langword="true"/> if the animation was successfully stopped; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Animations.IAnimationController.Reset">
            <summary>
            Resets the animation to its initial state.
            </summary>
        </member>
        <member name="T:MonoGame.Extended.Animations.IAnimationFrame">
            <summary>
            Defines the interface for an animation frame, specifying the frame index and its duration.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Animations.IAnimationFrame.FrameIndex">
            <summary>
            Gets the frame index represented by this animation frame.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Animations.IAnimationFrame.Duration">
            <summary>
            Gets the total duration this frame should be displayed during an animation.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.BitmapFonts.BitmapFont.ToString">
            <inheritdoc/>
        </member>
        <member name="M:MonoGame.Extended.BitmapFonts.BitmapFontExtensions.DrawString(Microsoft.Xna.Framework.Graphics.SpriteBatch,MonoGame.Extended.BitmapFonts.BitmapFont,System.String,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single,System.Nullable{Microsoft.Xna.Framework.Rectangle})">
            <summary>
                Adds a string to a batch of sprites for rendering using the specified font, text, position, color, rotation,
                origin, scale, effects and layer.
            </summary>
            <param name="spriteBatch"></param>
            <param name="bitmapFont">A font for displaying text.</param>
            <param name="text">The text message to display.</param>
            <param name="position">The location (in screen coordinates) to draw the text.</param>
            <param name="color">
                The <see cref="T:Microsoft.Xna.Framework.Color" /> to tint a sprite. Use <see cref="P:Microsoft.Xna.Framework.Color.White" /> for full color with no
                tinting.
            </param>
            <param name="rotation">Specifies the angle (in radians) to rotate the text about its origin.</param>
            <param name="origin">The origin for each letter; the default is (0,0) which represents the upper-left corner.</param>
            <param name="scale">Scale factor.</param>
            <param name="effect">Effects to apply.</param>
            <param name="layerDepth">
                The depth of a layer. By default, 0 represents the front layer and 1 represents a back layer.
                Use SpriteSortMode if you want sprites to be sorted during drawing.
            </param>
            <param name="clippingRectangle">Clips the boundaries of the text so that it's not drawn outside the clipping rectangle</param>
        </member>
        <member name="M:MonoGame.Extended.BitmapFonts.BitmapFontExtensions.DrawString(Microsoft.Xna.Framework.Graphics.SpriteBatch,MonoGame.Extended.BitmapFonts.BitmapFont,System.String,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Vector2,System.Single,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single,System.Nullable{Microsoft.Xna.Framework.Rectangle})">
            <summary>
                Adds a string to a batch of sprites for rendering using the specified font, text, position, color, rotation,
                origin, scale, effects and layer.
            </summary>
            <param name="spriteBatch"></param>
            <param name="font">A font for displaying text.</param>
            <param name="text">The text message to display.</param>
            <param name="position">The location (in screen coordinates) to draw the text.</param>
            <param name="color">
                The <see cref="T:Microsoft.Xna.Framework.Color" /> to tint a sprite. Use <see cref="P:Microsoft.Xna.Framework.Color.White" /> for full color with no
                tinting.
            </param>
            <param name="rotation">Specifies the angle (in radians) to rotate the text about its origin.</param>
            <param name="origin">The origin for each letter; the default is (0,0) which represents the upper-left corner.</param>
            <param name="scale">Scale factor.</param>
            <param name="effect">Effects to apply.</param>
            <param name="layerDepth">
                The depth of a layer. By default, 0 represents the front layer and 1 represents a back layer.
                Use SpriteSortMode if you want sprites to be sorted during drawing.
            </param>
            <param name="clippingRectangle">Clips the boundaries of the text so that it's not drawn outside the clipping rectangle</param>
        </member>
        <member name="M:MonoGame.Extended.BitmapFonts.BitmapFontExtensions.DrawString(Microsoft.Xna.Framework.Graphics.SpriteBatch,MonoGame.Extended.BitmapFonts.BitmapFont,System.String,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,System.Single,System.Nullable{Microsoft.Xna.Framework.Rectangle})">
            <summary>
                Adds a string to a batch of sprites for rendering using the specified font, text, position, color, layer,
                and width (in pixels) where to wrap the text at.
            </summary>
            <remarks>
                <see cref="T:MonoGame.Extended.BitmapFonts.BitmapFont" /> objects are loaded from the Content Manager. See the <see cref="T:MonoGame.Extended.BitmapFonts.BitmapFont" /> class for
                more information.
                Before any calls to this method you must call <see cref="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Begin(Microsoft.Xna.Framework.Graphics.SpriteSortMode,Microsoft.Xna.Framework.Graphics.BlendState,Microsoft.Xna.Framework.Graphics.SamplerState,Microsoft.Xna.Framework.Graphics.DepthStencilState,Microsoft.Xna.Framework.Graphics.RasterizerState,Microsoft.Xna.Framework.Graphics.Effect,System.Nullable{Microsoft.Xna.Framework.Matrix})" />. Once all calls 
                are complete, call <see cref="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.End" />.
                Use a newline character (\n) to draw more than one line of text.
            </remarks>
            <param name="spriteBatch"></param>
            <param name="font">A font for displaying text.</param>
            <param name="text">The text message to display.</param>
            <param name="position">The location (in screen coordinates) to draw the text.</param>
            <param name="color">
                The <see cref="T:Microsoft.Xna.Framework.Color" /> to tint a sprite. Use <see cref="P:Microsoft.Xna.Framework.Color.White" /> for full color with no
                tinting.
            </param>
            <param name="layerDepth">
                The depth of a layer. By default, 0 represents the front layer and 1 represents a back layer.
                Use SpriteSortMode if you want sprites to be sorted during drawing.
            </param>
            <param name="clippingRectangle">Clips the boundaries of the text so that it's not drawn outside the clipping rectangle</param>
        </member>
        <member name="M:MonoGame.Extended.BitmapFonts.BitmapFontExtensions.DrawString(Microsoft.Xna.Framework.Graphics.SpriteBatch,MonoGame.Extended.BitmapFonts.BitmapFont,System.String,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,System.Nullable{Microsoft.Xna.Framework.Rectangle})">
            <summary>
                Adds a string to a batch of sprites for rendering using the specified font, text, position, color,
                and width (in pixels) where to wrap the text at. The text is drawn on layer 0f.
            </summary>
            <param name="spriteBatch"></param>
            <param name="font">A font for displaying text.</param>
            <param name="text">The text message to display.</param>
            <param name="position">The location (in screen coordinates) to draw the text.</param>
            <param name="color">
                The <see cref="T:Microsoft.Xna.Framework.Color" /> to tint a sprite. Use <see cref="P:Microsoft.Xna.Framework.Color.White" /> for full color with no
                tinting.
            </param>
            <param name="clippingRectangle">Clips the boundaries of the text so that it's not drawn outside the clipping rectangle</param>
        </member>
        <member name="T:MonoGame.Extended.BitmapFonts.BitmapFontCharacter">
            <summary>
            Represents a character in a bitmap font. This class cannot be inherited.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.BitmapFonts.BitmapFontCharacter.Character">
            <summary>
            Gets the character code.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.BitmapFonts.BitmapFontCharacter.TextureRegion">
            <summary>
            Gets the texture region that contains the character's image.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.BitmapFonts.BitmapFontCharacter.XOffset">
            <summary>
            Gets the horizontal offset for rendering the character.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.BitmapFonts.BitmapFontCharacter.YOffset">
            <summary>
            Gets the vertical offset for rendering the character.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.BitmapFonts.BitmapFontCharacter.XAdvance">
            <summary>
            Gets the horizontal advance value for rendering the next character.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.BitmapFonts.BitmapFontCharacter.Kernings">
            <summary>
            Gets the dictionary of kerning values for pairs of characters.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.BitmapFonts.BitmapFontCharacter.#ctor(System.Int32,MonoGame.Extended.Graphics.Texture2DRegion,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoGame.Extended.BitmapFonts.BitmapFontCharacter"/> class.
            </summary>
            <param name="character">The character code.</param>
            <param name="textureRegion">The texture region that contains the character's image.</param>
            <param name="xOffset">The horizontal offset for rendering the character.</param>
            <param name="yOffset">The vertical offset for rendering the character.</param>
            <param name="xAdvance">The horizontal advance value for rendering the next character.</param>
        </member>
        <member name="M:MonoGame.Extended.Collections.Bag`1.GetEnumerator">
            <summary>
            Get the <see cref="T:MonoGame.Extended.Collections.Bag`1.BagEnumerator"/> for this <see cref="T:MonoGame.Extended.Collections.Bag`1"/>. 
            </summary>
            <returns></returns>
            <remarks>
            Use this method preferentially over <see cref="M:System.Collections.IEnumerable.GetEnumerator"/> while enumerating via foreach
            to avoid boxing the enumerator on every iteration, which can be expensive in high-performance environments.
            </remarks>
        </member>
        <member name="T:MonoGame.Extended.Collections.Bag`1.BagEnumerator">
            <summary>
            Enumerates a Bag.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Collections.Bag`1.BagEnumerator.#ctor(MonoGame.Extended.Collections.Bag{`0})">
            <summary>
            Creates a new <see cref="T:MonoGame.Extended.Collections.Bag`1.BagEnumerator"/> for this <see cref="T:MonoGame.Extended.Collections.Bag`1"/>.
            </summary>
            <param name="bag"></param>
        </member>
        <member name="P:MonoGame.Extended.Collections.Bag`1.BagEnumerator.Current">
            <summary>
            Gets the element in the <see cref="T:MonoGame.Extended.Collections.Bag`1"/> at the current position of the enumerator.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Collections.Bag`1.BagEnumerator.MoveNext">
            <inheritdoc/>
        </member>
        <member name="M:MonoGame.Extended.Collections.Bag`1.BagEnumerator.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:MonoGame.Extended.Collections.Bag`1.BagEnumerator.Reset">
            <inheritdoc/>
        </member>
        <member name="T:MonoGame.Extended.Collections.Deque`1">
            <summary>
                Represents a collection of objects which elements can added to or removed either from the front or back; a
                <a href="https://en.wikipedia.org/wiki/Double-ended_queue">double ended queue</a> (deque).
            </summary>
            <remarks>
                <a href="https://en.wikipedia.org/wiki/Circular_buffer">circular array</a> is used as the internal data
                structure for the <see cref="T:MonoGame.Extended.Collections.Deque`1" />.
            </remarks>
            <typeparam name="T">The type of the elements in the deque.</typeparam>
        </member>
        <member name="M:MonoGame.Extended.Collections.Deque`1.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:MonoGame.Extended.Collections.Deque`1" /> class that is empty and has the default initial capacity.
            </summary>
            <remarks>
                <para>
                    The capacity of a <see cref="T:MonoGame.Extended.Collections.Deque`1" /> is the number of elements that the <see cref="T:MonoGame.Extended.Collections.Deque`1" /> can
                    hold. As elements are added to a <see cref="T:MonoGame.Extended.Collections.Deque`1" />, <see cref="P:MonoGame.Extended.Collections.Deque`1.Capacity" /> is automatically increased by
                    <see cref="P:MonoGame.Extended.Collections.Deque`1.ResizeFunction" /> as required by reallocating the internal array.
                </para>
                <para>
                    If the size of the collection can be estimated, using the <see cref="M:MonoGame.Extended.Collections.Deque`1.#ctor(System.Int32)" /> constructor and
                    specifying the initial capacity eliminates the need to perform a number of resizing operations while adding
                    elements to the <see cref="T:MonoGame.Extended.Collections.Deque`1" />.
                </para>
                <para>
                    The capacity can be decreased by calling the <see cref="M:MonoGame.Extended.Collections.Deque`1.TrimExcess" /> method or by setting the
                    <see cref="P:MonoGame.Extended.Collections.Deque`1.Capacity" /> property explicitly. Decreasing, or increasing, the capacity reallocates memory and
                    copies all the
                    elements in the <see cref="T:MonoGame.Extended.Collections.Deque`1" />.
                </para>
                <para>This constructor is an O(1) operation.</para>
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Collections.Deque`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Initializes a new instance of the <see cref="T:MonoGame.Extended.Collections.Deque`1" /> class that contains elements copied from the specified
                collection and has sufficient capacity to accommodate the number of elements copied.
            </summary>
            <param name="collection">The collection whose elements are copied to the new deque.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection" /> is null.</exception>
            <remarks>
                <para>
                    The elements are copied onto the <see cref="T:MonoGame.Extended.Collections.Deque`1" /> in the same order they are read by the enumerator of
                    <paramref name="collection" />.
                </para>
                <para>This constructor is an O(n) operation, where n is the number of elements in <paramref name="collection" />.</para>
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Collections.Deque`1.#ctor(System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:MonoGame.Extended.Collections.Deque`1" /> class that is empty and has the specified initial
                capacity.
            </summary>
            <param name="capacity">The number of elements that the new <see cref="T:MonoGame.Extended.Collections.Deque`1" /> can initially store.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity" /> is less than 0.</exception>
            <remarks>
                <para>
                    The capacity of a <see cref="T:MonoGame.Extended.Collections.Deque`1" /> is the number of elements that the <see cref="T:MonoGame.Extended.Collections.Deque`1" /> can
                    hold. As elements are added to a <see cref="T:MonoGame.Extended.Collections.Deque`1" />, <see cref="P:MonoGame.Extended.Collections.Deque`1.Capacity" /> is automatically increased by
                    <see cref="P:MonoGame.Extended.Collections.Deque`1.ResizeFunction" /> as required by reallocating the internal array.
                </para>
                <para>
                    If the size of the collection can be estimated, specifying the initial capacity eliminates the need to
                    perform a number of resizing operations while adding elements to the <see cref="T:MonoGame.Extended.Collections.Deque`1" />.
                </para>
                <para>
                    The capacity can be decreased by calling the <see cref="M:MonoGame.Extended.Collections.Deque`1.TrimExcess" /> method or by setting the
                    <see cref="P:MonoGame.Extended.Collections.Deque`1.Capacity" /> property explicitly. Decreasing, or increasing, the capacity reallocates memory and
                    copies all the elements in the <see cref="T:MonoGame.Extended.Collections.Deque`1" />.
                </para>
                <para>This constructor is an O(n) operation, where n is <paramref name="capacity" />.</para>
            </remarks>
        </member>
        <member name="P:MonoGame.Extended.Collections.Deque`1.ResizeFunction">
            <summary>
                Gets or sets the resize function used to calculate and set <see cref="P:MonoGame.Extended.Collections.Deque`1.Capacity" /> when a greater capacity is
                required.
            </summary>
            <returns>
                The <see cref="T:System.Func`2" /> used to calculate and set <see cref="P:MonoGame.Extended.Collections.Deque`1.Capacity" /> when a greater capacity
                is required.
            </returns>
            <remarks>
                The default resize function is twice the <see cref="P:MonoGame.Extended.Collections.Deque`1.Capacity" />. Setting
                <see cref="P:MonoGame.Extended.Collections.Deque`1.ResizeFunction" /> to <c>null</c> will set it back to the default.
            </remarks>
        </member>
        <member name="P:MonoGame.Extended.Collections.Deque`1.Capacity">
            <summary>
                Gets or sets the total number of elements the internal data structure can hold without resizing.
            </summary>
            <returns>The number of elements that the <see cref="T:MonoGame.Extended.Collections.Deque`1" /> can contain before resizing is required.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <see cref="P:MonoGame.Extended.Collections.Deque`1.Capacity" /> cannot be set to a value less than <see cref="P:MonoGame.Extended.Collections.Deque`1.Count" />.
            </exception>
            <remarks>
                Changing <see cref="P:MonoGame.Extended.Collections.Deque`1.Capacity" /> reallocates memory and copies all the
                elements in the <see cref="T:MonoGame.Extended.Collections.Deque`1" />.
            </remarks>
        </member>
        <member name="P:MonoGame.Extended.Collections.Deque`1.Item(System.Int32)">
            <summary>
                Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Index was out of range. Must be non-negative and less than <see cref="P:MonoGame.Extended.Collections.Deque`1.Count" />.
            </exception>
            <remarks>
                <para></para>
                <para>
                    Use <c>0</c> for the <paramref name="index" /> to get or set the element at the beginning of the
                    <see cref="T:MonoGame.Extended.Collections.Deque`1" />, and use <c><see cref="P:MonoGame.Extended.Collections.Deque`1.Count" /> - 1</c> for the <paramref name="index" /> to get the
                    element at the end of the <see cref="T:MonoGame.Extended.Collections.Deque`1" />.
                </para>
            </remarks>
        </member>
        <member name="P:MonoGame.Extended.Collections.Deque`1.Count">
            <summary>
                Gets the number of elements contained in the <see cref="T:MonoGame.Extended.Collections.Deque`1" />.
            </summary>
            <returns>The number of elements contained in the <see cref="T:MonoGame.Extended.Collections.Deque`1" />.</returns>
        </member>
        <member name="M:MonoGame.Extended.Collections.Deque`1.GetEnumerator">
            <summary>
                Returns an enumerator that iterates through the <see cref="T:MonoGame.Extended.Collections.Deque`1" />.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the <see cref="T:MonoGame.Extended.Collections.Deque`1" />.</returns>
        </member>
        <member name="M:MonoGame.Extended.Collections.Deque`1.IndexOf(`0)">
            <summary>
                Searches for the specified element and returns the zero-based index of the first occurrence within the entire
                <see cref="T:MonoGame.Extended.Collections.Deque`1" />.
            </summary>
            <param name="item">
                The element to locate in the <see cref="T:MonoGame.Extended.Collections.Deque`1" />. The value can be <c>null</c> for reference
                types.
            </param>
            <returns>
                The zero-based index of the first occurrence of <paramref name="item" /> within the entire
                <see cref="T:MonoGame.Extended.Collections.Deque`1" />, if found; otherwise, <c>-1</c>.
            </returns>
            <remarks>
                <para>
                    This method is an O(1) operation if <paramref name="item" /> is at the front or back of the
                    <see cref="T:MonoGame.Extended.Collections.Deque`1" />; otherwise, this method is an O(n) operation where n is <see cref="P:MonoGame.Extended.Collections.Deque`1.Count" />.
                </para>
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Collections.Deque`1.Remove(`0)">
            <summary>
                Removes the first occurrence of a specific element from the <see cref="T:MonoGame.Extended.Collections.Deque`1" />.
            </summary>
            <param name="item">
                The element to remove from the <see cref="T:MonoGame.Extended.Collections.Deque`1" />. The value can be <c>null</c> for reference
                types.
            </param>
            <returns>
                <c>true</c> if <paramref name="item" /> was successfully removed; otherwise, false. This method also returns false
                if <paramref name="item" /> is not found in the <see cref="T:MonoGame.Extended.Collections.Deque`1" />.
            </returns>
            <remarks>
                <para>
                    This method is an O(1) operation if <paramref name="item" /> is at the front or back of the
                    <see cref="T:MonoGame.Extended.Collections.Deque`1" />; otherwise, this method is an O(n) operation where n is <see cref="P:MonoGame.Extended.Collections.Deque`1.Count" />.
                </para>
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Collections.Deque`1.RemoveAt(System.Int32)">
            <summary>
                Removes the element at the specified index of the <see cref="T:MonoGame.Extended.Collections.Deque`1" />.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para><paramref name="index" /> is less than 0.</para>
                <para>-or-</para>
                <para><paramref name="index" /> is equal to or greater than <see cref="P:MonoGame.Extended.Collections.Deque`1.Count" />.</para>
            </exception>
        </member>
        <member name="M:MonoGame.Extended.Collections.Deque`1.Clear">
            <summary>
                Removes all elements from the <see cref="T:MonoGame.Extended.Collections.Deque`1" />.
            </summary>
            <remarks>
                <para>
                    <see cref="P:MonoGame.Extended.Collections.Deque`1.Count" /> is set to <c>0</c>, and references to other objects from elements of the collection are
                    also released.
                </para>
                <para>
                    <see cref="P:MonoGame.Extended.Collections.Deque`1.Capacity" /> remains unchanged. To reset the capacity of the <see cref="T:MonoGame.Extended.Collections.Deque`1" />, call the
                    <see cref="M:MonoGame.Extended.Collections.Deque`1.TrimExcess" /> method or set the <see cref="P:MonoGame.Extended.Collections.Deque`1.Capacity" /> property explictly. Decreasing, or
                    increasing, the capacity reallocates memory and copies all the elements in the <see cref="T:MonoGame.Extended.Collections.Deque`1" />.
                    Trimming an empty <see cref="T:MonoGame.Extended.Collections.Deque`1" /> sets <see cref="P:MonoGame.Extended.Collections.Deque`1.Capacity" /> to the default capacity.
                </para>
                <para>This method is an O(n) operation, where n is <see cref="P:MonoGame.Extended.Collections.Deque`1.Count" />.</para>
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Collections.Deque`1.Contains(`0)">
            <summary>
                Determines whether an element is in the <see cref="T:MonoGame.Extended.Collections.Deque`1" />.
            </summary>
            <param name="item">
                The element to locate in the <see cref="T:MonoGame.Extended.Collections.Deque`1" />. The value can be <c>null</c> for reference
                types.
            </param>
            <returns><c>true</c> if <paramref name="item" /> is found in the <see cref="T:MonoGame.Extended.Collections.Deque`1" />; otherwise, false.</returns>
            <remarks>
                <para>
                    This method determines equality by using the default equality comparer, as defined by the object's
                    implementation
                    of the <see cref="M:System.IEquatable`1.Equals(`0)" /> method for the type of values in the list.
                </para>
                <para>
                    This method performs a linear search; therefore, this method is an O(n) operation, where n is
                    <see cref="P:MonoGame.Extended.Collections.Deque`1.Count" />.
                </para>
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Collections.Deque`1.CopyTo(`0[],System.Int32)">
            <summary>
                Copies the entire <see cref="T:MonoGame.Extended.Collections.Deque`1" /> to a compatible one-dimensional array, starting at the specified index of
                the target array.
            </summary>
            <param name="array">
                The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from
                <see cref="T:MonoGame.Extended.Collections.Deque`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array" /> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex" /> is less than 0.</exception>
            <exception cref="T:System.ArgumentException">
                The number of elements in the source <see cref="T:MonoGame.Extended.Collections.Deque`1" /> is greater than the
                available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.
            </exception>
            <remarks>
                This method uses <see cref="M:System.Array.Copy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)" /> to copy the elements. The elements are
                copied to the <see cref="T:System.Array" /> in the same order in which the enumerator iterates
                through the <see cref="T:MonoGame.Extended.Collections.Deque`1" />. This method is an O(n) operation, where n is <see cref="P:MonoGame.Extended.Collections.Deque`1.Count" />.
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Collections.Deque`1.TrimExcess">
            <summary>
                Sets the capacity to the actual number of elements in the <see cref="T:MonoGame.Extended.Collections.Deque`1" />, if that number is less than a
                threshold value.
            </summary>
            <remarks>
                <para>
                    This method can be used to minimize the <see cref="T:MonoGame.Extended.Collections.Deque`1" />'s memory overhead if no new elements will be
                    added. The cost of reallocating and copying the elements of a <see cref="T:MonoGame.Extended.Collections.Deque`1" /> can be considerable.
                    However, the <see cref="M:MonoGame.Extended.Collections.Deque`1.TrimExcess" /> method does nothing if the <see cref="P:MonoGame.Extended.Collections.Deque`1.Count" /> is more than 90% of
                    <see cref="P:MonoGame.Extended.Collections.Deque`1.Capacity" />. This avoids incurring a large reallocation cost for a relatively small gain.
                </para>
                <para>
                    If <see cref="P:MonoGame.Extended.Collections.Deque`1.Count" /> is more than 90% of <see cref="P:MonoGame.Extended.Collections.Deque`1.Capacity" />, this method is an O(1) operation; O(n)
                    otherwise, where n is <see cref="P:MonoGame.Extended.Collections.Deque`1.Count" />.
                </para>
                <para>
                    To reset a <see cref="T:MonoGame.Extended.Collections.Deque`1" /> to its initial state, call the <see cref="M:MonoGame.Extended.Collections.Deque`1.Clear" /> method before calling
                    the <see cref="M:MonoGame.Extended.Collections.Deque`1.TrimExcess" /> method. Trimming an empty <see cref="T:MonoGame.Extended.Collections.Deque`1" /> sets <see cref="P:MonoGame.Extended.Collections.Deque`1.Capacity" /> to
                    the default capacity.
                </para>
                <para>The capacity can also be set using the <see cref="P:MonoGame.Extended.Collections.Deque`1.Capacity" /> property.</para>
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Collections.Deque`1.AddToFront(`0)">
            <summary>
                Adds an element to the beginning of the <see cref="T:MonoGame.Extended.Collections.Deque`1" />.
            </summary>
            <param name="item">The element to add to the <see cref="T:MonoGame.Extended.Collections.Deque`1" />. The value can be <c>null</c>.</param>
            <remarks>
                <para>
                    As elements are added to a <see cref="T:MonoGame.Extended.Collections.Deque`1" />, <see cref="P:MonoGame.Extended.Collections.Deque`1.Capacity" /> is automatically increased by
                    <see cref="P:MonoGame.Extended.Collections.Deque`1.ResizeFunction" /> as required by reallocating the internal circular array.
                </para>
                <para>
                    If <see cref="P:MonoGame.Extended.Collections.Deque`1.Count" /> is less than <see cref="P:MonoGame.Extended.Collections.Deque`1.Capacity" />, this method is an O(1) operation. Otherwise the
                    internal circular array needs to be resized to accommodate the new element and this method becomes an O(n)
                    operation, where n is <see cref="P:MonoGame.Extended.Collections.Deque`1.Count" />.
                </para>
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Collections.Deque`1.AddToBack(`0)">
            <summary>
                Adds an element to the end of the <see cref="T:MonoGame.Extended.Collections.Deque`1" />.
            </summary>
            <param name="item">The element to add to the <see cref="T:MonoGame.Extended.Collections.Deque`1" />. The value can be <c>null</c>.</param>
            <remarks>
                <para>
                    As elements are added to a <see cref="T:MonoGame.Extended.Collections.Deque`1" />, <see cref="P:MonoGame.Extended.Collections.Deque`1.Capacity" /> is automatically increased by
                    <see cref="P:MonoGame.Extended.Collections.Deque`1.ResizeFunction" /> as required by reallocating the internal circular array.
                </para>
                <para>
                    If <see cref="P:MonoGame.Extended.Collections.Deque`1.Count" /> is less than <see cref="P:MonoGame.Extended.Collections.Deque`1.Capacity" />, this method is an O(1) operation. Otherwise the
                    internal circular array needs to be resized to accommodate the new element and this method becomes an O(n)
                    operation, where n is <see cref="P:MonoGame.Extended.Collections.Deque`1.Count" />.
                </para>
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Collections.Deque`1.Get(System.Int32,`0@)">
            <summary>
                Returns the element at the specified index of the <see cref="T:MonoGame.Extended.Collections.Deque`1" />.
            </summary>
            <param name="index">The zero-based index of the element to get.</param>
            <param name="item">
                When this method returns, contains the element at the specified index of the
                <see cref="T:MonoGame.Extended.Collections.Deque`1" />, if <paramref name="index" /> was non-negative and less than <see cref="P:MonoGame.Extended.Collections.Deque`1.Count" />;
                otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.
            </param>
            <returns>
                <c>true</c> if <paramref name="item" /> was successfully retrieved at <paramref name="index" /> from the of the
                <see cref="T:MonoGame.Extended.Collections.Deque`1" />;
                otherwise, <c>false</c> if <paramref name="index" /> was non-negative and less than <see cref="P:MonoGame.Extended.Collections.Deque`1.Count" />.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Collections.Deque`1.GetFront(`0@)">
            <summary>
                Returns the element at the beginning of the <see cref="T:MonoGame.Extended.Collections.Deque`1" />.
            </summary>
            <param name="item">
                When this method returns, contains the element at the beginning of the <see cref="T:MonoGame.Extended.Collections.Deque`1" />, if
                <see cref="T:MonoGame.Extended.Collections.Deque`1" /> was not empty; otherwise, the default value for the type of the value parameter. This
                parameter is passed uninitialized.
            </param>
            <returns>
                <c>true</c> if <paramref name="item" /> was successfully from the beginning of the <see cref="T:MonoGame.Extended.Collections.Deque`1" />;
                otherwise, <c>false</c> if the <see cref="T:MonoGame.Extended.Collections.Deque`1" /> is empty.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Collections.Deque`1.GetBack(`0@)">
            <summary>
                Returns the element at the end of the <see cref="T:MonoGame.Extended.Collections.Deque`1" />.
            </summary>
            <param name="item">
                When this method returns, contains the element at the end of the <see cref="T:MonoGame.Extended.Collections.Deque`1" />, if
                <see cref="T:MonoGame.Extended.Collections.Deque`1" /> was not empty; otherwise, the default value for the type of the value parameter. This
                parameter is passed uninitialized.
            </param>
            <returns>
                <c>true</c> if <paramref name="item" /> was successfully from the end of the <see cref="T:MonoGame.Extended.Collections.Deque`1" />;
                otherwise, <c>false</c> if the <see cref="T:MonoGame.Extended.Collections.Deque`1" /> is empty.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Collections.Deque`1.RemoveFromFront(`0@)">
            <summary>
                Removes the element at the beginning of the <see cref="T:MonoGame.Extended.Collections.Deque`1" />.
            </summary>
            <param name="item">
                When this method returns, contains the element removed from the beginning of the
                <see cref="T:MonoGame.Extended.Collections.Deque`1" />, if the <see cref="T:MonoGame.Extended.Collections.Deque`1" /> was not empty; otherwise, the default value for the type of
                the value parameter. This parameter is passed uninitialized.
            </param>
            <returns>
                <c>true</c> if <paramref name="item" /> was successfully removed from the beginning of the <see cref="T:MonoGame.Extended.Collections.Deque`1" />;
                otherwise, <c>false</c> if the <see cref="T:MonoGame.Extended.Collections.Deque`1" /> is empty.
            </returns>
            <remarks>
                <para>
                    This method is similar to the <see cref="M:MonoGame.Extended.Collections.Deque`1.GetFront(`0@)" /> method, but <see cref="M:MonoGame.Extended.Collections.Deque`1.GetFront(`0@)" /> does not
                    modify the <see cref="T:MonoGame.Extended.Collections.Deque`1" />.
                </para>
                <para>
                    <c>null</c> can be added to the <see cref="T:MonoGame.Extended.Collections.Deque`1" /> as a value. To distinguish between a null value and
                    the end of the <see cref="T:MonoGame.Extended.Collections.Deque`1" />, check whether the return value of <see cref="M:MonoGame.Extended.Collections.Deque`1.RemoveFromFront(`0@)" />
                    is
                    <c>false</c> or
                    <see cref="P:MonoGame.Extended.Collections.Deque`1.Count" /> is <c>0</c>.
                </para>
                <para>
                    This method is an O(1) operation.
                </para>
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Collections.Deque`1.RemoveFromFront">
            <summary>
                Removes the element at the beginning of the <see cref="T:MonoGame.Extended.Collections.Deque`1" />.
            </summary>
            <returns>
                <c>true</c> if the element was successfully removed from the beginning of the <see cref="T:MonoGame.Extended.Collections.Deque`1" />;
                otherwise, <c>false</c> if the <see cref="T:MonoGame.Extended.Collections.Deque`1" /> is empty.
            </returns>
            <remarks>
                <para>
                    This method is similar to the <see cref="M:MonoGame.Extended.Collections.Deque`1.GetFront(`0@)" /> method, but <see cref="M:MonoGame.Extended.Collections.Deque`1.GetFront(`0@)" /> does not
                    modify the <see cref="T:MonoGame.Extended.Collections.Deque`1" />.
                </para>
                <para>
                    <c>null</c> can be added to the <see cref="T:MonoGame.Extended.Collections.Deque`1" /> as a value. To distinguish between a null value and
                    the end of the <see cref="T:MonoGame.Extended.Collections.Deque`1" />, check whether the return value of <see cref="M:MonoGame.Extended.Collections.Deque`1.RemoveFromFront" /> is
                    <c>false</c> or
                    <see cref="P:MonoGame.Extended.Collections.Deque`1.Count" /> is <c>0</c>.
                </para>
                <para>
                    This method is an O(1) operation.
                </para>
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Collections.Deque`1.RemoveFromBack(`0@)">
            <summary>
                Removes the element at the end of the <see cref="T:MonoGame.Extended.Collections.Deque`1" />.
            </summary>
            <param name="item">
                When this method returns, contains the element removed from the end of the
                <see cref="T:MonoGame.Extended.Collections.Deque`1" />, if the <see cref="T:MonoGame.Extended.Collections.Deque`1" /> was not empty; otherwise, the default value for the type of
                the value parameter. This parameter is passed uninitialized.
            </param>
            <returns>
                <c>true</c> if <paramref name="item" /> was successfully removed from the end of the <see cref="T:MonoGame.Extended.Collections.Deque`1" />;
                otherwise, <c>false</c> if the <see cref="T:MonoGame.Extended.Collections.Deque`1" /> is empty.
            </returns>
            <remarks>
                <para>
                    This method is similar to the <see cref="M:MonoGame.Extended.Collections.Deque`1.GetBack(`0@)" /> method, but <see cref="M:MonoGame.Extended.Collections.Deque`1.GetBack(`0@)" /> does not
                    modify the <see cref="T:MonoGame.Extended.Collections.Deque`1" />.
                </para>
                <para>
                    <c>null</c> can be added to the <see cref="T:MonoGame.Extended.Collections.Deque`1" /> as a value. To distinguish between a null value and
                    the end of the <see cref="T:MonoGame.Extended.Collections.Deque`1" />, check whether the return value of <see cref="M:MonoGame.Extended.Collections.Deque`1.RemoveFromBack(`0@)" />
                    is
                    <c>false</c> or
                    <see cref="P:MonoGame.Extended.Collections.Deque`1.Count" /> is <c>0</c>.
                </para>
                <para>
                    This method is an O(1) operation.
                </para>
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Collections.Deque`1.RemoveFromBack">
            <summary>
                Removes the element at the end of the <see cref="T:MonoGame.Extended.Collections.Deque`1" />.
            </summary>
            <returns>
                <c>true</c> if the element was successfully removed from the end of the <see cref="T:MonoGame.Extended.Collections.Deque`1" />;
                otherwise, <c>false</c> if the <see cref="T:MonoGame.Extended.Collections.Deque`1" /> is empty.
            </returns>
            <remarks>
                <para>
                    This method is similar to the <see cref="M:MonoGame.Extended.Collections.Deque`1.GetBack(`0@)" /> method, but <see cref="M:MonoGame.Extended.Collections.Deque`1.GetBack(`0@)" /> does not
                    modify the <see cref="T:MonoGame.Extended.Collections.Deque`1" />.
                </para>
                <para>
                    <c>null</c> can be added to the <see cref="T:MonoGame.Extended.Collections.Deque`1" /> as a value. To distinguish between a null value and
                    the end of the <see cref="T:MonoGame.Extended.Collections.Deque`1" />, check whether the return value of <see cref="M:MonoGame.Extended.Collections.Deque`1.RemoveFromBack" /> is
                    <c>false</c> or
                    <see cref="P:MonoGame.Extended.Collections.Deque`1.Count" /> is <c>0</c>.
                </para>
                <para>
                    This method is an O(1) operation.
                </para>
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Collections.Deque`1.Pop">
            <summary>
            Removes and returns the last item.
            </summary>
            <returns>The item that was removed</returns>
        </member>
        <member name="T:MonoGame.Extended.Collections.IObservableCollection`1">
            <summary>Interface for collections that can be observed</summary>
            <typeparam name="T">Type of items managed in the collection</typeparam>
        </member>
        <member name="E:MonoGame.Extended.Collections.IObservableCollection`1.ItemAdded">
            <summary>Raised when an item has been added to the collection</summary>
        </member>
        <member name="E:MonoGame.Extended.Collections.IObservableCollection`1.ItemRemoved">
            <summary>Raised when an item is removed from the collection</summary>
        </member>
        <member name="E:MonoGame.Extended.Collections.IObservableCollection`1.Clearing">
            <summary>Raised when the collection is about to be cleared</summary>
            <remarks>
                This could be covered by calling ItemRemoved for each item currently
                contained in the collection, but it is often simpler and more efficient
                to process the clearing of the entire collection as a special operation.
            </remarks>
        </member>
        <member name="E:MonoGame.Extended.Collections.IObservableCollection`1.Cleared">
            <summary>Raised when the collection has been cleared of its items</summary>
        </member>
        <member name="T:MonoGame.Extended.Collections.ItemEventArgs`1">
            <summary>
                Arguments class for collections wanting to hand over an item in an event
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Collections.ItemEventArgs`1.#ctor(`0)">
            <summary>Initializes a new event arguments supplier</summary>
            <param name="item">Item to be supplied to the event handler</param>
        </member>
        <member name="P:MonoGame.Extended.Collections.ItemEventArgs`1.Item">
            <summary>Obtains the collection item the event arguments are carrying</summary>
        </member>
        <member name="M:MonoGame.Extended.Collections.ObservableCollection`1.#ctor">
            <summary>
                Initializes a new instance of the ObservableCollection class that is empty.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Collections.ObservableCollection`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
                Initializes a new instance of the ObservableCollection class as a wrapper
                for the specified list.
            </summary>
            <param name="list">The list that is wrapped by the new collection.</param>
            <exception cref="T:System.ArgumentNullException">
                List is null.
            </exception>
        </member>
        <member name="E:MonoGame.Extended.Collections.ObservableCollection`1.ItemAdded">
            <summary>Raised when an item has been added to the collection</summary>
        </member>
        <member name="E:MonoGame.Extended.Collections.ObservableCollection`1.ItemRemoved">
            <summary>Raised when an item is removed from the collection</summary>
        </member>
        <member name="E:MonoGame.Extended.Collections.ObservableCollection`1.Clearing">
            <summary>Raised when the collection is about to be cleared</summary>
            <remarks>
                This could be covered by calling ItemRemoved for each item currently
                contained in the collection, but it is often simpler and more efficient
                to process the clearing of the entire collection as a special operation.
            </remarks>
        </member>
        <member name="E:MonoGame.Extended.Collections.ObservableCollection`1.Cleared">
            <summary>Raised when the collection has been cleared</summary>
        </member>
        <member name="M:MonoGame.Extended.Collections.ObservableCollection`1.ClearItems">
            <summary>Removes all elements from the Collection</summary>
        </member>
        <member name="M:MonoGame.Extended.Collections.ObservableCollection`1.InsertItem(System.Int32,`0)">
            <summary>
                Inserts an element into the ObservableCollection at the specified index
            </summary>
            <param name="index">
                The object to insert. The value can be null for reference types.
            </param>
            <param name="item">The zero-based index at which item should be inserted</param>
        </member>
        <member name="M:MonoGame.Extended.Collections.ObservableCollection`1.RemoveItem(System.Int32)">
            <summary>
                Removes the element at the specified index of the ObservableCollection
            </summary>
            <param name="index">The zero-based index of the element to remove</param>
        </member>
        <member name="M:MonoGame.Extended.Collections.ObservableCollection`1.SetItem(System.Int32,`0)">
            <summary>Replaces the element at the specified index</summary>
            <param name="index">
                The new value for the element at the specified index. The value can be null
                for reference types
            </param>
            <param name="item">The zero-based index of the element to replace</param>
        </member>
        <member name="M:MonoGame.Extended.Collections.ObservableCollection`1.OnAdded(`0)">
            <summary>Fires the 'ItemAdded' event</summary>
            <param name="item">Item that has been added to the collection</param>
        </member>
        <member name="M:MonoGame.Extended.Collections.ObservableCollection`1.OnRemoved(`0)">
            <summary>Fires the 'ItemRemoved' event</summary>
            <param name="item">Item that has been removed from the collection</param>
        </member>
        <member name="M:MonoGame.Extended.Collections.ObservableCollection`1.OnClearing">
            <summary>Fires the 'Clearing' event</summary>
        </member>
        <member name="M:MonoGame.Extended.Collections.ObservableCollection`1.OnCleared">
            <summary>Fires the 'Cleared' event</summary>
        </member>
        <member name="T:MonoGame.Extended.Collisions.CollisionComponent">
            <summary>
            Handles basic collision between actors.
            When two actors collide, their OnCollision method is called.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Collisions.CollisionComponent.Layers">
            <summary>
            List of collision's layers
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Collisions.CollisionComponent.#ctor(MonoGame.Extended.RectangleF)">
            <summary>
            Creates component with default layer, which is a collision tree covering the specified area (using <see cref="N:MonoGame.Extended.Collisions.QuadTree"/>.
            </summary>
            <param name="boundary">Boundary of the collision tree.</param>
        </member>
        <member name="M:MonoGame.Extended.Collisions.CollisionComponent.#ctor(MonoGame.Extended.Collisions.Layers.Layer)">
            <summary>
            Creates component with specifies default layer.
            If layer is null, method creates component without default layer.
            </summary>
            <param name="layer">Default layer</param>
        </member>
        <member name="M:MonoGame.Extended.Collisions.CollisionComponent.SetDefaultLayer(MonoGame.Extended.Collisions.Layers.Layer)">
            <summary>
            The main layer has the name from <see cref="F:MonoGame.Extended.Collisions.CollisionComponent.DEFAULT_LAYER_NAME"/>.
            The main layer collision with itself and all other layers.
            </summary>
            <param name="layer">Layer to set default</param>
        </member>
        <member name="M:MonoGame.Extended.Collisions.CollisionComponent.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Update the collision tree and process collisions.
            </summary>
            <remarks>
            Boundary shapes are updated if they were changed since the last
            update.
            </remarks>
            <param name="gameTime"></param>
        </member>
        <member name="M:MonoGame.Extended.Collisions.CollisionComponent.Insert(MonoGame.Extended.Collisions.ICollisionActor)">
            <summary>
            Inserts the target into the collision tree.
            The target will have its OnCollision called when collisions occur.
            </summary>
            <param name="target">Target to insert.</param>
        </member>
        <member name="M:MonoGame.Extended.Collisions.CollisionComponent.Remove(MonoGame.Extended.Collisions.ICollisionActor)">
            <summary>
            Removes the target from the collision tree.
            </summary>
            <param name="target">Target to remove.</param>
        </member>
        <member name="M:MonoGame.Extended.Collisions.CollisionComponent.Add(System.String,MonoGame.Extended.Collisions.Layers.Layer)">
            <summary>
            Add the new layer. The name of layer must be unique.
            </summary>
            <param name="name">Name of layer</param>
            <param name="layer">The new layer</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is null</exception>
        </member>
        <member name="M:MonoGame.Extended.Collisions.CollisionComponent.Remove(System.String,MonoGame.Extended.Collisions.Layers.Layer)">
            <summary>
            Remove the layer and all layer's collisions.
            </summary>
            <param name="name">The name of the layer to delete</param>
            <param name="layer">The layer to delete</param>
        </member>
        <member name="M:MonoGame.Extended.Collisions.CollisionComponent.CalculatePenetrationVector(MonoGame.Extended.IShapeF,MonoGame.Extended.IShapeF)">
            <summary>
            Calculate a's penetration into b
            </summary>
            <param name="a">The penetrating shape.</param>
            <param name="b">The shape being penetrated.</param>
            <returns>The distance vector from the edge of b to a's Position</returns>
        </member>
        <member name="T:MonoGame.Extended.Collisions.CollisionEventArgs">
            <summary>
            This class holds data on a collision. It is passed as a parameter to
            OnCollision methods.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Collisions.CollisionEventArgs.Other">
            <summary>
            Gets the object being collided with.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Collisions.CollisionEventArgs.PenetrationVector">
            <summary>
            Gets a vector representing the overlap between the two objects.
            </summary>
            <remarks>
            This vector starts at the edge of <see cref="P:MonoGame.Extended.Collisions.CollisionEventArgs.Other"/> and ends at
            the Actor's location.
            </remarks>
        </member>
        <member name="T:MonoGame.Extended.Collisions.ICollisionActor">
            <summary>
            An actor that can be collided with.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Collisions.ICollisionActor.LayerName">
            <summary>
            A name of layer, which will contains this actor.
            If it equals null, an actor will insert into a default layer
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Collisions.ICollisionActor.Bounds">
            <summary>
            A bounds of an actor. It is using for collision calculating
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Collisions.ICollisionActor.OnCollision(MonoGame.Extended.Collisions.CollisionEventArgs)">
            <summary>
            It will called, when collision with an another actor fires
            </summary>
            <param name="collisionInfo">Data about collision</param>
        </member>
        <member name="T:MonoGame.Extended.Collisions.ISpaceAlgorithm">
            <summary>
            Interface, which split space for optimization of collisions.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Collisions.ISpaceAlgorithm.Insert(MonoGame.Extended.Collisions.ICollisionActor)">
            <summary>
            Inserts the actor into the space.
            The actor will have its OnCollision called when collisions occur.
            </summary>
            <param name="actor">Actor to insert.</param>
        </member>
        <member name="M:MonoGame.Extended.Collisions.ISpaceAlgorithm.Remove(MonoGame.Extended.Collisions.ICollisionActor)">
            <summary>
            Removes the actor into the space.
            </summary>
            <param name="actor">Actor to remove.</param>
        </member>
        <member name="M:MonoGame.Extended.Collisions.ISpaceAlgorithm.Query(MonoGame.Extended.RectangleF)">
            <summary>
            Removes the actor into the space.
            The actor will have its OnCollision called when collisions occur.
            </summary>
            <param name="actor">Actor to remove.</param>
        </member>
        <member name="M:MonoGame.Extended.Collisions.ISpaceAlgorithm.GetEnumerator">
            <summary>
            for foreach
            </summary>
            <returns></returns>
        </member>
        <member name="M:MonoGame.Extended.Collisions.ISpaceAlgorithm.Reset">
            <summary>
            Restructure the space with new positions.
            </summary>
        </member>
        <member name="T:MonoGame.Extended.Collisions.Layers.Layer">
            <summary>
            Layer is a group of collision's actors.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Collisions.Layers.Layer.IsDynamic">
            <summary>
            If this property equals true, layer always will reset collision space.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.Collisions.Layers.Layer.Space">
            <summary>
            The space, which contain actors.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Collisions.Layers.Layer.#ctor(MonoGame.Extended.Collisions.ISpaceAlgorithm)">
            <summary>
            Constructor for layer
            </summary>
            <param name="spaceAlgorithm">A space algorithm for actors</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="spaceAlgorithm"/> is null</exception>
        </member>
        <member name="M:MonoGame.Extended.Collisions.Layers.Layer.Reset">
            <summary>
            Restructure a inner collection, if layer is dynamic, because actors can change own position
            </summary>
        </member>
        <member name="T:MonoGame.Extended.Collisions.Layers.UndefinedLayerException">
            <summary>
            Thrown when the collision system has no layer defined with the specified name
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Collisions.Layers.UndefinedLayerException.#ctor(System.String)">
            <summary>
            Thrown when the collision system has no layer defined with the specified name
            </summary>
            <param name="layerName">The undefined layer name</param>
        </member>
        <member name="T:MonoGame.Extended.Collisions.QuadTree.QuadTree">
            <summary>
            Class for doing collision handling with a quad tree.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.Collisions.QuadTree.QuadTree.DefaultMaxDepth">
            <summary>
            The default maximum depth.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.Collisions.QuadTree.QuadTree.DefaultMaxObjectsPerNode">
            <summary>
            The default maximum objects per node.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.Collisions.QuadTree.QuadTree.Children">
            <summary>
            Contains the children of this node.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.Collisions.QuadTree.QuadTree.Contents">
            <summary>
            Contains the data for this node in the quadtree.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Collisions.QuadTree.QuadTree.#ctor(MonoGame.Extended.RectangleF)">
            <summary>
            Creates a quad tree with the given bounds.
            </summary>
            <param name="bounds">The bounds of the new quad tree.</param>
        </member>
        <member name="P:MonoGame.Extended.Collisions.QuadTree.QuadTree.CurrentDepth">
            <summary>
            Gets or sets the current depth for this node in the quadtree.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Collisions.QuadTree.QuadTree.MaxDepth">
            <summary>
            Gets or sets the maximum depth of the quadtree.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Collisions.QuadTree.QuadTree.MaxObjectsPerNode">
            <summary>
            Gets or sets the maximum objects per node in this quadtree.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Collisions.QuadTree.QuadTree.NodeBounds">
            <summary>
            Gets the bounds of the area contained in this quad tree.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Collisions.QuadTree.QuadTree.IsLeaf">
            <summary>
            Gets whether the current node is a leaf node.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Collisions.QuadTree.QuadTree.NumTargets">
            <summary>
            Counts the number of unique targets in the current Quadtree.
            </summary>
            <returns>Returns the targets of objects found.</returns>
        </member>
        <member name="M:MonoGame.Extended.Collisions.QuadTree.QuadTree.Insert(MonoGame.Extended.Collisions.QuadTree.QuadtreeData)">
            <summary>
            Inserts the data into the tree.
            </summary>
            <param name="data">Data being inserted.</param>
        </member>
        <member name="M:MonoGame.Extended.Collisions.QuadTree.QuadTree.Remove(MonoGame.Extended.Collisions.QuadTree.QuadtreeData)">
            <summary>
            Removes data from the Quadtree
            </summary>
            <param name="data">The data to be removed.</param>
        </member>
        <member name="M:MonoGame.Extended.Collisions.QuadTree.QuadTree.Shake">
            <summary>
            Removes unnecessary leaf nodes and simplifies the quad tree.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Collisions.QuadTree.QuadTree.Split">
            <summary>
            Splits a quadtree into quadrants.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Collisions.QuadTree.QuadTree.ClearAll">
            <summary>
            Clear current node and all children
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Collisions.QuadTree.QuadTree.Query(MonoGame.Extended.RectangleF@)">
            <summary>
            Queries the quadtree for targets that intersect with the given area.
            </summary>
            <param name="area">The area to query for overlapping targets</param>
            <returns>A unique list of targets intersected by area.</returns>
        </member>
        <member name="T:MonoGame.Extended.Collisions.QuadTree.QuadtreeData">
            <summary>
            Data structure for the quad tree.
            Holds the entity and collision data for it.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Collisions.QuadTree.QuadtreeData.#ctor(MonoGame.Extended.Collisions.ICollisionActor)">
            <summary>
            Initialize a new instance of QuadTreeData.
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:MonoGame.Extended.Collisions.QuadTree.QuadtreeData.RemoveParent(MonoGame.Extended.Collisions.QuadTree.QuadTree)">
            <summary>
            Remove a parent node.
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:MonoGame.Extended.Collisions.QuadTree.QuadtreeData.AddParent(MonoGame.Extended.Collisions.QuadTree.QuadTree)">
            <summary>
            Add a parent node.
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:MonoGame.Extended.Collisions.QuadTree.QuadtreeData.RemoveFromAllParents">
            <summary>
            Remove all parent nodes from this node.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Collisions.QuadTree.QuadtreeData.Bounds">
            <summary>
            Gets the bounding box for collision detection.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Collisions.QuadTree.QuadtreeData.Target">
            <summary>
            Gets the collision actor target.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Collisions.QuadTree.QuadtreeData.Dirty">
            <summary>
            Gets or sets whether Target has had its collision handled this
            iteration.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Collisions.QuadTree.QuadtreeData.MarkDirty">
            <summary>
            Mark node as dirty.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Collisions.QuadTree.QuadtreeData.MarkClean">
            <summary>
            Mark node as clean, i.e. not dirty.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Collisions.QuadTree.QuadTreeSpace.Insert(MonoGame.Extended.Collisions.ICollisionActor)">
            <summary>
            Inserts the target into the collision tree.
            The target will have its OnCollision called when collisions occur.
            </summary>
            <param name="target">Target to insert.</param>
        </member>
        <member name="M:MonoGame.Extended.Collisions.QuadTree.QuadTreeSpace.Remove(MonoGame.Extended.Collisions.ICollisionActor)">
            <summary>
            Removes the target from the collision tree.
            </summary>
            <param name="target">Target to remove.</param>
        </member>
        <member name="M:MonoGame.Extended.Collisions.QuadTree.QuadTreeSpace.Reset">
            <summary>
            Restructure a inner collection, if layer is dynamic, because actors can change own position
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Collisions.QuadTree.QuadTreeSpace.GetEnumerator">
            <summary>
            foreach support
            </summary>
            <returns></returns>
        </member>
        <member name="M:MonoGame.Extended.Collisions.QuadTree.QuadTreeSpace.Query(MonoGame.Extended.RectangleF)">
            <inheritdoc cref="M:MonoGame.Extended.Collisions.QuadTree.QuadTree.Query(MonoGame.Extended.RectangleF@)"/>
        </member>
        <member name="T:MonoGame.Extended.ColorExtensions">
            <summary>
            Provides additional methods for working with color
            </summary>
        </member>
        <member name="M:MonoGame.Extended.ColorExtensions.ToHex(Microsoft.Xna.Framework.Color)">
            <summary>
            Converts a <see cref="T:Microsoft.Xna.Framework.Color"/> to its hexadecimal string representation in RGBA format.
            </summary>
            <param name="color">The <see cref="T:Microsoft.Xna.Framework.Color"/> to convert.</param>
            <returns>A hexadecimal string representation of the color in the format #RRGGBBAA.</returns>
        </member>
        <member name="M:MonoGame.Extended.ColorExtensions.FromAbgr(System.UInt32)">
            <summary>
            Returns a new <see cref="T:Microsoft.Xna.Framework.Color"/> value based on a packed value in the ABGR format.
            </summary>
            <remarks>
            This is useful for when you have HTML hex style values such as #123456 and want to use it in hex format for
            the parameter.  Since Color's standard format is RGBA, you would have to do new Color(0xFF563212) since R
            is the LSB.  With this method, you can write it the same way it is written in HTML hex by doing
            <c>>ColorExtensions.FromAbgr(0x123456FF);</c>
            </remarks>
            <param name="abgr">The packed color value in ABGR format</param>
            <returns>The <see cref="T:Microsoft.Xna.Framework.Color"/> value created</returns>
        </member>
        <member name="T:MonoGame.Extended.ColorHelper">
            <summary>
            Provides utility methods for working with <see cref="T:Microsoft.Xna.Framework.Color"/> values.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.ColorHelper.FromHex(System.String)">
            <summary>
            Converts a hexadecimal color string to a <see cref="T:Microsoft.Xna.Framework.Color"/> value.
            </summary>
            <param name="value">
            The hexadecimal color string to convert. Supports multiple formats:
            <list type="bullet">
                <item>3 characters: RGB shorthand (e.g., "F0A" becomes "FF00AA")</item>
                <item>4 characters: RGBA shorthand (e.g., "F0A8" becomes "FF00AA88")</item>
                <item>6 characters: Full RGB format (e.g., "FF00AA")</item>
                <item>8 characters: Full RGBA format (e.g., "FF00AA88")</item>
            </list>
            Optional '#' prefix is automatically handled and removed.
            </param>
            <returns>
            A <see cref="T:Microsoft.Xna.Framework.Color"/> value representing the parsed hexadecimal color, or <see cref="P:Microsoft.Xna.Framework.Color.Transparent"/>
            if the input is <see langword="null"/> or an empty string.
            </returns>
            <exception cref="T:System.ArgumentException">
            The length of <paramref name="value"/> is not 3, 4, 6, or 8 (excluding a '#' prefix)
            </exception>
            <exception cref="T:System.FormatException">
            <paramref name="value"/> contains invalid hexadecimal characters.
            </exception>
            <exception cref="T:System.OverflowException">
            <paramref name="value"/> represents a value too large for a 32-bit unsigned integer.
            </exception>
        </member>
        <member name="M:MonoGame.Extended.ColorHelper.FromHex(System.ReadOnlySpan{System.Char})">
            <summary>
            Converts a hexadecimal color span to a <see cref="T:Microsoft.Xna.Framework.Color"/> value.
            </summary>
            <remarks>
            This overload provides better performance than the string version by avoiding string allocations
            when removing the '#' prefix and during parsing operations. Particularly beneficial when 
            processing large numbers of hex colors or when called frequently.
            </remarks>
            <param name="value">
            A read-only span of characters representing the hexadecimal color. Supports multiple formats:
            <list type="bullet">
                <item>3 characters: RGB shorthand (e.g., "F0A" becomes "FF00AA")</item>
                <item>4 characters: RGBA shorthand (e.g., "F0A8" becomes "FF00AA88")</item>
                <item>6 characters: Full RGB format (e.g., "FF00AA")</item>
                <item>8 characters: Full RGBA format (e.g., "FF00AA88")</item>
            </list>
            Optional '#' prefix is automatically handled and removed.
            </param>
            <returns>
            A <see cref="T:Microsoft.Xna.Framework.Color"/> value representing the parsed hexadecimal color, or <see cref="P:Microsoft.Xna.Framework.Color.Transparent"/>
            if the input is is empty.
            </returns>
            <exception cref="T:System.ArgumentException">
            The length of <paramref name="value"/> is not 3, 4, 6, or 8 (excluding a '#' prefix)
            </exception>
            <exception cref="T:System.FormatException">
            <paramref name="value"/> contains invalid hexadecimal characters.
            </exception>
            <exception cref="T:System.OverflowException">
            <paramref name="value"/> represents a value too large for a 32-bit unsigned integer.
            </exception>
        </member>
        <member name="M:MonoGame.Extended.ColorHelper.FromName(System.String)">
            <summary>
            Creates a <see cref="T:Microsoft.Xna.Framework.Color"/> value from the specified name of a predefined color.
            Gets a <see cref="T:Microsoft.Xna.Framework.Color"/> value from a p
            </summary>
            <param name="name">The name of the predefined color.</param>
            <returns>
            The <see cref="T:Microsoft.Xna.Framework.Color"/> value this method creates.
            </returns>
            <exception cref="T:System.InvalidOperationException"><paramref name="name"/> is not a valid color.</exception>
        </member>
        <member name="M:MonoGame.Extended.ColorHelper.FromAbgr(System.UInt32)">
            <summary>
            Returns a new <see cref="T:Microsoft.Xna.Framework.Color"/> value based on a packed value in the ABGR format.
            </summary>
            <remarks>
            This is useful for when you have HTML hex style values such as #123456 and want to use it in hex format for
            the parameter.  Since Color's standard format is RGBA, you would have to do new Color(0xFF563212) since R
            is the LSB.  With this method, you can write it the same way it is written in HTML hex by doing
            <c>ColorHelper.FromAbgr(0x123456FF);</c>
            </remarks>
            <param name="abgr">The packed color value in ABGR format</param>
            <returns>The <see cref="T:Microsoft.Xna.Framework.Color"/> value created</returns>
        </member>
        <member name="T:MonoGame.Extended.Content.BitmapFonts.BitmapFontFileReader">
            <summary>
            A utility class for reading the contents of a font file in the AngleCode BMFont file spec.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Content.BitmapFonts.BitmapFontFileReader.Read(System.String)">
            <summary>
            Reads the content of the font file at the path specified.
            </summary>
            <param name="path">The path to the font file to read.</param>
            <returns>A <see cref="T:MonoGame.Extended.Content.BitmapFonts.BitmapFontFileContent"/> instance containing the results of the read operation.</returns>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the header for the file contents does not match a known header format.
            </exception>
        </member>
        <member name="M:MonoGame.Extended.Content.BitmapFonts.BitmapFontFileReader.Read(System.IO.FileStream)">
            <summary>
            Reads the content of the font file at the path specified.
            </summary>
            <param name="stream">A <see cref="T:System.IO.Stream"/> containing the font file contents to read.</param>
            <returns>A <see cref="T:MonoGame.Extended.Content.BitmapFonts.BitmapFontFileContent"/> instance containing the results of the read operation.</returns>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the header for the file contents does not match a known header format.
            </exception>
        </member>
        <member name="M:MonoGame.Extended.Content.BitmapFonts.BitmapFontFileReader.Read(System.IO.Stream,System.String)">
            <summary>
            Reads the content of the font file at the path specified.
            </summary>
            <param name="stream">A <see cref="T:System.IO.Stream"/> containing the font file contents to read.</param>
            <param name="name">The name or path that uniquely identifies this <see cref="T:MonoGame.Extended.Content.BitmapFonts.BitmapFontFileContent"/>.</param>
            <returns>A <see cref="T:MonoGame.Extended.Content.BitmapFonts.BitmapFontFileContent"/> instance containing the results of the read operation.</returns>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the header for the file contents does not match a known header format.
            </exception>
        </member>
        <member name="M:MonoGame.Extended.Content.ContentManagerExtensions.Load``1(Microsoft.Xna.Framework.Content.ContentManager,System.String,MonoGame.Extended.Content.IContentLoader)">
            <summary>
            Loads the content using a custom content loader.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Content.ContentManagerExtensions.Load``1(Microsoft.Xna.Framework.Content.ContentManager,System.String,MonoGame.Extended.Content.IContentLoader{``0})">
            <summary>
            Loads the content using a custom content loader.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Content.ExtendedContentManager.LoadTexture2D(System.String)">
            <summary>
            Loads a <see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D"/> asset.
            </summary>
            <remarks>
            If the <paramref name="path"/> parameter is a relative path, it must be relative to the
            <see cref="P:Microsoft.Xna.Framework.Content.ContentManager.RootDirectory"/> path.
            </remarks>
            <param name="path">The path to the asset to load</param>
            <returns>The <see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D"/> loaded.</returns>
        </member>
        <member name="M:MonoGame.Extended.Content.ExtendedContentManager.LoadTexture2D(System.String,System.Boolean)">
            <summary>
            Loads a <see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D"/> asset.
            </summary>
            <remarks>
            If the <paramref name="path"/> parameter is a relative path, it must be relative to the
            <see cref="P:Microsoft.Xna.Framework.Content.ContentManager.RootDirectory"/> path.
            </remarks>
            <param name="path">The path to the asset to load</param>
            <param name="premultiplyAlpha">
            Specifies whether the color data of the texture should be premultiplied by its alpha value.
            </param>
            <returns></returns>
        </member>
        <member name="M:MonoGame.Extended.Content.ExtendedContentManager.LoadSoundEffect(System.String)">
            <summary>
            Loads a <see cref="T:Microsoft.Xna.Framework.Audio.SoundEffect"/> asset.
            </summary>
            <remarks>
            If the <paramref name="path"/> parameter is a relative path, it must be relative to the
            <see cref="P:Microsoft.Xna.Framework.Content.ContentManager.RootDirectory"/> path.
            </remarks>
            <param name="path">The path to the asset to load</param>
            <returns>The <see cref="T:Microsoft.Xna.Framework.Audio.SoundEffect"/> loaded.</returns>
        </member>
        <member name="M:MonoGame.Extended.Content.ExtendedContentManager.LoadBitmapFont(System.String)">
            <summary>
            Loads a <see cref="T:MonoGame.Extended.BitmapFonts.BitmapFont"/> asset.
            </summary>
            <remarks>
            If the <paramref name="path"/> parameter is a relative path, it must be relative to the
            <see cref="P:Microsoft.Xna.Framework.Content.ContentManager.RootDirectory"/> path.
            </remarks>
            <param name="path">The path to the asset to load.</param>
            <returns>The <see cref="T:MonoGame.Extended.BitmapFonts.BitmapFont"/> loaded.</returns>
        </member>
        <member name="M:MonoGame.Extended.Content.ExtendedContentManager.LoadTexturePacker(System.String,System.Boolean)">
            <returns>The <see cref="T:MonoGame.Extended.Graphics.Texture2DAtlas"/> created from the TexturePacker JSON file content.</returns>
        </member>
        <member name="P:MonoGame.Extended.FramesPerSecondCounter.Enabled">
            <inheritdoc />
        </member>
        <member name="P:MonoGame.Extended.FramesPerSecondCounter.UpdateOrder">
            <inheritdoc />
        </member>
        <member name="E:MonoGame.Extended.FramesPerSecondCounter.EnabledChanged">
            <inheritdoc />
        </member>
        <member name="E:MonoGame.Extended.FramesPerSecondCounter.UpdateOrderChanged">
            <inheritdoc />
        </member>
        <member name="T:MonoGame.Extended.Graphics.AnimatedSprite">
            <summary>
            Represents an animated sprite that can play, pause, and update animations.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Graphics.AnimatedSprite.Controller">
            <summary>
            Gets the animation controller used to control the current animation of this animated sprite.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Graphics.AnimatedSprite.CurrentAnimation">
            <summary>
            Gets the name of the current animation playing.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Graphics.AnimatedSprite.#ctor(MonoGame.Extended.Graphics.SpriteSheet)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoGame.Extended.Graphics.AnimatedSprite"/> class with the specified
            <see cref="T:MonoGame.Extended.Graphics.SpriteSheet"/>.
            </summary>
            <param name="spriteSheet">The <see cref="T:MonoGame.Extended.Graphics.SpriteSheet"/> that contains the animations.</param>
        </member>
        <member name="M:MonoGame.Extended.Graphics.AnimatedSprite.#ctor(MonoGame.Extended.Graphics.SpriteSheet,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoGame.Extended.Graphics.AnimatedSprite"/> class with the specified
            <see cref="T:MonoGame.Extended.Graphics.SpriteSheet"/>.
            </summary>
            <param name="spriteSheet">The <see cref="T:MonoGame.Extended.Graphics.SpriteSheet"/> that contains the animations.</param>
            <param name="initialAnimation">The initial animation to play</param>
        </member>
        <member name="M:MonoGame.Extended.Graphics.AnimatedSprite.SetAnimation(System.String)">
            <summary>
            Sets the animation to use for this animated sprite.
            </summary>
            <param name="name">The name of the animation.</param>
            <returns>The <see cref="T:MonoGame.Extended.Animations.IAnimationController"/> of the animation.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            Thrown if the source spritesheet does not contain an animation a name that matches the <paramref name="name"/> parameter.
            </exception>
        </member>
        <member name="M:MonoGame.Extended.Graphics.AnimatedSprite.Update(Microsoft.Xna.Framework.GameTime)">
            <inheritdoc />
        </member>
        <member name="T:MonoGame.Extended.Graphics.Batcher`1">
            <summary>
                Minimizes draw calls to a <see cref="P:MonoGame.Extended.Graphics.Batcher`1.GraphicsDevice" /> by sorting them and attempting to merge them together
                before submitting them.
            </summary>
            <typeparam name="TDrawCallInfo">The type of the information for a draw call.</typeparam>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="F:MonoGame.Extended.Graphics.Batcher`1.DrawCalls">
            <summary>
                The array of <see cref="!:TDrawCallInfo" /> structs currently enqueued.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.Graphics.Batcher`1.EnqueuedDrawCallCount">
            <summary>
                The number of <see cref="!:TDrawCallInfo" /> structs currently enqueued.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Graphics.Batcher`1.GraphicsDevice">
            <summary>
                Gets the <see cref="P:MonoGame.Extended.Graphics.Batcher`1.GraphicsDevice" /> associated with this <see cref="T:MonoGame.Extended.Graphics.Batcher`1" />.
            </summary>
            <value>
                The <see cref="P:MonoGame.Extended.Graphics.Batcher`1.GraphicsDevice" /> associated with this <see cref="T:MonoGame.Extended.Graphics.Batcher`1" />.
            </value>
        </member>
        <member name="P:MonoGame.Extended.Graphics.Batcher`1.HasBegun">
            <summary>
                Gets a value indicating whether batching is currently in progress by being within a <see cref="M:MonoGame.Extended.Graphics.Batcher`1.Begin(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Graphics.BlendState,Microsoft.Xna.Framework.Graphics.SamplerState,Microsoft.Xna.Framework.Graphics.DepthStencilState,Microsoft.Xna.Framework.Graphics.RasterizerState,Microsoft.Xna.Framework.Graphics.Effect)" /> and
                <see cref="M:MonoGame.Extended.Graphics.Batcher`1.End" /> pair block of code.
            </summary>
            <value>
                <c>true</c> if batching has begun; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:MonoGame.Extended.Graphics.Batcher`1.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Graphics.Effect,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:MonoGame.Extended.Graphics.Batcher`1" /> class.
            </summary>
            <param name="graphicsDevice">The graphics device.</param>
            <param name="defaultEffect">The default effect.</param>
            <param name="maximumDrawCallsCount">
                The maximum number of <see cref="!:TDrawCallInfo" /> structs that can be enqueued before a
                <see cref="M:MonoGame.Extended.Graphics.Batcher`1.Flush" />
                is required. The default value is <code>2048</code>.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="graphicsDevice" /> is
                null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="maximumDrawCallsCount" /> is less than or equal
                <code>0</code>.
            </exception>
        </member>
        <member name="M:MonoGame.Extended.Graphics.Batcher`1.Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Graphics.Batcher`1.Dispose(System.Boolean)">
            <summary>
                Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="diposing">
                <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only
                unmanaged resources.
            </param>
        </member>
        <member name="M:MonoGame.Extended.Graphics.Batcher`1.Begin(System.Nullable{Microsoft.Xna.Framework.Matrix},System.Nullable{Microsoft.Xna.Framework.Matrix},Microsoft.Xna.Framework.Graphics.BlendState,Microsoft.Xna.Framework.Graphics.SamplerState,Microsoft.Xna.Framework.Graphics.DepthStencilState,Microsoft.Xna.Framework.Graphics.RasterizerState,Microsoft.Xna.Framework.Graphics.Effect)">
            <summary>
                Begins the batch operation using an optional <see cref="T:Microsoft.Xna.Framework.Graphics.BlendState" />, <see cref="T:Microsoft.Xna.Framework.Graphics.SamplerState" />,
                <see cref="T:Microsoft.Xna.Framework.Graphics.DepthStencilState" />, <see cref="T:Microsoft.Xna.Framework.Graphics.RasterizerState" />, <see cref="T:Microsoft.Xna.Framework.Graphics.Effect" />, world-to-view
                <see cref="T:Microsoft.Xna.Framework.Matrix" />, or view-to-projection <see cref="T:Microsoft.Xna.Framework.Matrix" />.
            </summary>
            <remarks>
                <para>
                    The default objects for <paramref name="blendState" />, <paramref name="samplerState" />,
                    <paramref name="depthStencilState" />, and <paramref name="rasterizerState" /> are
                    <see cref="F:Microsoft.Xna.Framework.Graphics.BlendState.AlphaBlend" />, <see cref="F:Microsoft.Xna.Framework.Graphics.SamplerState.LinearClamp" />,
                    <see cref="F:Microsoft.Xna.Framework.Graphics.DepthStencilState.None" /> and <see cref="F:Microsoft.Xna.Framework.Graphics.RasterizerState.CullCounterClockwise" /> respectively.
                    Passing
                    <code>null</code> for any of the previously mentioned parameters result in using their default object.
                </para>
            </remarks>
            <param name="blendState">The <see cref="T:Microsoft.Xna.Framework.Graphics.BlendState" /> to use for the <see cref="M:MonoGame.Extended.Graphics.Batcher`1.Begin(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Graphics.BlendState,Microsoft.Xna.Framework.Graphics.SamplerState,Microsoft.Xna.Framework.Graphics.DepthStencilState,Microsoft.Xna.Framework.Graphics.RasterizerState,Microsoft.Xna.Framework.Graphics.Effect)" />, <see cref="M:MonoGame.Extended.Graphics.Batcher`1.End" /> pair.</param>
            <param name="samplerState">
                The texture <see cref="T:Microsoft.Xna.Framework.Graphics.SamplerState" /> to use for the <see cref="M:MonoGame.Extended.Graphics.Batcher`1.Begin(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Graphics.BlendState,Microsoft.Xna.Framework.Graphics.SamplerState,Microsoft.Xna.Framework.Graphics.DepthStencilState,Microsoft.Xna.Framework.Graphics.RasterizerState,Microsoft.Xna.Framework.Graphics.Effect)" /> and
                <see cref="M:MonoGame.Extended.Graphics.Batcher`1.End" /> pair.
            </param>
            <param name="depthStencilState">
                The <see cref="T:Microsoft.Xna.Framework.Graphics.DepthStencilState" /> to use for the <see cref="M:MonoGame.Extended.Graphics.Batcher`1.Begin(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Graphics.BlendState,Microsoft.Xna.Framework.Graphics.SamplerState,Microsoft.Xna.Framework.Graphics.DepthStencilState,Microsoft.Xna.Framework.Graphics.RasterizerState,Microsoft.Xna.Framework.Graphics.Effect)" /> and
                <see cref="M:MonoGame.Extended.Graphics.Batcher`1.End" /> pair.
            </param>
            <param name="rasterizerState">
                The <see cref="T:Microsoft.Xna.Framework.Graphics.RasterizerState" /> to use for the <see cref="M:MonoGame.Extended.Graphics.Batcher`1.Begin(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Graphics.BlendState,Microsoft.Xna.Framework.Graphics.SamplerState,Microsoft.Xna.Framework.Graphics.DepthStencilState,Microsoft.Xna.Framework.Graphics.RasterizerState,Microsoft.Xna.Framework.Graphics.Effect)" /> and
                <see cref="M:MonoGame.Extended.Graphics.Batcher`1.End" /> pair.
            </param>
            <param name="effect">The <see cref="T:Microsoft.Xna.Framework.Graphics.Effect" /> to use for the <see cref="M:MonoGame.Extended.Graphics.Batcher`1.Begin(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Graphics.BlendState,Microsoft.Xna.Framework.Graphics.SamplerState,Microsoft.Xna.Framework.Graphics.DepthStencilState,Microsoft.Xna.Framework.Graphics.RasterizerState,Microsoft.Xna.Framework.Graphics.Effect)" /> and <see cref="M:MonoGame.Extended.Graphics.Batcher`1.End" /> pair.</param>
            <param name="viewMatrix">
                The world-to-view transformation matrix to use for the <see cref="M:MonoGame.Extended.Graphics.Batcher`1.Begin(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Graphics.BlendState,Microsoft.Xna.Framework.Graphics.SamplerState,Microsoft.Xna.Framework.Graphics.DepthStencilState,Microsoft.Xna.Framework.Graphics.RasterizerState,Microsoft.Xna.Framework.Graphics.Effect)" /> and
                <see cref="M:MonoGame.Extended.Graphics.Batcher`1.End" /> pair.
            </param>
            <param name="projectionMatrix">
                The view-to-projection transformation matrix to use for the <see cref="M:MonoGame.Extended.Graphics.Batcher`1.Begin(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Graphics.BlendState,Microsoft.Xna.Framework.Graphics.SamplerState,Microsoft.Xna.Framework.Graphics.DepthStencilState,Microsoft.Xna.Framework.Graphics.RasterizerState,Microsoft.Xna.Framework.Graphics.Effect)" /> and
                <see cref="M:MonoGame.Extended.Graphics.Batcher`1.End" /> pair.
            </param>
            <exception cref="T:System.InvalidOperationException">
                <see cref="M:MonoGame.Extended.Graphics.Batcher`1.Begin(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Graphics.BlendState,Microsoft.Xna.Framework.Graphics.SamplerState,Microsoft.Xna.Framework.Graphics.DepthStencilState,Microsoft.Xna.Framework.Graphics.RasterizerState,Microsoft.Xna.Framework.Graphics.Effect)" /> cannot be invoked again until <see cref="M:MonoGame.Extended.Graphics.Batcher`1.End" /> has been invoked.
            </exception>
            <remarks>
                <para>
                    This method must be called before any enqueuing of draw calls. When all the geometry have been enqueued for
                    drawing, call <see cref="M:MonoGame.Extended.Graphics.Batcher`1.End" />.
                </para>
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Graphics.Batcher`1.Begin(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Graphics.BlendState,Microsoft.Xna.Framework.Graphics.SamplerState,Microsoft.Xna.Framework.Graphics.DepthStencilState,Microsoft.Xna.Framework.Graphics.RasterizerState,Microsoft.Xna.Framework.Graphics.Effect)">
            <summary>
                Begins the batch operation using an optional <see cref="T:Microsoft.Xna.Framework.Graphics.BlendState" />, <see cref="T:Microsoft.Xna.Framework.Graphics.SamplerState" />,
                <see cref="T:Microsoft.Xna.Framework.Graphics.DepthStencilState" />, <see cref="T:Microsoft.Xna.Framework.Graphics.RasterizerState" />, <see cref="T:Microsoft.Xna.Framework.Graphics.Effect" />, world-to-view
                <see cref="T:Microsoft.Xna.Framework.Matrix" />, or view-to-projection <see cref="T:Microsoft.Xna.Framework.Matrix" />.
            </summary>
            <remarks>
                <para>
                    The default objects for <paramref name="blendState" />, <paramref name="samplerState" />,
                    <paramref name="depthStencilState" />, and <paramref name="rasterizerState" /> are
                    <see cref="F:Microsoft.Xna.Framework.Graphics.BlendState.AlphaBlend" />, <see cref="F:Microsoft.Xna.Framework.Graphics.SamplerState.LinearClamp" />,
                    <see cref="F:Microsoft.Xna.Framework.Graphics.DepthStencilState.None" /> and <see cref="F:Microsoft.Xna.Framework.Graphics.RasterizerState.CullCounterClockwise" /> respectively.
                    Passing
                    <code>null</code> for any of the previously mentioned parameters result in using their default object.
                </para>
            </remarks>
            <param name="blendState">The <see cref="T:Microsoft.Xna.Framework.Graphics.BlendState" /> to use for the <see cref="M:MonoGame.Extended.Graphics.Batcher`1.Begin(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Graphics.BlendState,Microsoft.Xna.Framework.Graphics.SamplerState,Microsoft.Xna.Framework.Graphics.DepthStencilState,Microsoft.Xna.Framework.Graphics.RasterizerState,Microsoft.Xna.Framework.Graphics.Effect)" />, <see cref="M:MonoGame.Extended.Graphics.Batcher`1.End" /> pair.</param>
            <param name="samplerState">
                The texture <see cref="T:Microsoft.Xna.Framework.Graphics.SamplerState" /> to use for the <see cref="M:MonoGame.Extended.Graphics.Batcher`1.Begin(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Graphics.BlendState,Microsoft.Xna.Framework.Graphics.SamplerState,Microsoft.Xna.Framework.Graphics.DepthStencilState,Microsoft.Xna.Framework.Graphics.RasterizerState,Microsoft.Xna.Framework.Graphics.Effect)" /> and
                <see cref="M:MonoGame.Extended.Graphics.Batcher`1.End" /> pair.
            </param>
            <param name="depthStencilState">
                The <see cref="T:Microsoft.Xna.Framework.Graphics.DepthStencilState" /> to use for the <see cref="M:MonoGame.Extended.Graphics.Batcher`1.Begin(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Graphics.BlendState,Microsoft.Xna.Framework.Graphics.SamplerState,Microsoft.Xna.Framework.Graphics.DepthStencilState,Microsoft.Xna.Framework.Graphics.RasterizerState,Microsoft.Xna.Framework.Graphics.Effect)" /> and
                <see cref="M:MonoGame.Extended.Graphics.Batcher`1.End" /> pair.
            </param>
            <param name="rasterizerState">
                The <see cref="T:Microsoft.Xna.Framework.Graphics.RasterizerState" /> to use for the <see cref="M:MonoGame.Extended.Graphics.Batcher`1.Begin(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Graphics.BlendState,Microsoft.Xna.Framework.Graphics.SamplerState,Microsoft.Xna.Framework.Graphics.DepthStencilState,Microsoft.Xna.Framework.Graphics.RasterizerState,Microsoft.Xna.Framework.Graphics.Effect)" /> and
                <see cref="M:MonoGame.Extended.Graphics.Batcher`1.End" /> pair.
            </param>
            <param name="effect">The <see cref="T:Microsoft.Xna.Framework.Graphics.Effect" /> to use for the <see cref="M:MonoGame.Extended.Graphics.Batcher`1.Begin(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Graphics.BlendState,Microsoft.Xna.Framework.Graphics.SamplerState,Microsoft.Xna.Framework.Graphics.DepthStencilState,Microsoft.Xna.Framework.Graphics.RasterizerState,Microsoft.Xna.Framework.Graphics.Effect)" /> and <see cref="M:MonoGame.Extended.Graphics.Batcher`1.End" /> pair.</param>
            <param name="viewMatrix">
                The world-to-view transformation matrix to use for the <see cref="M:MonoGame.Extended.Graphics.Batcher`1.Begin(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Graphics.BlendState,Microsoft.Xna.Framework.Graphics.SamplerState,Microsoft.Xna.Framework.Graphics.DepthStencilState,Microsoft.Xna.Framework.Graphics.RasterizerState,Microsoft.Xna.Framework.Graphics.Effect)" /> and
                <see cref="M:MonoGame.Extended.Graphics.Batcher`1.End" /> pair.
            </param>
            <param name="projectionMatrix">
                The view-to-projection transformation matrix to use for the <see cref="M:MonoGame.Extended.Graphics.Batcher`1.Begin(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Graphics.BlendState,Microsoft.Xna.Framework.Graphics.SamplerState,Microsoft.Xna.Framework.Graphics.DepthStencilState,Microsoft.Xna.Framework.Graphics.RasterizerState,Microsoft.Xna.Framework.Graphics.Effect)" /> and
                <see cref="M:MonoGame.Extended.Graphics.Batcher`1.End" /> pair.
            </param>
            <exception cref="T:System.InvalidOperationException">
                <see cref="M:MonoGame.Extended.Graphics.Batcher`1.Begin(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Graphics.BlendState,Microsoft.Xna.Framework.Graphics.SamplerState,Microsoft.Xna.Framework.Graphics.DepthStencilState,Microsoft.Xna.Framework.Graphics.RasterizerState,Microsoft.Xna.Framework.Graphics.Effect)" /> cannot be invoked again until <see cref="M:MonoGame.Extended.Graphics.Batcher`1.End" /> has been invoked.
            </exception>
            <remarks>
                <para>
                    This method must be called before any enqueuing of draw calls. When all the geometry have been enqueued for
                    drawing, call <see cref="M:MonoGame.Extended.Graphics.Batcher`1.End" />.
                </para>
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Graphics.Batcher`1.End">
            <summary>
                Flushes the batched geometry to the <see cref="P:MonoGame.Extended.Graphics.Batcher`1.GraphicsDevice" /> and restores it's state to how it was before
                <see cref="M:MonoGame.Extended.Graphics.Batcher`1.Begin(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Graphics.BlendState,Microsoft.Xna.Framework.Graphics.SamplerState,Microsoft.Xna.Framework.Graphics.DepthStencilState,Microsoft.Xna.Framework.Graphics.RasterizerState,Microsoft.Xna.Framework.Graphics.Effect)" /> was called.
            </summary>
            <exception cref="T:System.InvalidOperationException">
                <see cref="M:MonoGame.Extended.Graphics.Batcher`1.End" /> cannot be invoked until <see cref="M:MonoGame.Extended.Graphics.Batcher`1.Begin(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Graphics.BlendState,Microsoft.Xna.Framework.Graphics.SamplerState,Microsoft.Xna.Framework.Graphics.DepthStencilState,Microsoft.Xna.Framework.Graphics.RasterizerState,Microsoft.Xna.Framework.Graphics.Effect)" /> has been invoked.
            </exception>
            <remarks>
                <para>
                    This method must be called after all enqueuing of draw calls.
                </para>
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Graphics.Batcher`1.Flush">
            <summary>
                Sorts then submits the (sorted) enqueued draw calls to the <see cref="P:MonoGame.Extended.Graphics.Batcher`1.GraphicsDevice" /> for
                rendering without ending the <see cref="M:MonoGame.Extended.Graphics.Batcher`1.Begin(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Graphics.BlendState,Microsoft.Xna.Framework.Graphics.SamplerState,Microsoft.Xna.Framework.Graphics.DepthStencilState,Microsoft.Xna.Framework.Graphics.RasterizerState,Microsoft.Xna.Framework.Graphics.Effect)" /> and <see cref="M:MonoGame.Extended.Graphics.Batcher`1.End" /> pair.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Graphics.Batcher`1.SortDrawCallsAndBindBuffers">
            <summary>
                Sorts the enqueued draw calls and binds any used <see cref="T:Microsoft.Xna.Framework.Graphics.VertexBuffer" /> or <see cref="T:Microsoft.Xna.Framework.Graphics.IndexBuffer" /> to the <see cref="P:MonoGame.Extended.Graphics.Batcher`1.GraphicsDevice" />.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Graphics.Batcher`1.Enqueue(`0@)">
            <summary>
                Enqueues draw call information.
            </summary>
            <param name="drawCall">The draw call information.</param>
            <remarks>
                <para>
                    If possible, the <paramref name="drawCall" /> is merged with the last enqueued draw call information instead of
                    being
                    enqueued.
                </para>
                <para>
                    If the enqueue buffer is full, a <see cref="M:MonoGame.Extended.Graphics.Batcher`1.Flush" /> is invoked and then afterwards
                    <paramref name="drawCall" /> is enqueued.
                </para>
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Graphics.Batcher`1.InvokeDrawCall(`0@)">
            <summary>
                Submits a draw operation to the <see cref="P:MonoGame.Extended.Graphics.Batcher`1.GraphicsDevice" /> using the specified <see cref="!:TDrawCallInfo"/>.
            </summary>
            <param name="drawCall">The draw call information.</param>
        </member>
        <member name="T:MonoGame.Extended.Graphics.Batcher2D">
            <summary>
                A general purpose <see cref="T:MonoGame.Extended.Graphics.Batcher`1" /> for two-dimensional geometry that change
                frequently between frames such as sprites and shapes.
            </summary>
            <seealso cref="T:System.IDisposable" />
            <remarks>
                <para>For drawing user interfaces, consider using <see cref="!:UIBatcher(ref Matrix, ref Matrix, BlendState, SamplerState, DepthStencilState, RasterizerState, Effect)" /> instead because it supports scissor rectangles.</para>
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Graphics.Batcher2D.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.UInt16,System.UInt16,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:MonoGame.Extended.Graphics.Batcher2D" /> class.
            </summary>
            <param name="graphicsDevice">The graphics device.</param>
            <param name="maximumVerticesCount">
                The maximum number of vertices that can be enqueued before a
                <see cref="M:MonoGame.Extended.Graphics.Batcher`1.Flush" /> is required. The default value is <code>8192</code>.
            </param>
            <param name="maximumIndicesCount">
                The maximum number of indices that can be enqueued before a
                <see cref="M:MonoGame.Extended.Graphics.Batcher`1.Flush" /> is required. The default value is <code>12288</code>.
            </param>
            <param name="maximumDrawCallsCount">
                The maximum number of <see cref="T:MonoGame.Extended.Graphics.Batcher2D.DrawCallInfo" /> structs that can be enqueued before a
                <see cref="M:MonoGame.Extended.Graphics.Batcher`1.Flush" /> is required. The default value is <code>2048</code>.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="graphicsDevice" />.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="maximumDrawCallsCount" /> is less than or equal
                <code>0</code>, or <paramref name="maximumVerticesCount" /> is less than or equal to <code>0</code>, or,
                <paramref name="maximumVerticesCount" /> is less than or equal to <code>0</code>.
            </exception>
        </member>
        <member name="M:MonoGame.Extended.Graphics.Batcher2D.InvokeDrawCall(MonoGame.Extended.Graphics.Batcher2D.DrawCallInfo@)">
            <summary>
                Submits a draw operation to the <see cref="T:Microsoft.Xna.Framework.Graphics.GraphicsDevice" /> using the specified <see cref="T:MonoGame.Extended.Graphics.Batcher2D.DrawCallInfo"/>.
            </summary>
            <param name="drawCall">The draw call information.</param>
        </member>
        <member name="M:MonoGame.Extended.Graphics.Batcher2D.DrawSprite(Microsoft.Xna.Framework.Graphics.Texture2D,MonoGame.Extended.Matrix3x2@,Microsoft.Xna.Framework.Rectangle@,System.Nullable{Microsoft.Xna.Framework.Color},MonoGame.Extended.Graphics.FlipFlags,System.Single)">
            <summary>
                Draws a sprite using a specified <see cref="T:Microsoft.Xna.Framework.Graphics.Texture" />, transform <see cref="T:MonoGame.Extended.Matrix3x2" />, source
                <see cref="T:Microsoft.Xna.Framework.Rectangle" />, and an optional
                <see cref="T:Microsoft.Xna.Framework.Color" />, origin <see cref="T:Microsoft.Xna.Framework.Vector2" />, <see cref="T:MonoGame.Extended.Graphics.FlipFlags" />, and depth <see cref="T:System.Single" />.
            </summary>
            <param name="texture">The <see cref="T:Microsoft.Xna.Framework.Graphics.Texture" />.</param>
            <param name="transformMatrix">The transform <see cref="T:MonoGame.Extended.Matrix3x2" />.</param>
            <param name="sourceRectangle">
                The texture region <see cref="T:Microsoft.Xna.Framework.Rectangle" /> of the <paramref name="texture" />. Use
                <code>null</code> to use the entire <see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D" />.
            </param>
            <param name="color">The <see cref="T:Microsoft.Xna.Framework.Color" />. Use <code>null</code> to use the default <see cref="P:Microsoft.Xna.Framework.Color.White" />.</param>
            <param name="flags">The <see cref="T:MonoGame.Extended.Graphics.FlipFlags" />. The default value is <see cref="F:MonoGame.Extended.Graphics.FlipFlags.None" />.</param>
            <param name="depth">The depth <see cref="T:System.Single" />. The default value is <code>0</code>.</param>
            <exception cref="T:System.InvalidOperationException">The <see cref="M:MonoGame.Extended.Graphics.Batcher`1.Begin(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Graphics.BlendState,Microsoft.Xna.Framework.Graphics.SamplerState,Microsoft.Xna.Framework.Graphics.DepthStencilState,Microsoft.Xna.Framework.Graphics.RasterizerState,Microsoft.Xna.Framework.Graphics.Effect)" /> method has not been called.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="texture" /> is null.</exception>
        </member>
        <member name="M:MonoGame.Extended.Graphics.Batcher2D.DrawTexture(Microsoft.Xna.Framework.Graphics.Texture2D,MonoGame.Extended.Matrix3x2@,System.Nullable{Microsoft.Xna.Framework.Color},MonoGame.Extended.Graphics.FlipFlags,System.Single)">
            <summary>
                Draws a <see cref="T:Microsoft.Xna.Framework.Graphics.Texture" /> using the specified transform <see cref="T:MonoGame.Extended.Matrix3x2" /> and an optional
                <see cref="T:Microsoft.Xna.Framework.Color" />, origin <see cref="T:Microsoft.Xna.Framework.Vector2" />, <see cref="T:MonoGame.Extended.Graphics.FlipFlags" />, and depth <see cref="T:System.Single" />.
            </summary>
            <param name="texture">The <see cref="T:Microsoft.Xna.Framework.Graphics.Texture" />.</param>
            <param name="transformMatrix">The transform <see cref="T:MonoGame.Extended.Matrix3x2" />.</param>
            <param name="color">The <see cref="T:Microsoft.Xna.Framework.Color" />. Use <code>null</code> to use the default <see cref="P:Microsoft.Xna.Framework.Color.White" />.</param>
            <param name="flags">The <see cref="T:MonoGame.Extended.Graphics.FlipFlags" />. The default value is <see cref="F:MonoGame.Extended.Graphics.FlipFlags.None" />.</param>
            <param name="depth">The depth <see cref="T:System.Single" />. The default value is <code>0</code>.</param>
            <exception cref="T:System.InvalidOperationException">The <see cref="M:MonoGame.Extended.Graphics.Batcher`1.Begin(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Graphics.BlendState,Microsoft.Xna.Framework.Graphics.SamplerState,Microsoft.Xna.Framework.Graphics.DepthStencilState,Microsoft.Xna.Framework.Graphics.RasterizerState,Microsoft.Xna.Framework.Graphics.Effect)" /> method has not been called.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="texture" /> is null.</exception>
        </member>
        <member name="M:MonoGame.Extended.Graphics.Batcher2D.DrawString(MonoGame.Extended.BitmapFonts.BitmapFont,System.Text.StringBuilder,MonoGame.Extended.Matrix3x2@,System.Nullable{Microsoft.Xna.Framework.Color},MonoGame.Extended.Graphics.FlipFlags,System.Single)">
            <summary>
                Draws unicode (UTF-16) characters as sprites using the specified <see cref="T:MonoGame.Extended.BitmapFonts.BitmapFont" />, text
                <see cref="T:System.Text.StringBuilder" />, transform <see cref="T:MonoGame.Extended.Matrix3x2" /> and optional <see cref="T:Microsoft.Xna.Framework.Color" />, origin
                <see cref="T:Microsoft.Xna.Framework.Vector2" />, <see cref="T:MonoGame.Extended.Graphics.FlipFlags" />, and depth <see cref="T:System.Single" />.
            </summary>
            <param name="bitmapFont">The <see cref="T:MonoGame.Extended.BitmapFonts.BitmapFont" />.</param>
            <param name="text">The text <see cref="T:System.Text.StringBuilder" />.</param>
            <param name="transformMatrix">The transform <see cref="T:MonoGame.Extended.Matrix3x2" />.</param>
            <param name="color">
                The <see cref="T:Microsoft.Xna.Framework.Color" />. Use <code>null</code> to use the default
                <see cref="P:Microsoft.Xna.Framework.Color.White" />.
            </param>
            <param name="flags">The <see cref="T:MonoGame.Extended.Graphics.FlipFlags" />. The default value is <see cref="F:MonoGame.Extended.Graphics.FlipFlags.None" />.</param>
            <param name="depth">The depth <see cref="T:System.Single" />. The default value is <code>0f</code>.</param>
            <exception cref="T:System.InvalidOperationException">The <see cref="M:MonoGame.Extended.Graphics.Batcher`1.Begin(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Graphics.BlendState,Microsoft.Xna.Framework.Graphics.SamplerState,Microsoft.Xna.Framework.Graphics.DepthStencilState,Microsoft.Xna.Framework.Graphics.RasterizerState,Microsoft.Xna.Framework.Graphics.Effect)" /> method has not been called.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="bitmapFont" /> is null or <paramref name="text" /> is null.</exception>
        </member>
        <member name="M:MonoGame.Extended.Graphics.Batcher2D.DrawString(MonoGame.Extended.BitmapFonts.BitmapFont,System.Text.StringBuilder,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Color},System.Single,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{Microsoft.Xna.Framework.Vector2},MonoGame.Extended.Graphics.FlipFlags,System.Single)">
            <summary>
                Draws unicode (UTF-16) characters as sprites using the specified <see cref="T:MonoGame.Extended.BitmapFonts.BitmapFont" />, text
                <see cref="T:System.Text.StringBuilder" />, position <see cref="T:Microsoft.Xna.Framework.Vector2" /> and optional <see cref="T:Microsoft.Xna.Framework.Color" />, rotation
                <see cref="T:System.Single" />, origin <see cref="T:Microsoft.Xna.Framework.Vector2" />, scale <see cref="T:Microsoft.Xna.Framework.Vector2" /> <see cref="T:MonoGame.Extended.Graphics.FlipFlags" />, and
                depth <see cref="T:System.Single" />.
            </summary>
            <param name="bitmapFont">The <see cref="T:MonoGame.Extended.BitmapFonts.BitmapFont" />.</param>
            <param name="text">The text <see cref="T:System.String" />.</param>
            <param name="position">The position <see cref="T:Microsoft.Xna.Framework.Vector2" />.</param>
            <param name="color">
                The <see cref="T:Microsoft.Xna.Framework.Color" />. Use <code>null</code> to use the default
                <see cref="P:Microsoft.Xna.Framework.Color.White" />.
            </param>
            <param name="rotation">
                The angle <see cref="T:System.Single" /> (in radians) to rotate each sprite about its <paramref name="origin" />. The default
                value is <code>0f</code>.
            </param>
            <param name="origin">
                The origin <see cref="T:Microsoft.Xna.Framework.Vector2" />. Use <code>null</code> to use the default
                <see cref="P:Microsoft.Xna.Framework.Vector2.Zero" />.
            </param>
            <param name="scale">
                The scale <see cref="T:Microsoft.Xna.Framework.Vector2" />. Use <code>null</code> to use the default
                <see cref="P:Microsoft.Xna.Framework.Vector2.One" />.
            </param>
            <param name="flags">The <see cref="T:MonoGame.Extended.Graphics.FlipFlags" />. The default value is <see cref="F:MonoGame.Extended.Graphics.FlipFlags.None" />.</param>
            <param name="depth">The depth <see cref="T:System.Single" />. The default value is <code>0f</code></param>
            <exception cref="T:System.InvalidOperationException">The <see cref="M:MonoGame.Extended.Graphics.Batcher`1.Begin(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Graphics.BlendState,Microsoft.Xna.Framework.Graphics.SamplerState,Microsoft.Xna.Framework.Graphics.DepthStencilState,Microsoft.Xna.Framework.Graphics.RasterizerState,Microsoft.Xna.Framework.Graphics.Effect)" /> method has not been called.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="bitmapFont" /> is null or <paramref name="text" /> is null.</exception>
        </member>
        <member name="M:MonoGame.Extended.Graphics.Batcher2D.DrawString(MonoGame.Extended.BitmapFonts.BitmapFont,System.String,MonoGame.Extended.Matrix3x2@,System.Nullable{Microsoft.Xna.Framework.Color},MonoGame.Extended.Graphics.FlipFlags,System.Single)">
            <summary>
                Draws unicode (UTF-16) characters as sprites using the specified <see cref="T:MonoGame.Extended.BitmapFonts.BitmapFont" />, text
                <see cref="T:System.String" />, transform <see cref="T:MonoGame.Extended.Matrix3x2" /> and optional <see cref="T:Microsoft.Xna.Framework.Color" />, origin
                <see cref="T:Microsoft.Xna.Framework.Vector2" />, <see cref="T:MonoGame.Extended.Graphics.FlipFlags" />, and depth <see cref="T:System.Single" />.
            </summary>
            <param name="bitmapFont">The <see cref="T:MonoGame.Extended.BitmapFonts.BitmapFont" />.</param>
            <param name="text">The text <see cref="T:System.String" />.</param>
            <param name="transformMatrix">The transform <see cref="T:MonoGame.Extended.Matrix3x2" />.</param>
            <param name="color">
                The <see cref="T:Microsoft.Xna.Framework.Color" />. Use <code>null</code> to use the default
                <see cref="P:Microsoft.Xna.Framework.Color.White" />.
            </param>
            <param name="flags">The <see cref="T:MonoGame.Extended.Graphics.FlipFlags" />. The default value is <see cref="F:MonoGame.Extended.Graphics.FlipFlags.None" />.</param>
            <param name="depth">The depth <see cref="T:System.Single" />. The default value is <code>0f</code></param>
            <exception cref="T:System.InvalidOperationException">The <see cref="M:MonoGame.Extended.Graphics.Batcher`1.Begin(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Graphics.BlendState,Microsoft.Xna.Framework.Graphics.SamplerState,Microsoft.Xna.Framework.Graphics.DepthStencilState,Microsoft.Xna.Framework.Graphics.RasterizerState,Microsoft.Xna.Framework.Graphics.Effect)" /> method has not been called.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="bitmapFont" /> is null or <paramref name="text" /> is null.</exception>
        </member>
        <member name="M:MonoGame.Extended.Graphics.Batcher2D.DrawString(MonoGame.Extended.BitmapFonts.BitmapFont,System.String,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Color},System.Single,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{Microsoft.Xna.Framework.Vector2},MonoGame.Extended.Graphics.FlipFlags,System.Single)">
            <summary>
                Draws unicode (UTF-16) characters as sprites using the specified <see cref="T:MonoGame.Extended.BitmapFonts.BitmapFont" />, text
                <see cref="T:System.String" />, position <see cref="T:Microsoft.Xna.Framework.Vector2" /> and optional <see cref="T:Microsoft.Xna.Framework.Color" />, rotation
                <see cref="T:System.Single" />, origin <see cref="T:Microsoft.Xna.Framework.Vector2" />, scale <see cref="T:Microsoft.Xna.Framework.Vector2" /> <see cref="T:MonoGame.Extended.Graphics.FlipFlags" />, and
                depth <see cref="T:System.Single" />.
            </summary>
            <param name="bitmapFont">The <see cref="T:MonoGame.Extended.BitmapFonts.BitmapFont" />.</param>
            <param name="text">The text <see cref="T:System.String" />.</param>
            <param name="position">The position <see cref="T:Microsoft.Xna.Framework.Vector2" />.</param>
            <param name="color">
                The <see cref="T:Microsoft.Xna.Framework.Color" />. Use <code>null</code> to use the default
                <see cref="P:Microsoft.Xna.Framework.Color.White" />.
            </param>
            <param name="rotation">
                The angle <see cref="T:System.Single" /> (in radians) to rotate each sprite about its <paramref name="origin" />. The default
                value is <code>0f</code>.
            </param>
            <param name="origin">
                The origin <see cref="T:Microsoft.Xna.Framework.Vector2" />. Use <code>null</code> to use the default
                <see cref="P:Microsoft.Xna.Framework.Vector2.Zero" />.
            </param>
            <param name="scale">
                The scale <see cref="T:Microsoft.Xna.Framework.Vector2" />. Use <code>null</code> to use the default
                <see cref="P:Microsoft.Xna.Framework.Vector2.One" />.
            </param>
            <param name="flags">The <see cref="T:MonoGame.Extended.Graphics.FlipFlags" />. The default value is <see cref="F:MonoGame.Extended.Graphics.FlipFlags.None" />.</param>
            <param name="depth">The depth <see cref="T:System.Single" />. The default value is <code>0f</code></param>
            <exception cref="T:System.InvalidOperationException">The <see cref="M:MonoGame.Extended.Graphics.Batcher`1.Begin(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Graphics.BlendState,Microsoft.Xna.Framework.Graphics.SamplerState,Microsoft.Xna.Framework.Graphics.DepthStencilState,Microsoft.Xna.Framework.Graphics.RasterizerState,Microsoft.Xna.Framework.Graphics.Effect)" /> method has not been called.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="bitmapFont" /> is null or <paramref name="text" /> is null.</exception>
        </member>
        <member name="T:MonoGame.Extended.Graphics.Effects.DefaultEffect">
            <summary>
                An <see cref="T:Microsoft.Xna.Framework.Graphics.Effect" /> that allows objects, within a 3D context, to be represented on a 2D monitor.
            </summary>
            <seealso cref="T:MonoGame.Extended.Graphics.Effects.MatrixChainEffect" />
            <seealso cref="T:MonoGame.Extended.Graphics.Effects.ITextureEffect" />
        </member>
        <member name="F:MonoGame.Extended.Graphics.Effects.DefaultEffect.DirtyTextureBitMask">
            <summary>
                The bitmask for use with <see cref="F:MonoGame.Extended.Graphics.Effects.MatrixChainEffect.Flags" /> indicating wether <see cref="P:MonoGame.Extended.Graphics.Effects.DefaultEffect.Texture" /> has
                changed in the last frame.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.Graphics.Effects.DefaultEffect.DirtyShaderIndexBitMask">
            <summary>
                The bitmask for use with <see cref="F:MonoGame.Extended.Graphics.Effects.MatrixChainEffect.Flags" /> indicating wether the underlying vertex shader and
                fragment (pixel) shaders have changed to one of the pre-defined shaders in the last frame.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.Graphics.Effects.DefaultEffect.DirtyMaterialColorBitMask">
            <summary>
                The bitmask for use with <see cref="F:MonoGame.Extended.Graphics.Effects.MatrixChainEffect.Flags" /> indicating wether the material color has changed in
                the last frame.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Graphics.Effects.DefaultEffect.Texture">
            <summary>
                Gets or sets the material <see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D" />.
            </summary>
            <value>
                The material <see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D" />.
            </value>
        </member>
        <member name="P:MonoGame.Extended.Graphics.Effects.DefaultEffect.Alpha">
            <summary>
                Gets or sets the material color alpha.
            </summary>
            <remarks>
                <para>
                    The alpha channel uses the premultiplied (associated) representation. This means that the RGB components of a
                    color represent
                    the color of the object of pixel, adjusted for its opacity by multiplication of <see cref="P:MonoGame.Extended.Graphics.Effects.DefaultEffect.Alpha" />.
                </para>
            </remarks>
        </member>
        <member name="P:MonoGame.Extended.Graphics.Effects.DefaultEffect.TextureEnabled">
            <summary>
                Gets or sets whether texturing is enabled.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Graphics.Effects.DefaultEffect.VertexColorEnabled">
            <summary>
                Gets or sets whether vertex color is enabled.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Graphics.Effects.DefaultEffect.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
                Initializes a new instance of the <see cref="T:MonoGame.Extended.Graphics.Effects.DefaultEffect" /> class.
            </summary>
            <param name="graphicsDevice">The graphics device.</param>
        </member>
        <member name="M:MonoGame.Extended.Graphics.Effects.DefaultEffect.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Byte[])">
            <summary>
                Initializes a new instance of the <see cref="T:MonoGame.Extended.Graphics.Effects.DefaultEffect" /> class.
            </summary>
            <param name="graphicsDevice">The graphics device.</param>
            <param name="byteCode">The byte code of the shader program.</param>
        </member>
        <member name="M:MonoGame.Extended.Graphics.Effects.DefaultEffect.#ctor(Microsoft.Xna.Framework.Graphics.Effect)">
            <summary>
                Initializes a new instance of the <see cref="T:MonoGame.Extended.Graphics.Effects.DefaultEffect" /> class.
            </summary>
            <param name="cloneSource">The clone source.</param>
        </member>
        <member name="M:MonoGame.Extended.Graphics.Effects.DefaultEffect.OnApply">
            <summary>
                Computes derived parameter values immediately before applying the effect.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Graphics.Effects.DefaultEffect.UpdateMaterialColor">
            <summary>
                Updates the material color parameters associated with this <see cref="T:MonoGame.Extended.Graphics.Effects.DefaultEffect" />.
            </summary>
        </member>
        <member name="T:MonoGame.Extended.Graphics.Effects.EffectResource">
            <summary>
                Reperesents the bytecode of an <see cref="T:Microsoft.Xna.Framework.Graphics.Effect" /> that is encapsulated inside a compiled assembly.
            </summary>
            <remarks>
                <para>
                    Files that are encapsulated inside a compiled assembly are commonly known as Manifiest or embedded resources.
                    Since embedded resources are added to the assembly at compiled time, they can not be accidentally deleted or
                    misplaced. However, if the file needs to be changed, the assembly will need to be re-compiled with the changed
                    file.
                </para>
                <para>
                    To add an embedded resource file to an assembly, first add it to the project and then change the Build Action
                    in the Properties of the file to <code>Embedded Resource</code>. The next time the project is compiled, the
                    compiler will add the file to the assembly as an embedded resource. The compiler adds namespace(s) to the
                    embedded resource so it matches with the path of where the file was added to the project.
                </para>
            </remarks>
        </member>
        <member name="P:MonoGame.Extended.Graphics.Effects.EffectResource.DefaultEffect">
            <summary>
                Gets the <see cref="T:MonoGame.Extended.Graphics.Effects.DefaultEffect" /> embedded into the MonoGame.Extended.Graphics library.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Graphics.Effects.EffectResource.Bytecode">
            <summary>
                Gets the bytecode of the <see cref="T:Microsoft.Xna.Framework.Graphics.Effect" /> file.
            </summary>
            <value>
                The bytecode of the <see cref="T:Microsoft.Xna.Framework.Graphics.Effect" /> file.
            </value>
        </member>
        <member name="M:MonoGame.Extended.Graphics.Effects.EffectResource.#ctor(System.String,System.Reflection.Assembly)">
            <summary>
                Initializes a new instance of the <see cref="T:MonoGame.Extended.Graphics.Effects.EffectResource" /> class.
            </summary>
            <param name="resourceName">The name of the embedded resource. This must include the namespace(s).</param>
            <param name="assembly">The assembly which the embedded resource is apart of.</param>
        </member>
        <member name="T:MonoGame.Extended.Graphics.Effects.ITextureEffect">
            <summary>
                Defines an <see cref="T:Microsoft.Xna.Framework.Graphics.Effect" /> that uses a <see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D" />.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Graphics.Effects.ITextureEffect.Texture">
            <summary>
                Gets or sets the <see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D" />.
            </summary>
            <value>
                The <see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D" />.
            </value>
        </member>
        <member name="T:MonoGame.Extended.Graphics.Effects.MatrixChainEffect">
            <summary>
                An <see cref="T:Microsoft.Xna.Framework.Graphics.Effect" /> that uses the standard chain of matrix transformations to represent a 3D object on a 2D
                monitor.
            </summary>
            <seealso cref="T:Microsoft.Xna.Framework.Graphics.Effect" />
            <seealso cref="T:Microsoft.Xna.Framework.Graphics.IEffectMatrices" />
        </member>
        <member name="F:MonoGame.Extended.Graphics.Effects.MatrixChainEffect.DirtyWorldViewProjectionBitMask">
            <summary>
                The bitmask for use with <see cref="F:MonoGame.Extended.Graphics.Effects.MatrixChainEffect.Flags"/> indicating wether <see cref="P:MonoGame.Extended.Graphics.Effects.MatrixChainEffect.World"/>, <see cref="P:MonoGame.Extended.Graphics.Effects.MatrixChainEffect.View"/>, or <see cref="P:MonoGame.Extended.Graphics.Effects.MatrixChainEffect.Projection"/> has changed in the last frame.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.Graphics.Effects.MatrixChainEffect.UseDefaultProjectionBitMask">
            <summary>
                The bitmask for use with <see cref="F:MonoGame.Extended.Graphics.Effects.MatrixChainEffect.Flags"/> indicating wether to use a default projection matrix or a custom projection matrix.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.Graphics.Effects.MatrixChainEffect.Flags">
            <summary>
                The dirty flags associated with this <see cref="T:MonoGame.Extended.Graphics.Effects.MatrixChainEffect"/>.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Graphics.Effects.MatrixChainEffect.World">
            <summary>
                Gets or sets the model-to-world <see cref="T:Microsoft.Xna.Framework.Matrix" />.
            </summary>
            <value>
                The model-to-world <see cref="T:Microsoft.Xna.Framework.Matrix" />.
            </value>
        </member>
        <member name="P:MonoGame.Extended.Graphics.Effects.MatrixChainEffect.View">
            <summary>
                Gets or sets the world-to-view <see cref="T:Microsoft.Xna.Framework.Matrix" />.
            </summary>
            <value>
                The world-to-view <see cref="T:Microsoft.Xna.Framework.Matrix" />.
            </value>
        </member>
        <member name="P:MonoGame.Extended.Graphics.Effects.MatrixChainEffect.Projection">
            <summary>
                Gets or sets the view-to-projection <see cref="T:Microsoft.Xna.Framework.Matrix" />.
            </summary>
            <value>
                The view-to-projection <see cref="T:Microsoft.Xna.Framework.Matrix" />.
            </value>
        </member>
        <member name="M:MonoGame.Extended.Graphics.Effects.MatrixChainEffect.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Byte[])">
            <summary>
                Initializes a new instance of the <see cref="T:MonoGame.Extended.Graphics.Effects.MatrixChainEffect" /> class.
            </summary>
            <param name="graphicsDevice">The graphics device.</param>
            <param name="byteCode">The effect code.</param>
        </member>
        <member name="M:MonoGame.Extended.Graphics.Effects.MatrixChainEffect.#ctor(Microsoft.Xna.Framework.Graphics.Effect)">
            <summary>
                Initializes a new instance of the <see cref="T:MonoGame.Extended.Graphics.Effects.MatrixChainEffect" /> class.
            </summary>
            <param name="cloneSource">The clone source.</param>
        </member>
        <member name="M:MonoGame.Extended.Graphics.Effects.MatrixChainEffect.SetWorld(Microsoft.Xna.Framework.Matrix@)">
            <summary>
                Sets the model-to-world <see cref="T:Microsoft.Xna.Framework.Matrix" />.
            </summary>
            <param name="world">The model-to-world <see cref="T:Microsoft.Xna.Framework.Matrix" />.</param>
        </member>
        <member name="M:MonoGame.Extended.Graphics.Effects.MatrixChainEffect.SetView(Microsoft.Xna.Framework.Matrix@)">
            <summary>
                Sets the world-to-view <see cref="T:Microsoft.Xna.Framework.Matrix" />.
            </summary>
            <param name="view">The world-to-view <see cref="T:Microsoft.Xna.Framework.Matrix" />.</param>
        </member>
        <member name="M:MonoGame.Extended.Graphics.Effects.MatrixChainEffect.SetProjection(Microsoft.Xna.Framework.Matrix@)">
            <summary>
                Sets the view-to-projection <see cref="T:Microsoft.Xna.Framework.Matrix" />.
            </summary>
            <param name="projection">The view-to-projection <see cref="T:Microsoft.Xna.Framework.Matrix" />.</param>
        </member>
        <member name="M:MonoGame.Extended.Graphics.Effects.MatrixChainEffect.OnApply">
            <summary>
                Computes derived parameter values immediately before applying the effect.
            </summary>
        </member>
        <member name="T:MonoGame.Extended.Graphics.IBatchDrawCallInfo`1">
            <summary>
                Defines the for a deferred draw call when batching.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Graphics.IBatchDrawCallInfo`1.SetState(Microsoft.Xna.Framework.Graphics.Effect)">
            <summary>
                Applies any state from the <see cref="T:MonoGame.Extended.Graphics.IBatchDrawCallInfo`1" /> to the
                <see cref="T:Microsoft.Xna.Framework.Graphics.Effect" /> or <see cref="!:Effect.GraphicsDevice"/>.
            </summary>
            <param name="effect">The effect.</param>
        </member>
        <member name="T:MonoGame.Extended.Graphics.IMatrixChainEffect">
            <summary>
                Defines an <see cref="T:Microsoft.Xna.Framework.Graphics.Effect" /> that uses the standard chain of matrix transformations to represent a 3D object on
                a 2D monitor.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Graphics.IMatrixChainEffect.SetWorld(Microsoft.Xna.Framework.Matrix@)">
            <summary>
                Sets the model-to-world <see cref="T:Microsoft.Xna.Framework.Matrix" />.
            </summary>
            <param name="world">The model-to-world <see cref="T:Microsoft.Xna.Framework.Matrix" />.</param>
        </member>
        <member name="M:MonoGame.Extended.Graphics.IMatrixChainEffect.SetView(Microsoft.Xna.Framework.Matrix@)">
            <summary>
                Sets the world-to-view <see cref="T:Microsoft.Xna.Framework.Matrix" />.
            </summary>
            <param name="view">The world-to-view <see cref="T:Microsoft.Xna.Framework.Matrix" />.</param>
        </member>
        <member name="M:MonoGame.Extended.Graphics.IMatrixChainEffect.SetProjection(Microsoft.Xna.Framework.Matrix@)">
            <summary>
                Sets the view-to-projection <see cref="T:Microsoft.Xna.Framework.Matrix" />.
            </summary>
            <param name="projection">The view-to-projection <see cref="T:Microsoft.Xna.Framework.Matrix" />.</param>
        </member>
        <member name="T:MonoGame.Extended.Graphics.NinePatch">
            <summary>
            Represents a nine-patch texture.
            </summary>
            <remarks>
                <para>
                    A nine-patch texture is a specialized texture object used for rendering scalable graphical assets,
                    particularly user interface (UI) elements.It consists of a single texture region subdivided into nine
                    distinct subregions.  When rendered, the four corner subregions remain unscaled, preserving their original
                    dimensions. The top and bottom edge subregions are stretched horizontally, while the left and right edge
                    subregions are stretched vertically.  The central subregion is scaled along both axes to fill the desired
                    dimensions.
                </para>
                <para>
                    This approach is highly beneficial for UI components that require dynamic scaling, such as containers for
                    menus, dialog boxes, or other resizable elements.  By leveraging the nine-patch texture, these graphical
                    assets can be seamlessly scaled to different sizes while maintaining their visual integrity and preventing
                    undesirable distortions or stretching artifacts.
                </para>
            </remarks>
        </member>
        <member name="F:MonoGame.Extended.Graphics.NinePatch.TopLeft">
            <summary>The index representing the top-left patch.</summary>
        </member>
        <member name="F:MonoGame.Extended.Graphics.NinePatch.TopMiddle">
            <summary>The index representing the top-middle patch.</summary>
        </member>
        <member name="F:MonoGame.Extended.Graphics.NinePatch.TopRight">
            <summary>The index representing the top-right patch.</summary>
        </member>
        <member name="F:MonoGame.Extended.Graphics.NinePatch.MiddleLeft">
            <summary>The index representing the middle-left patch.</summary>
        </member>
        <member name="F:MonoGame.Extended.Graphics.NinePatch.Middle">
            <summary>The index representing the middle patch.</summary>
        </member>
        <member name="F:MonoGame.Extended.Graphics.NinePatch.MiddleRight">
            <summary>The index representing the middle-right patch.</summary>
        </member>
        <member name="F:MonoGame.Extended.Graphics.NinePatch.BottomLeft">
            <summary>The index representing the bottom-left patch.</summary>
        </member>
        <member name="F:MonoGame.Extended.Graphics.NinePatch.BottomMiddle">
            <summary>The index representing the bottom-middle patch.</summary>
        </member>
        <member name="F:MonoGame.Extended.Graphics.NinePatch.BottomRight">
            <summary>The index representing the bottom-right patch.</summary>
        </member>
        <member name="P:MonoGame.Extended.Graphics.NinePatch.Name">
            <summary>
            Gets the name assigned to this nine-patch.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Graphics.NinePatch.Padding">
            <summary>
            The size of the border patches around the middle patch.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Graphics.NinePatch.Patches">
            <summary>
            Gets a read-only span of the texture regions that make up the nine-patch.
            </summary>
            <remarks>
            Elements are in order of top-left, top-middle, top-right, middle-left, middle, middle-right, bottom-left,
            bottom-middle, and bottom-right.
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Graphics.NinePatch.#ctor(MonoGame.Extended.Graphics.Texture2DRegion[])">
            <summary>
            Initializes a new instance of the <see cref="T:MonoGame.Extended.Graphics.NinePatch"/> class with the specified patches.
            </summary>
            <remarks>
            The <paramref name="patches"/> array should contain the elements in the order of top-left, top-middle,
            top-right, middle-left, middle, middle-right, bottom-left, bottom-middle, and bottom-right.
            </remarks>
            <param name="patches">An array of nine <see cref="T:MonoGame.Extended.Graphics.Texture2DRegion"/> objects.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="patches"/> is null.</exception>
            <exception cref="T:System.ArgumentException">
            Thrown if <paramref name="patches"/> does not contain exactly nine elements.
            </exception>
        </member>
        <member name="M:MonoGame.Extended.Graphics.NinePatch.#ctor(MonoGame.Extended.Graphics.Texture2DRegion[],System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoGame.Extended.Graphics.NinePatch"/> class with the specified patches and name.
            </summary>
            <param name="patches">
            An array of nine <see cref="T:MonoGame.Extended.Graphics.Texture2DRegion"/> objects.
            The top, left, bottom and right regions must to be of exactly the same size.
            Mid patches can be as small as 1x1.
            </param>
            <param name="name">
            The name of the nine-patch. If null or empty, a default name will be generated based on the texture name of the
            top-left patch.
            </param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="patches"/> is null.</exception>
            <exception cref="T:System.ArgumentException">
            Thrown if <paramref name="patches"/> does not contain exactly nine elements.
            </exception>
        </member>
        <member name="T:MonoGame.Extended.Graphics.Sprite">
            <summary>
            Represents a drawable 2D texture region with additional properties for rendering, such as position, scale,
            rotation, and color.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Graphics.Sprite.IsVisible">
            <summary>
            Gets or sets a value indicating whether this sprite is visible.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Graphics.Sprite.Color">
            <summary>
            Gets or sets the color mask used when rendering this sprite.
            </summary>
            <remarks>
            The color mask is applied to the sprite's texture by multiplying each pixel's color value with the specified
            color.  For example, setting the color to `Color.Red` will make the sprite appear as a red tint over its
            texture.
            </remarks>
        </member>
        <member name="P:MonoGame.Extended.Graphics.Sprite.Alpha">
            <summary>
            Gets or sets the alpha transparency value used when rendering this sprite.
            </summary>
            <remarks>
            The alpha value should be between 0 (fully transparent) and 1 (fully opaque).
            </remarks>
        </member>
        <member name="P:MonoGame.Extended.Graphics.Sprite.Depth">
            <summary>
            Gets or sets the layer depth used when rendering this sprite.
            </summary>
            <remarks>
            Sprites with higher depth values are rendered on top of those with lower depth values.
            </remarks>
        </member>
        <member name="P:MonoGame.Extended.Graphics.Sprite.Effect">
            <summary>
            Gets or sets the sprite effects to apply when rendering this sprite.
            </summary>
            <remarks>
            This specifies the desired horizontal and/or vertical flip effect of the sprite.
            </remarks>
        </member>
        <member name="P:MonoGame.Extended.Graphics.Sprite.Tag">
            <summary>
            Gets or Sets an object that contains user defined data about this sprite.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Graphics.Sprite.Origin">
            <summary>
            Gets or sets the origin of this sprite.
            </summary>
            <remarks>
            The origin is relative to the bounds of the texture region and represents the point around which the sprite is
            rotated and scaled.
            </remarks>
        </member>
        <member name="P:MonoGame.Extended.Graphics.Sprite.OriginNormalized">
            <summary>
            Gets or sets the normalized origin of this sprite relative to its texture region.
            </summary>
            <remarks>
            The normalized origin represents the origin as a fraction of the texture region's UV coordinates,
            where (0, 0) is the top-left corner and (1, 1) is the bottom-right corner.
            </remarks>
        </member>
        <member name="P:MonoGame.Extended.Graphics.Sprite.TextureRegion">
            <summary>
            Gets or sets the source texture region of this sprite.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when setting to a null texture region.</exception>
            <exception cref="T:System.ObjectDisposedException">
            Thrown if the source texture of the assigned <see cref="T:MonoGame.Extended.Graphics.Texture2DRegion"/> has been disposed of when setting.
            </exception>
        </member>
        <member name="M:MonoGame.Extended.Graphics.Sprite.#ctor(Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoGame.Extended.Graphics.Sprite"/> class with the specified texture.
            </summary>
            <param name="texture">The source texture of the sprite.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the <paramref name="texture"/> parameter is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            Thrown if the <paramref name="texture"/> parameter was disposed of prior.
            </exception>
        </member>
        <member name="M:MonoGame.Extended.Graphics.Sprite.#ctor(MonoGame.Extended.Graphics.Texture2DRegion)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoGame.Extended.Graphics.Sprite"/> class with the specified texture region.
            The sprite represents a renderable 2D image defined by the given texture region.
            </summary>
            <param name="textureRegion">The source texture region of the sprite.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the <paramref name="textureRegion"/> parameter is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            Thrown if the source texture of the <paramref name="textureRegion"/> parameter has been disposed of.
            </exception>
        </member>
        <member name="M:MonoGame.Extended.Graphics.Sprite.GetBoundingRectangle(MonoGame.Extended.Transform2)">
            <summary>
            Gets the bounding rectangle of the sprite in world/screen coordinates.
            </summary>
            <param name="transform">The transformation of the sprite.</param>
            <returns>The bounding rectangle of the sprite in world/screen coordinates.</returns>
        </member>
        <member name="M:MonoGame.Extended.Graphics.Sprite.GetBoundingRectangle(Microsoft.Xna.Framework.Vector2,System.Single,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Gets the bounding rectangle of the sprite in world/screen coordinates.
            </summary>
            <param name="position">The xy-coordinate position of the sprite in world/screen coordinates.</param>
            <param name="rotation">The rotation, in radians, of the sprite.</param>
            <param name="scale">The scale of the sprite.</param>
            <returns>The bounding rectangle of the sprite in world/screen coordinates.</returns>
        </member>
        <member name="M:MonoGame.Extended.Graphics.Sprite.GetCorners(Microsoft.Xna.Framework.Vector2,System.Single,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Gets the corner points of the sprite in world/screen coordinates.
            </summary>
            <param name="position">The xy-coordinate position of the sprite in world/screen coordinates.</param>
            <param name="rotation">The rotation, in radians, of the sprite.</param>
            <param name="scale">The scale of the sprite.</param>
            <returns>The corner points of the sprite in world/screen coordinates.</returns>
        </member>
        <member name="T:MonoGame.Extended.Graphics.SpriteBatchExtensions">
            <summary>
            Provides extension methods for the <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch"/> class.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Graphics.SpriteBatchExtensions.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch,MonoGame.Extended.Graphics.NinePatch,Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Color,System.Nullable{Microsoft.Xna.Framework.Rectangle})">
            <summary>
            Draws a nine-patch region to the sprite batch.
            </summary>
            <param name="spriteBatch">The sprite batch.</param>
            <param name="ninePatchRegion">The nine-patch region.</param>
            <param name="destinationRectangle">The destination rectangle.</param>
            <param name="color">The color to tint the nine-patch region.</param>
            <param name="clippingRectangle">An optional clipping rectangle.</param>
        </member>
        <member name="M:MonoGame.Extended.Graphics.SpriteBatchExtensions.Draw(MonoGame.Extended.Graphics.Sprite,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,System.Single,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Draws a sprite to the sprite batch.
            </summary>
            <param name="sprite">The sprite to draw.</param>
            <param name="spriteBatch">The sprite batch.</param>
            <param name="position">The position to draw the sprite.</param>
            <param name="rotation">The rotation of the sprite.</param>
            <param name="scale">The scale of the sprite.</param>
        </member>
        <member name="M:MonoGame.Extended.Graphics.SpriteBatchExtensions.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch,MonoGame.Extended.Graphics.Sprite,MonoGame.Extended.Transform2)">
            <summary>
            Draws a sprite to the sprite batch with a transform.
            </summary>
            <param name="spriteBatch">The sprite batch.</param>
            <param name="sprite">The sprite to draw.</param>
            <param name="transform">The transform to apply to the sprite.</param>
        </member>
        <member name="M:MonoGame.Extended.Graphics.SpriteBatchExtensions.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch,MonoGame.Extended.Graphics.Sprite,Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            Draws a sprite to the sprite batch.
            </summary>
            <param name="spriteBatch">The sprite batch.</param>
            <param name="sprite">The sprite to draw.</param>
            <param name="position">The position to draw the sprite.</param>
            <param name="rotation">The rotation of the sprite.</param>
        </member>
        <member name="M:MonoGame.Extended.Graphics.SpriteBatchExtensions.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch,MonoGame.Extended.Graphics.Sprite,Microsoft.Xna.Framework.Vector2,System.Single,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Draws a sprite to the sprite batch.
            </summary>
            <param name="spriteBatch">The sprite batch.</param>
            <param name="sprite">The sprite to draw.</param>
            <param name="position">The position to draw the sprite.</param>
            <param name="rotation">The rotation of the sprite.</param>
            <param name="scale">The scale of the sprite.</param>
        </member>
        <member name="M:MonoGame.Extended.Graphics.SpriteBatchExtensions.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Color,System.Nullable{Microsoft.Xna.Framework.Rectangle})">
            <summary>
            Draws a texture to the sprite batch with optional clipping.
            </summary>
            <param name="spriteBatch">The sprite batch.</param>
            <param name="texture">The texture to draw.</param>
            <param name="sourceRectangle">The source rectangle.</param>
            <param name="destinationRectangle">The destination rectangle.</param>
            <param name="color">The color to tint the texture.</param>
            <param name="clippingRectangle">An optional clipping rectangle.</param>
        </member>
        <member name="M:MonoGame.Extended.Graphics.SpriteBatchExtensions.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch,MonoGame.Extended.Graphics.Texture2DRegion,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,System.Nullable{Microsoft.Xna.Framework.Rectangle})">
            <summary>
            Draws a texture region to the sprite batch.
            </summary>
            <param name="spriteBatch">The sprite batch.</param>
            <param name="textureRegion">The texture region to draw.</param>
            <param name="position">The position to draw the texture region.</param>
            <param name="color">The color to tint the texture region.</param>
            <param name="clippingRectangle">An optional clipping rectangle.</param>
        </member>
        <member name="M:MonoGame.Extended.Graphics.SpriteBatchExtensions.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch,MonoGame.Extended.Graphics.Texture2DRegion,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single,System.Nullable{Microsoft.Xna.Framework.Rectangle})">
            <summary>
            Draws a texture region to the sprite batch with specified parameters.
            </summary>
            <param name="spriteBatch">The sprite batch.</param>
            <param name="textureRegion">The texture region to draw.</param>
            <param name="position">The position to draw the texture region.</param>
            <param name="color">The color to tint the texture region.</param>
            <param name="rotation">The rotation of the texture region.</param>
            <param name="origin">The origin of the texture region.</param>
            <param name="scale">The scale of the texture region.</param>
            <param name="effects">The sprite effects to apply.</param>
            <param name="layerDepth">The layer depth.</param>
            <param name="clippingRectangle">An optional clipping rectangle.</param>
        </member>
        <member name="M:MonoGame.Extended.Graphics.SpriteBatchExtensions.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch,MonoGame.Extended.Graphics.Texture2DRegion,Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Color,System.Nullable{Microsoft.Xna.Framework.Rectangle})">
            <summary>
            Draws a texture region to the sprite batch.
            </summary>
            <param name="spriteBatch">The sprite batch.</param>
            <param name="textureRegion">The texture region to draw.</param>
            <param name="destinationRectangle">The destination rectangle.</param>
            <param name="color">The color to tint the texture region.</param>
            <param name="clippingRectangle">An optional clipping rectangle.</param>
        </member>
        <member name="T:MonoGame.Extended.Graphics.SpriteSheet">
            <summary>
            Represents a sprite sheet containing textures and animations.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Graphics.SpriteSheet.AnimationCount">
            <summary>
            Gets the number of animations defined in the sprite sheet.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Graphics.SpriteSheet.Name">
            <summary>
            Gets the name of the sprite sheet.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Graphics.SpriteSheet.TextureAtlas">
            <summary>
            Gets the texture atlas associated with the sprite sheet.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Graphics.SpriteSheet.#ctor(System.String,MonoGame.Extended.Graphics.Texture2DAtlas)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoGame.Extended.Graphics.SpriteSheet"/> class.
            </summary>
            <param name="name">The name of the sprite sheet.</param>
            <param name="textureAtlas">The texture atlas to use for the sprite sheet.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="textureAtlas"/> is <c>null</c>.</exception>
        </member>
        <member name="M:MonoGame.Extended.Graphics.SpriteSheet.CreateSprite(System.Int32)">
            <summary>
            Creates a sprite from the specified region index.
            </summary>
            <param name="regionIndex">The index of the region in the texture atlas.</param>
            <returns>A new <see cref="T:MonoGame.Extended.Graphics.Sprite"/> instance.</returns>
        </member>
        <member name="M:MonoGame.Extended.Graphics.SpriteSheet.CreateSprite(System.String)">
            <summary>
            Creates a sprite from the specified region name.
            </summary>
            <param name="regionName">The name of the region in the texture atlas.</param>
            <returns>A new <see cref="T:MonoGame.Extended.Graphics.Sprite"/> instance.</returns>
        </member>
        <member name="M:MonoGame.Extended.Graphics.SpriteSheet.DefineAnimation(System.String,System.Action{MonoGame.Extended.Graphics.SpriteSheetAnimationBuilder})">
            <summary>
            Defines a new animation for the sprite sheet.
            </summary>
            <param name="name">The name of the animation.</param>
            <param name="buildAction">The action to build the animation definition.</param>
        </member>
        <member name="M:MonoGame.Extended.Graphics.SpriteSheet.RemoveAnimationDefinition(System.String)">
            <summary>
            Removes the animation definition with the specified name.
            </summary>
            <param name="name">The name of the animation to remove.</param>
            <returns><c>true</c> if the animation was successfully removed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:MonoGame.Extended.Graphics.SpriteSheetAnimationBuilder">
            <summary>
            A builder class for creating <see cref="T:MonoGame.Extended.Graphics.SpriteSheetAnimation"/> instances.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Graphics.SpriteSheetAnimationBuilder.AddFrame(System.Int32,System.TimeSpan)">
            <summary>
            Adds a frame to the animation using the region index and duration.
            </summary>
            <param name="regionIndex">The index of the region in the sprite sheet.</param>
            <param name="duration">The duration of the frame.</param>
            <returns>The <see cref="T:MonoGame.Extended.Graphics.SpriteSheetAnimationBuilder"/> instance for chaining.</returns>
        </member>
        <member name="M:MonoGame.Extended.Graphics.SpriteSheetAnimationBuilder.AddFrame(System.String,System.TimeSpan)">
            <summary>
            Adds a frame to the animation using the region name and duration.
            </summary>
            <param name="regionName">The name of the region in the sprite sheet.</param>
            <param name="duration">The duration of the frame.</param>
            <returns>The <see cref="T:MonoGame.Extended.Graphics.SpriteSheetAnimationBuilder"/> instance for chaining.</returns>
        </member>
        <member name="M:MonoGame.Extended.Graphics.SpriteSheetAnimationBuilder.IsLooping(System.Boolean)">
            <summary>
            Sets whether the animation should loop.
            </summary>
            <param name="isLooping">If set to <c>true</c>, the animation will loop.</param>
            <returns>The <see cref="T:MonoGame.Extended.Graphics.SpriteSheetAnimationBuilder"/> instance for chaining.</returns>
        </member>
        <member name="M:MonoGame.Extended.Graphics.SpriteSheetAnimationBuilder.IsReversed(System.Boolean)">
            <summary>
            Sets whether the animation should be reversed.
            </summary>
            <param name="isReversed">If set to <c>true</c>, the animation will play in reverse.</param>
            <returns>The <see cref="T:MonoGame.Extended.Graphics.SpriteSheetAnimationBuilder"/> instance for chaining.</returns>
        </member>
        <member name="M:MonoGame.Extended.Graphics.SpriteSheetAnimationBuilder.IsPingPong(System.Boolean)">
            <summary>
            Sets whether the animation should ping-pong (reverse direction at the ends).
            </summary>
            <param name="isPingPong">If set to <c>true</c>, the animation will ping-pong.</param>
            <returns>The <see cref="T:MonoGame.Extended.Graphics.SpriteSheetAnimationBuilder"/> instance for chaining.</returns>
        </member>
        <member name="T:MonoGame.Extended.Graphics.SpriteSheetAnimationFrame">
            <summary>
            Represents a single frame within a sprite sheet animation, including its index, display duration, and texture
            region.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Graphics.SpriteSheetAnimationFrame.FrameIndex">
            <summary>
            Gets the index of the frame in the overall sprite sheet.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Graphics.SpriteSheetAnimationFrame.Duration">
            <summary>
            Gets the total duration this frame should be displayed during an animation.
            </summary>
        </member>
        <member name="T:MonoGame.Extended.Graphics.Texture2DAtlas">
            <summary>
            Represents a 2D texture atlas that contains a collection of texture regions.
            </summary>
            <remarks>
                <para>
                    A texture atlas, also known as a tile map, tile engine, or sprite sheet, is a large image that contains a 
                    collection of sub-images, or "textures", each representing a texture map for a specific part of a 2D or 3D model.
                </para>
                <para>
                    These sub-textures can be rendered by adjusting the texture coordinates (UV map) to reference the appropriate
                    part of the atlas. This technique allows efficient rendering in applications where many small textures are 
                    frequently used.
                </para>
                <para>
                    By storing textures in a single atlas, the graphics hardware treats them as a single unit, which can save memory 
                    and improve performance by reducing the number of rendering state changes. Binding one large texture once is 
                    typically faster than binding multiple smaller textures individually.
                </para>
                <para>
                    However, careful alignment is necessary to avoid texture bleeding when using mipmapping, and to prevent artifacts 
                    between tiles when using texture compression.
                </para>
            </remarks>
        </member>
        <member name="P:MonoGame.Extended.Graphics.Texture2DAtlas.Name">
            <summary>
            Gets the name of the texture atlas.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Graphics.Texture2DAtlas.Texture">
            <summary>
            Gets the underlying 2D texture.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Graphics.Texture2DAtlas.RegionCount">
            <summary>
            Gets the number of regions in the atlas.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Graphics.Texture2DAtlas.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:MonoGame.Extended.Graphics.Texture2DRegion"/> at the specified index.
            </summary>
            <param name="index">The index of the texture region.</param>
            <returns>The texture region at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the value of the <paramref name="index"/> parameter is less than zero or greater than or equal to
            the total number of regions in this atlas.
            </exception>
        </member>
        <member name="P:MonoGame.Extended.Graphics.Texture2DAtlas.Item(System.String)">
            <summary>
            Gets the <see cref="T:MonoGame.Extended.Graphics.Texture2DRegion"/> with the specified name.
            </summary>
            <param name="name">The name of the texture region.</param>
            <returns>The texture region with the specified name.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            Thrown if this atlas does not contain a region with a name that matches the <paramref name="name"/> parameter.
            </exception>
        </member>
        <member name="M:MonoGame.Extended.Graphics.Texture2DAtlas.#ctor(Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoGame.Extended.Graphics.Texture2DAtlas"/> class with the specified texture.
            </summary>
            <param name="texture">The texture to create the atlas from.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="texture"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if <paramref name="texture"/> is disposed.</exception>
        </member>
        <member name="M:MonoGame.Extended.Graphics.Texture2DAtlas.#ctor(System.String,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoGame.Extended.Graphics.Texture2DAtlas"/> class with the specified name and texture.
            </summary>
            <param name="name">The name of the texture atlas.</param>
            <param name="texture">The texture to create the atlas from.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="texture"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if <paramref name="texture"/> is disposed.</exception>
        </member>
        <member name="M:MonoGame.Extended.Graphics.Texture2DAtlas.CreateRegion(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new texture region and adds it to this atlas.
            </summary>
            <param name="x">The x-coordinate of the region.</param>
            <param name="y">The y-coordinate of the region.</param>
            <param name="width">The width, in pixels, of the region.</param>
            <param name="height">The height, in pixels, of the region.</param>
            <returns>The created texture region.</returns>
        </member>
        <member name="M:MonoGame.Extended.Graphics.Texture2DAtlas.CreateRegion(System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Creates a new texture region with the specified name and adds it to this atlas.
            </summary>
            <param name="x">The x-coordinate of the region.</param>
            <param name="y">The y-coordinate of the region.</param>
            <param name="width">The width, in pixels, of the region.</param>
            <param name="height">The height, in pixels, of the region.</param>
            <param name="name">The name of the texture region.</param>
            <returns>The created texture region.</returns>
            <exception cref="T:System.InvalidOperationException">
            Thrown if a region with the same name as the <paramref name="name"/> parameter already exists in this atlas.
            </exception>
        </member>
        <member name="M:MonoGame.Extended.Graphics.Texture2DAtlas.CreateRegion(Microsoft.Xna.Framework.Point,MonoGame.Extended.Size)">
            <summary>
            Creates a new texture region and adds it to this atlas.
            </summary>
            <param name="location">The location of the region.</param>
            <param name="size">The size, in pixels, of the region.</param>
            <returns>The created texture region.</returns>
        </member>
        <member name="M:MonoGame.Extended.Graphics.Texture2DAtlas.CreateRegion(System.String,Microsoft.Xna.Framework.Point,MonoGame.Extended.Size)">
            <summary>
            Creates a new texture region with the specified name and adds it to this atlas.
            </summary>
            <param name="location">The location of the region.</param>
            <param name="size">The size, in pixels, of the region.</param>
            <param name="name">The name of the texture region.</param>
            <returns>The created texture region.</returns>
            <exception cref="T:System.InvalidOperationException">
            Thrown if a region with the same name as the <paramref name="name"/> parameter already exists in this atlas.
            </exception>
        </member>
        <member name="M:MonoGame.Extended.Graphics.Texture2DAtlas.CreateRegion(Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Creates a new texture region and adds it to this atlas.
            </summary>
            <param name="bounds">The bounds of the region.</param>
            <returns>The created texture region.</returns>
        </member>
        <member name="M:MonoGame.Extended.Graphics.Texture2DAtlas.CreateRegion(Microsoft.Xna.Framework.Rectangle,System.String)">
            <summary>
            Creates a new texture region with the specified name and adds it to this atlas.
            </summary>
            <param name="bounds">The bounds of the region.</param>
            <param name="name">The name of the texture region.</param>
            <returns>The created texture region.</returns>
            <exception cref="T:System.InvalidOperationException">
            Thrown if a region with the same name as the <paramref name="name"/> parameter already exists in this atlas.
            </exception>
        </member>
        <member name="M:MonoGame.Extended.Graphics.Texture2DAtlas.ContainsRegion(System.String)">
            <summary>
            Determines whether the atlas contains a region with the specified name.
            </summary>
            <param name="name">The name of the region.</param>
            <returns>
            <see langword="true"/> if the atlas contains a region with the specified name; otherwise,
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Graphics.Texture2DAtlas.GetIndexOfRegion(System.String)">
            <summary>
            Gets the index of the region with the specified name.
            </summary>
            <param name="name">The name of the region.</param>
            <returns>The index of the region if found; otherwise, <c>-1</c>.</returns>
        </member>
        <member name="M:MonoGame.Extended.Graphics.Texture2DAtlas.GetRegion(System.Int32)">
            <summary>
            Gets the region at the specified index.
            </summary>
            <param name="index">The index of the region.</param>
            <returns>The region at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Throw if the value of the <paramref name="index"/> is less than zero or is greater than or equal to the total
            number of regions in this atlas.
            </exception>
        </member>
        <member name="M:MonoGame.Extended.Graphics.Texture2DAtlas.GetRegion(System.String)">
            <summary>
            Gets the region with the specified name.
            </summary>
            <param name="name">The name of the region.</param>
            <returns>The region with the specified name.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            Thrown if this atlas does not contain a region with a name that matches the <paramref name="name"/> parameter.
            </exception>
        </member>
        <member name="M:MonoGame.Extended.Graphics.Texture2DAtlas.TryGetRegion(System.Int32,MonoGame.Extended.Graphics.Texture2DRegion@)">
            <summary>
            Tries to get the region at the specified index.
            </summary>
            <param name="index">The index of the region.</param>
            <param name="region">
            When this method returns, contains the region at the specified index, if the index is found; otherwise,
            <see langword="null"/>.
            </param>
            <returns>
            <see langword="true"/> if the region is found at the specified index; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Graphics.Texture2DAtlas.TryGetRegion(System.String,MonoGame.Extended.Graphics.Texture2DRegion@)">
            <summary>
            Tries to get the region with the specified name.
            </summary>
            <param name="name">The name of the region.</param>
            <param name="region">
            When this method returns, contains the region with the specified name, if the name is found; otherwise,
            <see langword="null"/>.
            </param>
            <returns>
            <see langword="true"/> if the region is found with the specified name; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Graphics.Texture2DAtlas.GetRegions(System.Int32[])">
            <summary>
            Gets the regions at the specified indexes.
            </summary>
            <param name="indexes">The indexes of the regions to get.</param>
            <returns>An array of the regions at the specified indexes.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the value of any index in the <paramref name="indexes"/> parameter is less than zero or is greater
            than or equal to the total number of regions in this atlas.
            </exception>
        </member>
        <member name="M:MonoGame.Extended.Graphics.Texture2DAtlas.GetRegions(System.String[])">
            <summary>
            Gets the regions with the specified names.
            </summary>
            <param name="names">The names of the regions to get.</param>
            <returns>An array of the regions with the specified names.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            Thrown if a region is not found in this atlas with a name that matches any of the names in the
            <paramref name="names"/> parameter.
            </exception>
        </member>
        <member name="M:MonoGame.Extended.Graphics.Texture2DAtlas.RemoveRegion(System.Int32)">
            <summary>
            Removes the region at the specified index.
            </summary>
            <param name="index">The index of the region to remove.</param>
            <returns>
            <see langword="true"/> if the region is successfully removed; otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Throw if the value of the <paramref name="index"/> is less than zero or is greater than or equal to the total
            number of regions in this atlas.
            </exception>
        </member>
        <member name="M:MonoGame.Extended.Graphics.Texture2DAtlas.RemoveRegion(System.String)">
            <summary>
            Removes the region with the specified name.
            </summary>
            <param name="name">The name of the region to remove.</param>
            <returns>
            <see langword="true"/> if the region is successfully removed; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Graphics.Texture2DAtlas.ClearRegions">
            <summary>
            Removes all regions from the atlas.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Graphics.Texture2DAtlas.CreateSprite(System.Int32)">
            <summary>
            Creates a new <see cref="T:MonoGame.Extended.Graphics.Sprite"/> using the region from this atlas at the specified index.
            </summary>
            <param name="regionIndex">The index of the region to use.</param>
            <returns>The <see cref="T:MonoGame.Extended.Graphics.Sprite"/> created using the region at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Throw if the value of the <paramref name="regionIndex"/> is less than zero or is greater than or equal to the total
            number of regions in this atlas.
            </exception>
        </member>
        <member name="M:MonoGame.Extended.Graphics.Texture2DAtlas.CreateSprite(System.String)">
            <summary>
            Creates a new <see cref="T:MonoGame.Extended.Graphics.Sprite"/> using the region from this atlas with the specified name.
            </summary>
            <param name="regionName">The name of the region to use.</param>
            <returns>The <see cref="T:MonoGame.Extended.Graphics.Sprite"/> created using the region with the specified name.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            Thrown if this atlas does not contain a region with a name that matches the <paramref name="regionName"/> parameter.
            </exception>
        </member>
        <member name="M:MonoGame.Extended.Graphics.Texture2DAtlas.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection of texture regions.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:MonoGame.Extended.Graphics.Texture2DAtlas.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection of texture regions.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:MonoGame.Extended.Graphics.Texture2DAtlas.Create(System.String,Microsoft.Xna.Framework.Graphics.Texture2D,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new <see cref="T:MonoGame.Extended.Graphics.Texture2DAtlas"/> from the specified texture by dividing it into regions.
            </summary>
            <param name="name">The name of the texture atlas.</param>
            <param name="texture">The source texture to create the atlas from.</param>
            <param name="regionWidth">The width, in pixels, of each region.</param>
            <param name="regionHeight">The height, in pixels, of each region.</param>
            <param name="maxRegionCount">
            The maximum number of regions to create. Defaults to <see cref="F:System.Int32.MaxValue"/>.
            </param>
            <param name="margin">
            The margin, in pixels,  to leave around the edges of the texture. Defaults to <c>0</c>.
            </param>
            <param name="spacing">The spacing, in pixels, between regions. Defaults to <c>0</c>.</param>
            <returns>A <see cref="T:MonoGame.Extended.Graphics.Texture2DAtlas"/> containing the created regions.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="texture"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if <paramref name="texture"/> is disposed.</exception>
        </member>
        <member name="T:MonoGame.Extended.Graphics.Texture2DRegion">
            <summary>
            Represents a region of a texture.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Graphics.Texture2DRegion.Name">
            <summary>
            Gets the name assigned to this texture region when it was created.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Graphics.Texture2DRegion.Texture">
            <summary>
            Gets the texture associated with this texture region.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Graphics.Texture2DRegion.X">
            <summary>
            Gets the top-left x-coordinate of the texture region within the texture.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Graphics.Texture2DRegion.Y">
            <summary>
            Gets the top-left y-coordinate of the texture region within the texture.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Graphics.Texture2DRegion.Width">
            <summary>
            Gets the width, in pixels, of the texture region.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Graphics.Texture2DRegion.Height">
            <summary>
            Gets the height, in pixels,  of the texture region.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Graphics.Texture2DRegion.Size">
            <summary>
            Gets the size of the texture region.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Graphics.Texture2DRegion.Tag">
            <summary>
            Gets or sets the user-defined data associated with this texture region.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Graphics.Texture2DRegion.Bounds">
            <summary>
            Gets the bounds of the texture region within the texture.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Graphics.Texture2DRegion.TopUV">
            <summary>
            Gets the top UV coordinate of the texture region.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Graphics.Texture2DRegion.RightUV">
            <summary>
            Gets the right UV coordinate of the texture region.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Graphics.Texture2DRegion.BottomUV">
            <summary>
            Gets the bottom UV coordinate of the texture region.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Graphics.Texture2DRegion.LeftUV">
            <summary>
            Gets the left UV coordinate of the texture region.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Graphics.Texture2DRegion.#ctor(Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoGame.Extended.Graphics.Texture2DRegion"/> class representing the entire texture.
            </summary>
            <param name="texture">The texture to create the region from.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="texture"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            Thrown if <paramref name="texture"/> has been disposed prior.
            </exception>
        </member>
        <member name="M:MonoGame.Extended.Graphics.Texture2DRegion.#ctor(Microsoft.Xna.Framework.Graphics.Texture2D,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoGame.Extended.Graphics.Texture2DRegion"/> class representing the entire texture with the
            specified name.
            </summary>
            <param name="texture">The texture to create the region from.</param>
            <param name="name">The name of the texture region.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="texture"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            Thrown if <paramref name="texture"/> has been disposed prior.
            </exception>
        </member>
        <member name="M:MonoGame.Extended.Graphics.Texture2DRegion.#ctor(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoGame.Extended.Graphics.Texture2DRegion"/> class with the specified region of the texture.
            </summary>
            <param name="texture">The texture to create the region from.</param>
            <param name="region">The region of the texture to use.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="texture"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            Thrown if <paramref name="texture"/> has been disposed prior.
            </exception>
        </member>
        <member name="M:MonoGame.Extended.Graphics.Texture2DRegion.#ctor(Microsoft.Xna.Framework.Graphics.Texture2D,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoGame.Extended.Graphics.Texture2DRegion"/> class with the specified region of the texture.
            </summary>
            <param name="texture">The texture to create the region from.</param>
            <param name="x">The top-left x-coordinate of the region within the texture.</param>
            <param name="y">The top-left y-coordinate of the region within the texture.</param>
            <param name="width">The width, in pixels, of the region.</param>
            <param name="height">The height, in pixels, of the region.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="texture"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            Thrown if <paramref name="texture"/> has been disposed prior.
            </exception>
        </member>
        <member name="M:MonoGame.Extended.Graphics.Texture2DRegion.#ctor(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Rectangle,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoGame.Extended.Graphics.Texture2DRegion"/> class with the specified region of the texture and
            name.
            </summary>
            <param name="texture">The texture to create the region from.</param>
            <param name="region">The region of the texture to use.</param>
            <param name="name">The name of the texture region.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="texture"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            Thrown if <paramref name="texture"/> has been disposed prior.
            </exception>
        </member>
        <member name="M:MonoGame.Extended.Graphics.Texture2DRegion.#ctor(Microsoft.Xna.Framework.Graphics.Texture2D,System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoGame.Extended.Graphics.Texture2DRegion"/> class with the specified region of the texture and
            name.
            </summary>
            <param name="texture">The texture to create the region from.</param>
            <param name="x">The top-left x-coordinate of the region within the texture.</param>
            <param name="y">The top-left y-coordinate of the region within the texture.</param>
            <param name="width">The width, in pixels, of the region.</param>
            <param name="height">The height, in pixels, of the region.</param>
            <param name="name">The name of the texture region.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="texture"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            Thrown if <paramref name="texture"/> has been disposed prior.
            </exception>
        </member>
        <member name="M:MonoGame.Extended.Graphics.Texture2DRegion.ToString">
            <inheritdoc/>
        </member>
        <member name="T:MonoGame.Extended.Graphics.Texture2DRegionExtensions">
            <summary>
            Provides extension methods for the <see cref="T:MonoGame.Extended.Graphics.Texture2DRegion"/> class.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Graphics.Texture2DRegionExtensions.GetSubregion(MonoGame.Extended.Graphics.Texture2DRegion,Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Gets a subregion of the specified texture region using the provided rectangle.
            </summary>
            <param name="textureRegion">The texture region to get the subregion from.</param>
            <param name="region">The rectangle defining the subregion.</param>
            <returns>A new <see cref="T:MonoGame.Extended.Graphics.Texture2DRegion"/> representing the specified subregion.</returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="textureRegion"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            Thrown if source texture of the <paramref name="textureRegion"/> has been disposed prior.
            </exception>
        </member>
        <member name="M:MonoGame.Extended.Graphics.Texture2DRegionExtensions.GetSubregion(MonoGame.Extended.Graphics.Texture2DRegion,System.String,Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Gets a subregion of the specified texture region using the provided rectangle and name.
            </summary>
            <param name="textureRegion">The texture region to get the subregion from.</param>
            <param name="region">The rectangle defining the subregion.</param>
            <param name="name">The name of the new subregion.</param>
            <returns>A new <see cref="T:MonoGame.Extended.Graphics.Texture2DRegion"/> representing the specified subregion.</returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="textureRegion"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            Thrown if source texture of the <paramref name="textureRegion"/> has been disposed prior.
            </exception>
        </member>
        <member name="M:MonoGame.Extended.Graphics.Texture2DRegionExtensions.GetSubregion(MonoGame.Extended.Graphics.Texture2DRegion,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets a subregion of the specified texture region using the provided coordinates and dimensions.
            </summary>
            <param name="textureRegion">The texture region to get the subregion from.</param>
            <param name="x">The top-left x-coordinate of the subregion within the texture region.</param>
            <param name="y">The top-left y-coordinate of the subregion within the texture region.</param>
            <param name="width">The width, in pixels, of the subregion.</param>
            <param name="height">The height, in pixels, of the subregion.</param>
            <returns>A new <see cref="T:MonoGame.Extended.Graphics.Texture2DRegion"/> representing the specified subregion.</returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="textureRegion"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            Thrown if source texture of the <paramref name="textureRegion"/> has been disposed prior.
            </exception>
        </member>
        <member name="M:MonoGame.Extended.Graphics.Texture2DRegionExtensions.GetSubregion(MonoGame.Extended.Graphics.Texture2DRegion,System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Gets a subregion of the specified texture region using the provided name, coordinates, and dimensions.
            </summary>
            <param name="textureRegion">The texture region to get the subregion from.</param>
            <param name="x">The top-left x-coordinate of the subregion within the texture region.</param>
            <param name="y">The top-left y-coordinate of the subregion within the texture region.</param>
            <param name="width">The width, in pixels, of the subregion.</param>
            <param name="height">The height, in pixels, of the subregion.</param>
            <param name="name">The name of the new subregion.</param>
            <returns>A new <see cref="T:MonoGame.Extended.Graphics.Texture2DRegion"/> representing the specified subregion.</returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="textureRegion"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            Thrown if source texture of the <paramref name="textureRegion"/> has been disposed prior.
            </exception>
        </member>
        <member name="M:MonoGame.Extended.Graphics.Texture2DRegionExtensions.CreateNinePatch(MonoGame.Extended.Graphics.Texture2DRegion,MonoGame.Extended.Thickness)">
            <summary>
            Creates a nine-patch from the specified texture region with the specified padding.
            </summary>
            <param name="textureRegion">The texture region to create the nine-patch from.</param>
            <param name="padding">The padding to apply to each side of the nine-patch.</param>
            <returns>A new <see cref="T:MonoGame.Extended.Graphics.NinePatch"/> representing the created nine-patch.</returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="textureRegion"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            Thrown if source texture of the <paramref name="textureRegion"/> has been disposed prior.
            </exception>
        </member>
        <member name="M:MonoGame.Extended.Graphics.Texture2DRegionExtensions.CreateNinePatch(MonoGame.Extended.Graphics.Texture2DRegion,System.Int32)">
            <summary>
            Creates a nine-patch from the specified texture region with uniform padding.
            </summary>
            <param name="textureRegion">The texture region to create the nine-patch from.</param>
            <param name="padding">The padding to apply uniformly to all sides of the nine-patch.</param>
            <returns>A new <see cref="T:MonoGame.Extended.Graphics.NinePatch"/> representing the created nine-patch.</returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="textureRegion"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            Thrown if source texture of the <paramref name="textureRegion"/> has been disposed prior.
            </exception>
        </member>
        <member name="M:MonoGame.Extended.Graphics.Texture2DRegionExtensions.CreateNinePatch(MonoGame.Extended.Graphics.Texture2DRegion,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a nine-patch from the specified texture region with non-uniform padding.
            </summary>
            <param name="textureRegion">The texture region to create the nine-patch from.</param>
            <param name="leftPadding">The padding on the left side of the nine-patch.</param>
            <param name="topPadding">The padding on the top side of the nine-patch.</param>
            <param name="rightPadding">The padding on the right side of the nine-patch.</param>
            <param name="bottomPadding">The padding on the bottom side of the nine-patch.</param>
            <returns>A new <see cref="T:MonoGame.Extended.Graphics.NinePatch"/> representing the created nine-patch.</returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="textureRegion"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            Thrown if source texture of the <paramref name="textureRegion"/> has been disposed prior.
            </exception>
        </member>
        <member name="T:MonoGame.Extended.HslColor">
            <summary>
            Represents a color in the HSL (Hue, Saturation, Lightness) color space.
            </summary>
            <remarks>
            <list type="bullet">
              <item>Hue (H) represents the color, ranging from 0 to 360 degrees on the color wheel.</item>
              <item>Saturation (S) represents the intensity of the color, ranging from 0.0 (gray) to 1.0 (full color).</item>
              <item>Lightness (L) represents the brightness, ranging from 0.0 (black) to 1.0 (white).</item>
            </list>
            </remarks>
        </member>
        <member name="P:MonoGame.Extended.HslColor.H">
            <summary>
            The hue component value (in degrees) of the color ranging from 0.0 to 360.0.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.HslColor.S">
            <summary>
            The saturation component value of the color ranging from 0.0 to 1.0.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.HslColor.L">
            <summary>
            The lightness component value of the color ranging from 0.0 to 1.0.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.HslColor.NormalizeHue(System.Single)">
            <summary>
            Normalizes a hue value to be within the range [0, 360).
            Handles negative values by wrapping them around.
            </summary>
            <param name="h">The hue value to normalize.</param>
            <returns>The normalized hue value.</returns>
        </member>
        <member name="M:MonoGame.Extended.HslColor.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoGame.Extended.HslColor"/> struct with the specified hue, saturation,
            and lightness component values.
            </summary>
            <param name="h">The hue component value (in degrees) from 0.0 to 360.0.</param>
            <param name="s">The saturation component value from 0.0 to 1.0.</param>
            <param name="l">The lightness component value from 0.0 to 1.0.</param>
        </member>
        <member name="M:MonoGame.Extended.HslColor.CopyTo(MonoGame.Extended.HslColor@)">
            <summary>
            Copies the values of this <see cref="T:MonoGame.Extended.HslColor"/> struct to a new instance.
            </summary>
            <param name="destination">When this method returns, contains a copy of this <see cref="T:MonoGame.Extended.HslColor"/>.</param>
        </member>
        <member name="M:MonoGame.Extended.HslColor.CopyToRef(MonoGame.Extended.HslColor@)">
            <summary>
            Copies the value of this <see cref="T:MonoGame.Extended.HslColor"/> struct to an existing destination.
            </summary>
            <param name="destination">A reference to the destination <see cref="T:MonoGame.Extended.HslColor"/> struct where values will be copied to.</param>
            <remarks>
            This method directly modifies the internal components of the destination struct for improved performance.
            Unlike typical operations on immutable structs, this method does not create a new instance but alters
            the existing one in-place. It should be used only in scenarios where performance is critical.
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.HslColor.Destructure(System.Single@,System.Single@,System.Single@)">
            <summary>
            Deconstructs this <see cref="T:MonoGame.Extended.HslColor"/>  into its hue, saturation, and lightness component values.
            </summary>
            <param name="h">When this method returns, contains the hue component value of this <see cref="T:MonoGame.Extended.HslColor"/>.</param>
            <param name="s">When this method returns, contains the saturation component value of this <see cref="T:MonoGame.Extended.HslColor"/>.</param>
            <param name="l">When this method returns, contains the lightness component value of this <see cref="T:MonoGame.Extended.HslColor"/>.</param>
        </member>
        <member name="M:MonoGame.Extended.HslColor.Deconstruct(System.Single@,System.Single@,System.Single@)">
            <summary>
            Deconstructs this <see cref="T:MonoGame.Extended.HslColor"/>  into its hue, saturation, and lightness component values.
            </summary>
            <param name="h">When this method returns, contains the hue component value of this <see cref="T:MonoGame.Extended.HslColor"/>.</param>
            <param name="s">When this method returns, contains the saturation component value of this <see cref="T:MonoGame.Extended.HslColor"/>.</param>
            <param name="l">When this method returns, contains the lightness component value of this <see cref="T:MonoGame.Extended.HslColor"/>.</param>
        </member>
        <member name="M:MonoGame.Extended.HslColor.Match(System.Action{System.Single,System.Single,System.Single})">
            <summary>
            Executes a callback with the components of this <see cref="T:MonoGame.Extended.HslColor"/>.
            </summary>
            <param name="callback">The callback to execute.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when <paramref name="callback"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:MonoGame.Extended.HslColor.Map``1(System.Func{System.Single,System.Single,System.Single,``0})">
            <summary>
            Maps the components of this <see cref="T:MonoGame.Extended.HslColor"/> to a new value using the specified mapping function.
            </summary>
            <typeparam name="T">The type of the result of the mapping function.</typeparam>
            <param name="map">The mapping function to apply to the components of this <see cref="T:MonoGame.Extended.HslColor"/>.</param>
            <returns>
            The result of applying the mapping function to the components of this <see cref="T:MonoGame.Extended.HslColor"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown when <paramref name="map"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:MonoGame.Extended.HslColor.op_Implicit(System.String)~MonoGame.Extended.HslColor">
            <summary>
            Implicitly converts a string to an <see cref="T:MonoGame.Extended.HslColor"/>.
            </summary>
            <param name="value">The string to convert.</param>
            <returns>The <see cref="T:MonoGame.Extended.HslColor"/> represented by the string.</returns>
        </member>
        <member name="M:MonoGame.Extended.HslColor.CompareTo(MonoGame.Extended.HslColor)">
             <inheritdoc/>
             <remarks>
             This comparison uses a weighted approach that establishes a hierarchy of importance among the HSL components:
            
             <list type="bullet">
               <item>Hue is the primary sorting factor (weighted by 100)</item>
               <item>Saturation is the secondary sorting factor (weighted by 10)</item>
               <item>Lightness is the tertiary sorting factor (weight of 1)</item>
             </list>
            
             This weighting ensures that differences in hue will dominate the comparison result, followed by
             saturation, and then lightness, creating a sorting order that aligns with the perceptual importance
             of each component in the HSL color space.
             </remarks>
        </member>
        <member name="M:MonoGame.Extended.HslColor.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:MonoGame.Extended.HslColor.Equals(MonoGame.Extended.HslColor)">
            <inheritdoc/>
        </member>
        <member name="M:MonoGame.Extended.HslColor.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:MonoGame.Extended.HslColor.ToString">
            <inheritdoc/>
        </member>
        <member name="M:MonoGame.Extended.HslColor.Parse(System.String)">
            <summary>
            Parses a string into an <see cref="T:MonoGame.Extended.HslColor"/>.
            </summary>
            <param name="s">The string to parse.</param>
            <returns>The <see cref="T:MonoGame.Extended.HslColor"/> represented by the string.</returns>
            <remarks>
            The input string should be in the format "hue,saturation,lightness", where hue is in degrees
            (optionally followed by the '°' symbol), and saturation and lightness are decimal values.
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.HslColor.op_Equality(MonoGame.Extended.HslColor,MonoGame.Extended.HslColor)">
            <summary>
            Determines whether two <see cref="T:MonoGame.Extended.HslColor"/> values are equal.
            </summary>
            <param name="x">The first <see cref="T:MonoGame.Extended.HslColor"/> to compare.</param>
            <param name="y">The second <see cref="T:MonoGame.Extended.HslColor"/> to compare.</param>
            <returns>
            <see langword="true"/> if the <see cref="T:MonoGame.Extended.HslColor"/> values are equal; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.HslColor.op_Inequality(MonoGame.Extended.HslColor,MonoGame.Extended.HslColor)">
            <summary>
            Determines whether two <see cref="T:MonoGame.Extended.HslColor"/> values are not equal.
            </summary>
            <param name="x">The first <see cref="T:MonoGame.Extended.HslColor"/> to compare.</param>
            <param name="y">The second <see cref="T:MonoGame.Extended.HslColor"/> to compare.</param>
            <returns>
            <see langword="true"/> if the <see cref="T:MonoGame.Extended.HslColor"/> values are not equal; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.HslColor.op_Addition(MonoGame.Extended.HslColor,MonoGame.Extended.HslColor)">
            <summary>
            Adds two <see cref="T:MonoGame.Extended.HslColor"/> values together.
            </summary>
            <param name="a">The first <see cref="T:MonoGame.Extended.HslColor"/> to add.</param>
            <param name="b">The second <see cref="T:MonoGame.Extended.HslColor"/> to add.</param>
            <returns>
            A new <see cref="T:MonoGame.Extended.HslColor"/> value where the hue, saturation, and light component values are the sum of
            the components of the two input colors.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.HslColor.op_Subtraction(MonoGame.Extended.HslColor,MonoGame.Extended.HslColor)">
            <summary>
            Subtracts one <see cref="T:MonoGame.Extended.HslColor"/> value from another.
            </summary>
            <param name="a">The <see cref="T:MonoGame.Extended.HslColor"/> to subtract from.</param>
            <param name="b">The <see cref="T:MonoGame.Extended.HslColor"/> to subtract.</param>
            <returns>
            A new <see cref="T:MonoGame.Extended.HslColor"/> value where the hue, saturation, and light component values are the difference
            of the components of the two input colors.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.HslColor.Lerp(MonoGame.Extended.HslColor,MonoGame.Extended.HslColor,System.Single)">
            <summary>
            Linearly interpolates between two <see cref="T:MonoGame.Extended.HslColor"/> values.
            </summary>
            <param name="c1">The first <see cref="T:MonoGame.Extended.HslColor"/>.</param>
            <param name="c2">The second <see cref="T:MonoGame.Extended.HslColor"/>.</param>
            <param name="t">The interpolation factor. A value of 0 returns <paramref name="c1"/>, a value of 1 returns <paramref name="c2"/>.</param>
            <returns>The interpolated <see cref="T:MonoGame.Extended.HslColor"/>.</returns>
        </member>
        <member name="M:MonoGame.Extended.HslColor.ToRgb(MonoGame.Extended.HslColor)">
            <summary>
            Convers a <see cref="T:MonoGame.Extended.HslColor"/> value to a <see cref="T:Microsoft.Xna.Framework.Color"/> value.
            </summary>
            <param name="hsl">The <see cref="T:MonoGame.Extended.HslColor"/> value to convert.</param>
            <returns>
            A <see cref="T:Microsoft.Xna.Framework.Color"/> value representing the RGB equivalent of the specified
            <see cref="T:MonoGame.Extended.HslColor"/> value.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.HslColor.FromRgb(Microsoft.Xna.Framework.Color)">
            <summary>
            Converts an RGB color to an HSL color.
            </summary>
            <param name="color">The RGB color to convert.</param>
            <returns>The equivalent HSL color.</returns>
        </member>
        <member name="T:MonoGame.Extended.IEquatableByRef`1">
            <summary>
                Defines a generalized method that a value type or class implements to create a type-specific method for
                determining equality of instances by reference.
            </summary>
            <typeparam name="T">The type of values or objects to compare.</typeparam>
        </member>
        <member name="M:MonoGame.Extended.IEquatableByRef`1.Equals(`0@)">
            <summary>
                Indicates whether the current value or object is equal to another value or object of the same type by
                reference.
            </summary>
            <returns>
                <c>true</c> if the current value or object is equal to the <paramref name="other" /> parameter; otherwise,
                <c>false</c>.
            </returns>
            <param name="other">A value or object to compare with this value or object.</param>
        </member>
        <member name="T:MonoGame.Extended.Input.ExtendedPlayerIndex">
            <summary>Player index enumeration with slots for 8 players</summary>
        </member>
        <member name="F:MonoGame.Extended.Input.ExtendedPlayerIndex.One">
            <summary>First player</summary>
        </member>
        <member name="F:MonoGame.Extended.Input.ExtendedPlayerIndex.Two">
            <summary>Second player</summary>
        </member>
        <member name="F:MonoGame.Extended.Input.ExtendedPlayerIndex.Three">
            <summary>Third player</summary>
        </member>
        <member name="F:MonoGame.Extended.Input.ExtendedPlayerIndex.Four">
            <summary>Fourth player</summary>
        </member>
        <member name="F:MonoGame.Extended.Input.ExtendedPlayerIndex.Five">
            <summary>Fifth player</summary>
        </member>
        <member name="F:MonoGame.Extended.Input.ExtendedPlayerIndex.Six">
            <summary>Sixth player</summary>
        </member>
        <member name="F:MonoGame.Extended.Input.ExtendedPlayerIndex.Seven">
            <summary>Seventh player</summary>
        </member>
        <member name="F:MonoGame.Extended.Input.ExtendedPlayerIndex.Eight">
            <summary>Eigth player</summary>
        </member>
        <member name="T:MonoGame.Extended.Input.InputListeners.GamePadEventArgs">
            <summary>
                This class contains all information resulting from events fired by
                <see cref="T:MonoGame.Extended.Input.InputListeners.GamePadListener" />.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Input.InputListeners.GamePadEventArgs.PlayerIndex">
            <summary>
                The index of the controller.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Input.InputListeners.GamePadEventArgs.PreviousState">
            <summary>
                The state of the controller in the previous update.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Input.InputListeners.GamePadEventArgs.CurrentState">
            <summary>
                The state of the controller in this update.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Input.InputListeners.GamePadEventArgs.Button">
            <summary>
                The button that triggered this event, if appliable.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Input.InputListeners.GamePadEventArgs.ElapsedTime">
            <summary>
                The time elapsed since last event.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Input.InputListeners.GamePadEventArgs.TriggerState">
            <summary>
                If a TriggerMoved event, displays the responsible trigger's position.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Input.InputListeners.GamePadEventArgs.ThumbStickState">
            <summary>
                If a ThumbStickMoved event, displays the responsible stick's position.
            </summary>
        </member>
        <member name="T:MonoGame.Extended.Input.InputListeners.GamePadListener">
            <summary>
                This is a listener that exposes several events for easier handling of gamepads.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Input.InputListeners.GamePadListener.CheckControllerConnections">
            <summary>
                If set to true, the static event <see cref="E:MonoGame.Extended.Input.InputListeners.GamePadListener.ControllerConnectionChanged" />
                will fire when any controller changes in connectivity status.
                <para>
                    This functionality requires that you have one actively updating
                    <see cref="!:InputListenerManager" />.
                </para>
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Input.InputListeners.GamePadListener.PlayerIndex">
            <summary>
                The index of the controller.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Input.InputListeners.GamePadListener.RepeatDelay">
            <summary>
                When a button is held down, the interval in which
                ButtonRepeated fires. Value in milliseconds.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Input.InputListeners.GamePadListener.RepeatInitialDelay">
            <summary>
                The amount of time a button has to be held down
                in order to fire ButtonRepeated the first time.
                Value in milliseconds.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Input.InputListeners.GamePadListener.VibrationEnabled">
            <summary>
                Whether vibration is enabled for this controller.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Input.InputListeners.GamePadListener.VibrationStrengthLeft">
            <summary>
                General setting for the strength of the left motor.
                This motor has a slow, deep, powerful rumble.
                <para>
                    This setting will modify all future vibrations
                    through this listener.
                </para>
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Input.InputListeners.GamePadListener.VibrationStrengthRight">
            <summary>
                General setting for the strength of the right motor.
                This motor has a snappy, quick, high-pitched rumble.
                <para>
                    This setting will modify all future vibrations
                    through this listener.
                </para>
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Input.InputListeners.GamePadListener.TriggerDeltaTreshold">
            <summary>
                The treshold of movement that has to be met in order
                for the listener to fire an event with the trigger's
                updated position.
                <para>
                    In essence this defines the event's
                    resolution.
                </para>
                At a value of 0 this will fire every time
                the trigger's position is not 0f.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Input.InputListeners.GamePadListener.ThumbStickDeltaTreshold">
            <summary>
                The treshold of movement that has to be met in order
                for the listener to fire an event with the thumbstick's
                updated position.
                <para>
                    In essence this defines the event's
                    resolution.
                </para>
                At a value of 0 this will fire every time
                the thumbstick's position is not {x:0, y:0}.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Input.InputListeners.GamePadListener.TriggerDownTreshold">
            <summary>
                How deep the triggers have to be depressed in order to
                register as a ButtonDown event.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Input.InputListeners.GamePadListener.ThumbstickDownTreshold">
            <summary>
                How deep the triggers have to be depressed in order to
                register as a ButtonDown event.
            </summary>
        </member>
        <member name="E:MonoGame.Extended.Input.InputListeners.GamePadListener.ControllerConnectionChanged">
            <summary>
                This event fires whenever a controller connects or disconnects.
                <para>
                    In order
                    for it to work, the <see cref="P:MonoGame.Extended.Input.InputListeners.GamePadListener.CheckControllerConnections" /> property must
                    be set to true.
                </para>
            </summary>
        </member>
        <member name="E:MonoGame.Extended.Input.InputListeners.GamePadListener.ButtonDown">
            <summary>
                This event fires whenever a button changes from the Up
                to the Down state.
            </summary>
        </member>
        <member name="E:MonoGame.Extended.Input.InputListeners.GamePadListener.ButtonUp">
            <summary>
                This event fires whenever a button changes from the Down
                to the Up state.
            </summary>
        </member>
        <member name="E:MonoGame.Extended.Input.InputListeners.GamePadListener.ButtonRepeated">
            <summary>
                This event fires repeatedly whenever a button is held sufficiently
                long. Use this for things like menu navigation.
            </summary>
        </member>
        <member name="E:MonoGame.Extended.Input.InputListeners.GamePadListener.ThumbStickMoved">
            <summary>
                This event fires whenever a thumbstick changes position.
                <para>
                    The parameter governing the sensitivity of this functionality
                    is <see cref="P:MonoGame.Extended.Input.InputListeners.GamePadListenerSettings.ThumbStickDeltaTreshold" />.
                </para>
            </summary>
        </member>
        <member name="E:MonoGame.Extended.Input.InputListeners.GamePadListener.TriggerMoved">
            <summary>
                This event fires whenever a trigger changes position.
                <para>
                    The parameter governing the sensitivity of this functionality
                    is <see cref="P:MonoGame.Extended.Input.InputListeners.GamePadListenerSettings.TriggerDeltaTreshold" />.
                </para>
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Input.InputListeners.GamePadListener.Vibrate(System.Int32,System.Single,System.Single)">
            <summary>
                Send a vibration command to the controller.
                Returns true if the operation succeeded.
                <para>
                    Motor values that are unset preserve
                    their current vibration strength and duration.
                </para>
                Note: Vibration currently only works on select platforms,
                like Monogame.Windows.
            </summary>
            <param name="durationMs">Duration of the vibration in milliseconds.</param>
            <param name="leftStrength">
                The strength of the left motor.
                This motor has a slow, deep, powerful rumble.
            </param>
            <param name="rightStrength">
                The strength of the right motor.
                This motor has a snappy, quick, high-pitched rumble.
            </param>
            <returns>Returns true if the operation succeeded.</returns>
        </member>
        <member name="T:MonoGame.Extended.Input.InputListeners.GamePadListenerSettings">
            <summary>
                This is a class that contains settings to be used to initialise a <see cref="T:MonoGame.Extended.Input.InputListeners.GamePadListener" />.
            </summary>
            <seealso cref="!:InputListenerManager" />
        </member>
        <member name="M:MonoGame.Extended.Input.InputListeners.GamePadListenerSettings.#ctor(Microsoft.Xna.Framework.PlayerIndex,System.Boolean,System.Single,System.Single)">
            <summary>
                This is a class that contains settings to be used to initialise a <see cref="T:MonoGame.Extended.Input.InputListeners.GamePadListener" />.
                <para>Note: There are a number of extra settings that are settable properties.</para>
            </summary>
            <param name="playerIndex">The index of the controller the listener will be tied to.</param>
            <param name="vibrationEnabled">Whether vibration is enabled on the controller.</param>
            <param name="vibrationStrengthLeft">
                General setting for the strength of the left motor.
                This motor has a slow, deep, powerful rumble.
                This setting will modify all future vibrations
                through this listener.
            </param>
            <param name="vibrationStrengthRight">
                General setting for the strength of the right motor.
                This motor has a snappy, quick, high-pitched rumble.
                This setting will modify all future vibrations
                through this listener.
            </param>
        </member>
        <member name="P:MonoGame.Extended.Input.InputListeners.GamePadListenerSettings.PlayerIndex">
            <summary>
                The index of the controller.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Input.InputListeners.GamePadListenerSettings.RepeatDelay">
            <summary>
                When a button is held down, the interval in which
                ButtonRepeated fires. Value in milliseconds.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Input.InputListeners.GamePadListenerSettings.RepeatInitialDelay">
            <summary>
                The amount of time a button has to be held down
                in order to fire ButtonRepeated the first time.
                Value in milliseconds.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Input.InputListeners.GamePadListenerSettings.VibrationEnabled">
            <summary>
                Whether vibration is enabled for this controller.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Input.InputListeners.GamePadListenerSettings.VibrationStrengthLeft">
            <summary>
                General setting for the strength of the left motor.
                This motor has a slow, deep, powerful rumble.
                <para>
                    This setting will modify all future vibrations
                    through this listener.
                </para>
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Input.InputListeners.GamePadListenerSettings.VibrationStrengthRight">
            <summary>
                General setting for the strength of the right motor.
                This motor has a snappy, quick, high-pitched rumble.
                <para>
                    This setting will modify all future vibrations
                    through this listener.
                </para>
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Input.InputListeners.GamePadListenerSettings.TriggerDeltaTreshold">
            <summary>
                The treshold of movement that has to be met in order
                for the listener to fire an event with the trigger's
                updated position.
                <para>
                    In essence this defines the event's
                    resolution.
                </para>
                At a value of 0 this will fire every time
                the trigger's position is not 0f.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Input.InputListeners.GamePadListenerSettings.ThumbStickDeltaTreshold">
            <summary>
                The treshold of movement that has to be met in order
                for the listener to fire an event with the thumbstick's
                updated position.
                <para>
                    In essence this defines the event's
                    resolution.
                </para>
                At a value of 0 this will fire every time
                the thumbstick's position is not {x:0, y:0}.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Input.InputListeners.GamePadListenerSettings.TriggerDownTreshold">
            <summary>
                How deep the triggers have to be depressed in order to
                register as a ButtonDown event.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Input.InputListeners.GamePadListenerSettings.ThumbstickDownTreshold">
            <summary>
                How deep the triggers have to be depressed in order to
                register as a ButtonDown event.
            </summary>
        </member>
        <member name="T:MonoGame.Extended.Input.InputListeners.MouseListener">
            <summary>
                Handles mouse input.
            </summary>
            <remarks>
                Due to nature of the listener, even when game is not in focus, listener will continue to be updated.
                To avoid that, manual pause of Update() method is required whenever game loses focus.
                To avoid having to do it manually, register listener to <see cref="T:MonoGame.Extended.Input.InputListeners.InputListenerComponent" />
            </remarks>
        </member>
        <member name="P:MonoGame.Extended.Input.InputListeners.MouseListener.HasMouseMoved">
            <summary>
                Returns true if the mouse has moved between the current and previous frames.
            </summary>
            <value><c>true</c> if the mouse has moved; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:MonoGame.Extended.Input.KeyboardExtended">
            <summary>
            Represents keyboard input.
            </summary>
            <remarks>
            This is an extended version of the default <see cref="T:Microsoft.Xna.Framework.Input.Keyboard"/> class
            which offers internal tracking of both the previous and current state of keyboard input.
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Input.KeyboardExtended.GetState">
            <summary>
            Gets the state of keyboard input.
            </summary>
            <returns>
            A <see cref="T:MonoGame.Extended.Input.KeyboardStateExtended"/> value that represents the state of keyboard input.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Input.KeyboardExtended.Update">
            <summary>
            Updates the <see cref="T:MonoGame.Extended.Input.KeyboardExtended"/>
            </summary>
            <remarks>
            This internally will overwrite the source data for the previous state with the current state, then get the
            current state from the keyboard input.  This should only be called once per update cycle.  Calling it more
            than once per update cycle can result in the cached previous state being overwritten with invalid data.
            </remarks>
        </member>
        <member name="T:MonoGame.Extended.Input.KeyboardStateExtended">
            <summary>
            Represents the state of keyboard input
            </summary>
            <remarks>
            This is an extended version of the base <see cref="T:Microsoft.Xna.Framework.Input.KeyboardState"/> struct
            that provides utility for checking the state differences between the previous and current state.
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Input.KeyboardStateExtended.#ctor(Microsoft.Xna.Framework.Input.KeyboardState,Microsoft.Xna.Framework.Input.KeyboardState)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoGame.Extended.Input.KeyboardStateExtended"/> value.
            </summary>
            <param name="currentKeyboardState">The state of keyboard input during the current update cycle.</param>
            <param name="previousKeyboardState">The state of keyboard input during the previous update cycle.</param>
        </member>
        <member name="P:MonoGame.Extended.Input.KeyboardStateExtended.CapsLock">
            <summary>
            Gets a value that indicates whether the caps lock key is down during the current state.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Input.KeyboardStateExtended.NumLock">
            <summary>
            Gets a value that indicates whether the num lock key is down during the current state.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Input.KeyboardStateExtended.IsShiftDown">
            <summary>
            Returns a value that indicates whether either the left or right shift key is down during the current state.
            </summary>
            <returns>
            <see langword="true"/> if either the left or right shift key is down during the current state; otherwise,
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Input.KeyboardStateExtended.IsControlDown">
            <summary>
            Returns a value that indicates whether either the left or right control key is down during the current
            state.
            </summary>
            <returns>
            <see langword="true"/> if either the left or right control key is down during the current state; otherwise,
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Input.KeyboardStateExtended.IsAltDown">
            <summary>
            Returns a value that indicates whether either the left or righ talt key is currently pressed down.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MonoGame.Extended.Input.KeyboardStateExtended.IsKeyDown(Microsoft.Xna.Framework.Input.Keys)">
            <summary>
            Returns a value that indicates if the specified key is down during the current state.
            </summary>
            <param name="key">The key to check.</param>
            <returns>
            <see langword="true"/> if the key is down during the current state; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Input.KeyboardStateExtended.IsKeyUp(Microsoft.Xna.Framework.Input.Keys)">
            <summary>
            Returns a value that indicates if the specified key is up during the current state.
            </summary>
            <param name="key">The key to check.</param>
            <returns>
            <see langword="true"/> if the key is up during the current state; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="P:MonoGame.Extended.Input.KeyboardStateExtended.GetPressedKeyCount">
            <summary>
            Returns the total number of keys down during the current state.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Input.KeyboardStateExtended.GetPressedKeys">
            <summary>
            Returns an array of all keys that are down during the current state.
            </summary>
            <returns>
            An array of <see cref="T:Microsoft.Xna.Framework.Input.Keys"/> values that represent each key that is down during the current state.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Input.KeyboardStateExtended.GetPressedKeys(Microsoft.Xna.Framework.Input.Keys[])">
            <summary>
            Fills an existing array with the keys pressed during the current state.
            </summary>
            <param name="keys">An existing array to fill with the pressed keys.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the <paramref name="keys"/> parameter is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the array provided by the <paramref name="keys"/> parameter is not large enough to fit all
            pressed keys.  Use <see cref="P:MonoGame.Extended.Input.KeyboardStateExtended.GetPressedKeyCount"/> to determine the total number of elements.
            </exception>
        </member>
        <member name="M:MonoGame.Extended.Input.KeyboardStateExtended.WasKeyReleased(Microsoft.Xna.Framework.Input.Keys)">
            <summary>
            Returns whether the given key was down during previous state, but is now up.
            </summary>
            <param name="key">The key to check.</param>
            <returns>
            <see langword="true"/> if the key was released this state-change, otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Input.KeyboardStateExtended.WasKeyPressed(Microsoft.Xna.Framework.Input.Keys)">
            <summary>
            Returns whether the given key was up during previous state, but is now down.
            </summary>
            <param name="key">The key to check.</param>
            <returns>
            <see langword="true"/> if the key was pressed this state-change, otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Input.KeyboardStateExtended.WasAnyKeyJustDown">
            <summary>
            Returns whether any key was pressed down on the previous state.
            </summary>
            <returns>
            <see langword="true"/> if any key was pressed during the previous state; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:MonoGame.Extended.Input.MouseExtended">
            <summary>
            Represents mouse input.
            </summary>
            <remarks>
            This si an extended version of the default <see cref="T:Microsoft.Xna.Framework.Input.Mouse"/> class which offers
            internal tracking of both the previous and current state of mouse input.
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Input.MouseExtended.GetState">
            <summary>
            Gets the state of mouse input.
            </summary>
            <returns>
            A <see cref="T:MonoGame.Extended.Input.MouseStateExtended"/> value that represents the state of mouse input.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Input.MouseExtended.Update">
            <summary>
            Updates the <see cref="T:MonoGame.Extended.Input.MouseExtended"/>.
            </summary>
            <remarks>
            This internally will overwrite the source data for the previous state with the current state, then get the
            current state from the mouse input.  This should only be called once per update cycle.  Calling it more than
            once per update cycle can result in the cached previous state being overwritten with invalid data.
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Input.MouseExtended.SetPosition(System.Int32,System.Int32)">
            <summary>
            Sets the position of the mouse cursor to the specified coordinates relative to the game window.
            </summary>
            <param name="x">The x-coordinate position.</param>
            <param name="y">The y-coordinate position.</param>
        </member>
        <member name="M:MonoGame.Extended.Input.MouseExtended.SetPosition(Microsoft.Xna.Framework.Point)">
            <summary>
            Sets the position of the mouse cursor to the specified coordinate relative to the game window.
            </summary>
            <param name="point">A <see cref="T:Microsoft.Xna.Framework.Point"/> value that represents the x- and y-coordinate positions.</param>
        </member>
        <member name="M:MonoGame.Extended.Input.MouseExtended.SetCursor(Microsoft.Xna.Framework.Input.MouseCursor)">
            <summary>
            Sets the cursor of the mouse.
            </summary>
            <param name="cursor">The cursor to use.</param>
        </member>
        <member name="P:MonoGame.Extended.Input.MouseExtended.WindowHandle">
            <summary>
            Gets or Sets the window handle of the mouse.
            </summary>
        </member>
        <member name="T:MonoGame.Extended.Input.MouseStateExtended">
            <summary>
            Represents the state of mouse input.
            </summary>
            <remarks>
            This is an extended version of the base <see cref="T:Microsoft.Xna.Framework.Input.MouseState"/> struct
            that provides utility for checking state differences between the previous and current state.
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Input.MouseStateExtended.#ctor(Microsoft.Xna.Framework.Input.MouseState,Microsoft.Xna.Framework.Input.MouseState)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoGame.Extended.Input.MouseStateExtended"/> value.
            </summary>
            <param name="currentMouseState">The state of mouse input during the current update cycle.</param>
            <param name="previousMouseState">THe state of mouse input during hte previous update cycle.</param>
        </member>
        <member name="P:MonoGame.Extended.Input.MouseStateExtended.X">
            <summary>
            Gets the current x-coordinate position of the mouse cursor relative to the game window.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Input.MouseStateExtended.Y">
            <summary>
            Gets the current y-coordinate position of the mouse cursor relative to the game window.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Input.MouseStateExtended.Position">
            <summary>
            Gets the current xy-coordinate position of the mouse cursor relative to the game window.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Input.MouseStateExtended.PositionChanged">
            <summary>
            Gets a value that indicates whether the position of the mouse cursor changes between the previous and current
            states.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Input.MouseStateExtended.DeltaX">
            <summary>
            Gets the difference in the x-coordinate position change of the mouse between the previous and current state.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Input.MouseStateExtended.DeltaY">
            <summary>
            Gets the difference in the y-coordinate position change of the mouse between the previous and current state.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Input.MouseStateExtended.DeltaPosition">
            <summary>
            Gets the difference in the xy-coordinate position change of the mouse between the previous and curren state.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Input.MouseStateExtended.ScrollWheelValue">
            <summary>
            Gets the current value of the mouse scroll wheel.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Input.MouseStateExtended.DeltaScrollWheelValue">
            <summary>
            Gets the difference in the mouse scroll wheel value between the previous and current state.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Input.MouseStateExtended.LeftButton">
            <summary>
            Gets the current state of the mouse left button.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Input.MouseStateExtended.MiddleButton">
            <summary>
            Gets the current state of the mouse middle button.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Input.MouseStateExtended.RightButton">
            <summary>
            Gets the current state of the mouse right button.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Input.MouseStateExtended.XButton1">
            <summary>
            Gets the current state of the first mouse extra button.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Input.MouseStateExtended.XButton2">
            <summary>
            Gets the current state of the second mouse extra button.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Input.MouseStateExtended.IsButtonDown(MonoGame.Extended.Input.MouseButton)">
            <summary>
            Returns a value that indicates whether the specified mouse button is down during the current state.
            </summary>
            <param name="button">The mouse button to check.</param>
            <returns>
            <see langword="true"/> if the mouse button is down during the current state; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Input.MouseStateExtended.IsButtonUp(MonoGame.Extended.Input.MouseButton)">
            <summary>
            Returns a value that indicates whether the specified mouse button is up during the current state.
            </summary>
            <param name="button">The mouse button to check.</param>
            <returns>
            <see langword="true"/> if the mouse button is up during the current state; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Input.MouseStateExtended.WasButtonPressed(MonoGame.Extended.Input.MouseButton)">
            <summary>
            Returns whether the specified mouse button was up during the previous, but is now down.
            </summary>
            <param name="button">The mouse button to check.</param>
            <returns>
            <see langword="true"/> if the mouse button was up pressed this state-change; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Input.MouseStateExtended.WasButtonReleased(MonoGame.Extended.Input.MouseButton)">
            <summary>
            Returns whether the specified mouse button was down during the previous state, but is now up.
            </summary>
            <param name="button">The mouse button to check.</param>
            <returns>
            <see langword="true"/> if the mouse button was released this state-change; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="F:MonoGame.Extended.MathExtended.MachineEpsilon">
            <summary>
            Represents the smallest positive value that can be added to 1.0 to produce a distinguishable result.
            This value is approximately 1.19209290e-7 and is useful for floating-point comparisons.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.MathExtended.CalculateMinimumVector2(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Calculates a new <see cref="T:Microsoft.Xna.Framework.Vector2"/> with the component-wise minimum values from two given
            <see cref="T:Microsoft.Xna.Framework.Vector2"/> values.
            </summary>
            <param name="first">The first Vector2 value.</param>
            <param name="second">The second Vector2 value.</param>
            <returns>
            The calculated <see cref="T:Microsoft.Xna.Framework.Vector2"/> value with the component-wise minimum values.</returns>
        </member>
        <member name="M:MonoGame.Extended.MathExtended.CalculateMinimumVector2(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            Calculates a new <see cref="T:Microsoft.Xna.Framework.Vector2"/> with the component-wise minimum values from two given
            <see cref="T:Microsoft.Xna.Framework.Vector2"/> values.
            </summary>
            <param name="first">The first Vector2 value.</param>
            <param name="second">The second Vector2 value.</param>
            <param name="result">
            When this method returns, contains the calculated <see cref="T:Microsoft.Xna.Framework.Vector2"/> value with the component-wise minimum
            values. This parameter is passed uninitialized.
            </param>
        </member>
        <member name="M:MonoGame.Extended.MathExtended.CalculateMaximumVector2(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Calculates a new <see cref="T:Microsoft.Xna.Framework.Vector2"/> with the component-wise minimum values from two given
            <see cref="T:Microsoft.Xna.Framework.Vector2"/> values.
            </summary>
            <param name="first">The first Vector2 value.</param>
            <param name="second">The second Vector2 value.</param>
            <returns>The calculated <see cref="T:Microsoft.Xna.Framework.Vector2"/> value with the component-wise maximum values.</returns>
        </member>
        <member name="M:MonoGame.Extended.MathExtended.CalculateMaximumVector2(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            Calculates a new <see cref="T:Microsoft.Xna.Framework.Vector2"/> with the component-wise  values from two given
            <see cref="T:Microsoft.Xna.Framework.Vector2"/> values.
            </summary>
            <param name="first">The first Vector2 value.</param>
            <param name="second">The second Vector2 value.</param>
            <param name="result">
            When this method returns, contains the calculated <see cref="T:Microsoft.Xna.Framework.Vector2"/> value with the component-wise maximum
            values. This parameter is passed uninitialized.
            </param>
        </member>
        <member name="T:MonoGame.Extended.BoundingRectangle">
            <summary>
                An axis-aligned, four sided, two dimensional box defined by a centre <see cref="T:Microsoft.Xna.Framework.Vector2" /> and a radii
                <see cref="T:Microsoft.Xna.Framework.Vector2" />.
            </summary>
            <remarks>
                <para>
                    An <see cref="T:MonoGame.Extended.BoundingRectangle" /> is categorized by having its faces oriented in such a way that its
                    face normals are at all times parallel with the axes of the given coordinate system.
                </para>
                <para>
                    The <see cref="T:MonoGame.Extended.BoundingRectangle" /> of a rotated <see cref="T:MonoGame.Extended.BoundingRectangle" /> will be equivalent or larger
                    in size
                    than the original depending on the angle of rotation.
                </para>
            </remarks>
            <seealso cref="T:System.IEquatable`1" />
            <seealso cref="T:MonoGame.Extended.IEquatableByRef`1" />
        </member>
        <member name="F:MonoGame.Extended.BoundingRectangle.Empty">
            <summary>
                The <see cref="T:MonoGame.Extended.BoundingRectangle" /> with <see cref="F:MonoGame.Extended.BoundingRectangle.Center" /> <see cref="P:Microsoft.Xna.Framework.Vector2.Zero"/> and
                <see cref="F:MonoGame.Extended.BoundingRectangle.HalfExtents" /> set to <see cref="P:Microsoft.Xna.Framework.Vector2.Zero"/>.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.BoundingRectangle.Center">
            <summary>
                The centre position of this <see cref="T:MonoGame.Extended.BoundingRectangle" />.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.BoundingRectangle.HalfExtents">
            <summary>
                The distance from the <see cref="F:MonoGame.Extended.BoundingRectangle.Center" /> point along both axes to any point on the boundary of this
                <see cref="T:MonoGame.Extended.BoundingRectangle" />.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.BoundingRectangle.#ctor(Microsoft.Xna.Framework.Vector2,MonoGame.Extended.SizeF)">
            <summary>
                Initializes a new instance of the <see cref="T:MonoGame.Extended.BoundingRectangle" /> structure from the specified centre
                <see cref="T:Microsoft.Xna.Framework.Vector2" /> and the radii <see cref="T:MonoGame.Extended.SizeF" />.
            </summary>
            <param name="center">The centre <see cref="T:Microsoft.Xna.Framework.Vector2" />.</param>
            <param name="halfExtents">The radii <see cref="T:Microsoft.Xna.Framework.Vector2" />.</param>
        </member>
        <member name="M:MonoGame.Extended.BoundingRectangle.CreateFrom(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,MonoGame.Extended.BoundingRectangle@)">
            <summary>
                Computes the <see cref="T:MonoGame.Extended.BoundingRectangle" /> from a minimum <see cref="T:Microsoft.Xna.Framework.Vector2" /> and maximum
                <see cref="T:Microsoft.Xna.Framework.Vector2" />.
            </summary>
            <param name="minimum">The minimum point.</param>
            <param name="maximum">The maximum point.</param>
            <param name="result">The resulting bounding rectangle.</param>
        </member>
        <member name="M:MonoGame.Extended.BoundingRectangle.CreateFrom(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
                Computes the <see cref="T:MonoGame.Extended.BoundingRectangle" /> from a minimum <see cref="T:Microsoft.Xna.Framework.Vector2" /> and maximum
                <see cref="T:Microsoft.Xna.Framework.Vector2" />.
            </summary>
            <param name="minimum">The minimum point.</param>
            <param name="maximum">The maximum point.</param>
            <returns>The resulting <see cref="T:MonoGame.Extended.BoundingRectangle" />.</returns>
        </member>
        <member name="M:MonoGame.Extended.BoundingRectangle.CreateFrom(System.Collections.Generic.IReadOnlyList{Microsoft.Xna.Framework.Vector2},MonoGame.Extended.BoundingRectangle@)">
            <summary>
                Computes the <see cref="T:MonoGame.Extended.BoundingRectangle" /> from a list of <see cref="T:Microsoft.Xna.Framework.Vector2" /> structures.
            </summary>
            <param name="points">The points.</param>
            <param name="result">The resulting bounding rectangle.</param>
        </member>
        <member name="M:MonoGame.Extended.BoundingRectangle.CreateFrom(System.Collections.Generic.IReadOnlyList{Microsoft.Xna.Framework.Vector2})">
            <summary>
                Computes the <see cref="T:MonoGame.Extended.BoundingRectangle" /> from a list of <see cref="T:Microsoft.Xna.Framework.Vector2" /> structures.
            </summary>
            <param name="points">The points.</param>
            <returns>The resulting <see cref="T:MonoGame.Extended.BoundingRectangle" />.</returns>
        </member>
        <member name="M:MonoGame.Extended.BoundingRectangle.Transform(MonoGame.Extended.BoundingRectangle@,MonoGame.Extended.Matrix3x2@,MonoGame.Extended.BoundingRectangle@)">
            <summary>
                Computes the <see cref="T:MonoGame.Extended.BoundingRectangle" /> from the specified <see cref="T:MonoGame.Extended.BoundingRectangle" /> transformed by
                the
                specified <see cref="T:MonoGame.Extended.Matrix3x2" />.
            </summary>
            <param name="boundingRectangle">The bounding rectangle.</param>
            <param name="transformMatrix">The transform matrix.</param>
            <param name="result">The resulting bounding rectangle.</param>
            <returns>
                The <see cref="T:MonoGame.Extended.BoundingRectangle" /> from the <paramref name="boundingRectangle" /> transformed by the
                <paramref name="transformMatrix" />.
            </returns>
            <remarks>
                <para>
                    If a transformed <see cref="T:MonoGame.Extended.BoundingRectangle" /> is used for <paramref name="boundingRectangle" /> then the
                    resulting <see cref="T:MonoGame.Extended.BoundingRectangle" /> will have the compounded transformation, which most likely is
                    not desired.
                </para>
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.BoundingRectangle.Transform(MonoGame.Extended.BoundingRectangle,MonoGame.Extended.Matrix3x2@)">
            <summary>
                Computes the <see cref="T:MonoGame.Extended.BoundingRectangle" /> from the specified <see cref="T:MonoGame.Extended.BoundingRectangle" /> transformed by
                the
                specified <see cref="T:MonoGame.Extended.Matrix3x2" />.
            </summary>
            <param name="boundingRectangle">The bounding rectangle.</param>
            <param name="transformMatrix">The transform matrix.</param>
            <returns>
                The <see cref="T:MonoGame.Extended.BoundingRectangle" /> from the <paramref name="boundingRectangle" /> transformed by the
                <paramref name="transformMatrix" />.
            </returns>
            <remarks>
                <para>
                    If a transformed <see cref="T:MonoGame.Extended.BoundingRectangle" /> is used for <paramref name="boundingRectangle" /> then the
                    resulting <see cref="T:MonoGame.Extended.BoundingRectangle" /> will have the compounded transformation, which most likely is
                    not desired.
                </para>
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.BoundingRectangle.Union(MonoGame.Extended.BoundingRectangle@,MonoGame.Extended.BoundingRectangle@,MonoGame.Extended.BoundingRectangle@)">
            <summary>
                Computes the <see cref="T:MonoGame.Extended.BoundingRectangle" /> that contains the two specified
                <see cref="T:MonoGame.Extended.BoundingRectangle" /> structures.
            </summary>
            <param name="first">The first bounding rectangle.</param>
            <param name="second">The second bounding rectangle.</param>
            <param name="result">The resulting bounding rectangle that contains both the <paramref name="first" /> and the
                <paramref name="second" />.</param>
        </member>
        <member name="M:MonoGame.Extended.BoundingRectangle.Union(MonoGame.Extended.BoundingRectangle,MonoGame.Extended.BoundingRectangle)">
            <summary>
                Computes the <see cref="T:MonoGame.Extended.BoundingRectangle" /> that contains the two specified
                <see cref="T:MonoGame.Extended.BoundingRectangle" /> structures.
            </summary>
            <param name="first">The first bounding rectangle.</param>
            <param name="second">The second bounding rectangle.</param>
            <returns>
                A <see cref="T:MonoGame.Extended.BoundingRectangle" /> that contains both the <paramref name="first" /> and the
                <paramref name="second" />.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.BoundingRectangle.Union(MonoGame.Extended.BoundingRectangle)">
            <summary>
                Computes the <see cref="T:MonoGame.Extended.BoundingRectangle" /> that contains both the specified
                <see cref="T:MonoGame.Extended.BoundingRectangle" /> and this <see cref="T:MonoGame.Extended.BoundingRectangle" />.
            </summary>
            <param name="boundingRectangle">The bounding rectangle.</param>
            <returns>
                A <see cref="T:MonoGame.Extended.BoundingRectangle" /> that contains both the <paramref name="boundingRectangle" /> and
                this
                <see cref="T:MonoGame.Extended.BoundingRectangle" />.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.BoundingRectangle.Intersection(MonoGame.Extended.BoundingRectangle@,MonoGame.Extended.BoundingRectangle@,MonoGame.Extended.BoundingRectangle@)">
            <summary>
                Computes the <see cref="T:MonoGame.Extended.BoundingRectangle" /> that is in common between the two specified
                <see cref="T:MonoGame.Extended.BoundingRectangle" /> structures.
            </summary>
            <param name="first">The first bounding rectangle.</param>
            <param name="second">The second bounding rectangle.</param>
            <param name="result">The resulting bounding rectangle that is in common between both the <paramref name="first" /> and
                the <paramref name="second" />, if they intersect; otherwise, <see cref="F:MonoGame.Extended.BoundingRectangle.Empty"/>.</param>
        </member>
        <member name="M:MonoGame.Extended.BoundingRectangle.Intersection(MonoGame.Extended.BoundingRectangle,MonoGame.Extended.BoundingRectangle)">
            <summary>
                Computes the <see cref="T:MonoGame.Extended.BoundingRectangle" /> that is in common between the two specified
                <see cref="T:MonoGame.Extended.BoundingRectangle" /> structures.
            </summary>
            <param name="first">The first bounding rectangle.</param>
            <param name="second">The second bounding rectangle.</param>
            <returns>
                A <see cref="T:MonoGame.Extended.BoundingRectangle" /> that is in common between both the <paramref name="first" /> and
                the <paramref name="second" />, if they intersect; otherwise, <see cref="F:MonoGame.Extended.BoundingRectangle.Empty"/>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.BoundingRectangle.Intersection(MonoGame.Extended.BoundingRectangle)">
            <summary>
                Computes the <see cref="T:MonoGame.Extended.BoundingRectangle" /> that is in common between the specified
                <see cref="T:MonoGame.Extended.BoundingRectangle" /> and this <see cref="T:MonoGame.Extended.BoundingRectangle" />.
            </summary>
            <param name="boundingRectangle">The bounding rectangle.</param>
            <returns>
                A <see cref="T:MonoGame.Extended.BoundingRectangle" /> that is in common between both the <paramref name="boundingRectangle" /> and
                this <see cref="T:MonoGame.Extended.BoundingRectangle"/>, if they intersect; otherwise, <see cref="F:MonoGame.Extended.BoundingRectangle.Empty"/>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.BoundingRectangle.Intersects(MonoGame.Extended.BoundingRectangle@,MonoGame.Extended.BoundingRectangle@)">
            <summary>
                Determines whether the two specified <see cref="T:MonoGame.Extended.BoundingRectangle" /> structures intersect.
            </summary>
            <param name="first">The first bounding rectangle.</param>
            <param name="second">The second bounding rectangle.</param>
            <returns>
                <c>true</c> if the <paramref name="first" /> intersects with the <see cref="!:second" />; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.BoundingRectangle.Intersects(MonoGame.Extended.BoundingRectangle,MonoGame.Extended.BoundingRectangle)">
            <summary>
                Determines whether the two specified <see cref="T:MonoGame.Extended.BoundingRectangle" /> structures intersect.
            </summary>
            <param name="first">The first bounding rectangle.</param>
            <param name="second">The second bounding rectangle.</param>
            <returns>
                <c>true</c> if the <paramref name="first" /> intersects with the <see cref="!:second" />; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.BoundingRectangle.Intersects(MonoGame.Extended.BoundingRectangle@)">
            <summary>
                Determines whether the specified <see cref="T:MonoGame.Extended.BoundingRectangle" /> intersects with this
                <see cref="T:MonoGame.Extended.BoundingRectangle" />.
            </summary>
            <param name="boundingRectangle">The bounding rectangle.</param>
            <returns>
                <c>true</c> if the <paramref name="boundingRectangle" /> intersects with this
                <see cref="T:MonoGame.Extended.BoundingRectangle" />; otherwise,
                <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.BoundingRectangle.Intersects(MonoGame.Extended.BoundingRectangle)">
            <summary>
                Determines whether the specified <see cref="T:MonoGame.Extended.BoundingRectangle" /> intersects with this
                <see cref="T:MonoGame.Extended.BoundingRectangle" />.
            </summary>
            <param name="boundingRectangle">The bounding rectangle.</param>
            <returns>
                <c>true</c> if the <paramref name="boundingRectangle" /> intersects with this
                <see cref="T:MonoGame.Extended.BoundingRectangle" />; otherwise,
                <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.BoundingRectangle.UpdateFromPoints(System.Collections.Generic.IReadOnlyList{Microsoft.Xna.Framework.Vector2})">
            <summary>
                Updates this <see cref="T:MonoGame.Extended.BoundingRectangle" /> from a list of <see cref="T:Microsoft.Xna.Framework.Vector2" /> structures.
            </summary>
            <param name="points">The points.</param>
        </member>
        <member name="M:MonoGame.Extended.BoundingRectangle.Contains(MonoGame.Extended.BoundingRectangle@,Microsoft.Xna.Framework.Vector2@)">
            <summary>
                Determines whether the specified <see cref="T:MonoGame.Extended.BoundingRectangle" /> contains the specified
                <see cref="T:Microsoft.Xna.Framework.Vector2" />.
            </summary>
            <param name="boundingRectangle">The bounding rectangle.</param>
            <param name="point">The point.</param>
            <returns>
                <c>true</c> if the <paramref name="boundingRectangle" /> contains the <paramref name="point" />; otherwise,
                <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.BoundingRectangle.Contains(MonoGame.Extended.BoundingRectangle,Microsoft.Xna.Framework.Vector2)">
            <summary>
                Determines whether the specified <see cref="T:MonoGame.Extended.BoundingRectangle" /> contains the specified
                <see cref="T:Microsoft.Xna.Framework.Vector2" />.
            </summary>
            <param name="boundingRectangle">The bounding rectangle.</param>
            <param name="point">The point.</param>
            <returns>
                <c>true</c> if the <paramref name="boundingRectangle" /> contains the <paramref name="point" />; otherwise,
                <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.BoundingRectangle.Contains(Microsoft.Xna.Framework.Vector2)">
            <summary>
                Determines whether this <see cref="T:MonoGame.Extended.BoundingRectangle" /> contains the specified <see cref="T:Microsoft.Xna.Framework.Vector2" />.
            </summary>
            <param name="point">The point.</param>
            <returns>
                <c>true</c> if this <see cref="T:MonoGame.Extended.BoundingRectangle" /> contains the <paramref name="point" />; otherwise,
                <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.BoundingRectangle.SquaredDistanceTo(Microsoft.Xna.Framework.Vector2)">
            <summary>
                Computes the squared distance from this <see cref="T:MonoGame.Extended.BoundingRectangle"/> to a <see cref="T:Microsoft.Xna.Framework.Vector2"/>.
            </summary>
            <param name="point">The point.</param>
            <returns>The squared distance from this <see cref="T:MonoGame.Extended.BoundingRectangle"/> to the <paramref name="point"/>.</returns>
        </member>
        <member name="M:MonoGame.Extended.BoundingRectangle.ClosestPointTo(Microsoft.Xna.Framework.Vector2)">
            <summary>
                Computes the closest <see cref="T:Microsoft.Xna.Framework.Vector2" /> on this <see cref="T:MonoGame.Extended.BoundingRectangle" /> to a specified
                <see cref="T:Microsoft.Xna.Framework.Vector2" />.
            </summary>
            <param name="point">The point.</param>
            <returns>The closest <see cref="T:Microsoft.Xna.Framework.Vector2" /> on this <see cref="T:MonoGame.Extended.BoundingRectangle" /> to the <paramref name="point" />.</returns>
        </member>
        <member name="M:MonoGame.Extended.BoundingRectangle.op_Equality(MonoGame.Extended.BoundingRectangle,MonoGame.Extended.BoundingRectangle)">
            <summary>
                Compares two <see cref="T:MonoGame.Extended.BoundingRectangle" /> structures. The result specifies whether the values of the
                <see cref="F:MonoGame.Extended.BoundingRectangle.Center" /> and <see cref="F:MonoGame.Extended.BoundingRectangle.HalfExtents" /> fields of the two <see cref="T:MonoGame.Extended.BoundingRectangle" /> structures
                are equal.
            </summary>
            <param name="first">The first bounding rectangle.</param>
            <param name="second">The second bounding rectangle.</param>
            <returns>
                <c>true</c> if the <see cref="F:MonoGame.Extended.BoundingRectangle.Center" /> and <see cref="F:MonoGame.Extended.BoundingRectangle.HalfExtents" /> fields of the two
                <see cref="T:MonoGame.Extended.BoundingRectangle" /> structures are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.BoundingRectangle.op_Inequality(MonoGame.Extended.BoundingRectangle,MonoGame.Extended.BoundingRectangle)">
            <summary>
                Compares two <see cref="T:MonoGame.Extended.BoundingRectangle" /> structures. The result specifies whether the values of the
                <see cref="F:MonoGame.Extended.BoundingRectangle.Center" /> and <see cref="F:MonoGame.Extended.BoundingRectangle.HalfExtents" /> fields of the two <see cref="T:MonoGame.Extended.BoundingRectangle" /> structures
                are unequal.
            </summary>
            <param name="first">The first bounding rectangle.</param>
            <param name="second">The second bounding rectangle.</param>
            <returns>
                <c>true</c> if the <see cref="F:MonoGame.Extended.BoundingRectangle.Center" /> and <see cref="F:MonoGame.Extended.BoundingRectangle.HalfExtents" /> fields of the two
                <see cref="T:MonoGame.Extended.BoundingRectangle" /> structures are unequal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.BoundingRectangle.Equals(MonoGame.Extended.BoundingRectangle)">
            <summary>
                Indicates whether this <see cref="T:MonoGame.Extended.BoundingRectangle" /> is equal to another
                <see cref="T:MonoGame.Extended.BoundingRectangle" />.
            </summary>
            <param name="boundingRectangle">The bounding rectangle.</param>
            <returns>
                <c>true</c> if this <see cref="T:MonoGame.Extended.BoundingRectangle" /> is equal to the <paramref name="boundingRectangle" />;
                otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.BoundingRectangle.Equals(MonoGame.Extended.BoundingRectangle@)">
            <summary>
                Indicates whether this <see cref="T:MonoGame.Extended.BoundingRectangle" /> is equal to another <see cref="T:MonoGame.Extended.BoundingRectangle" />.
            </summary>
            <param name="boundingRectangle">The bounding rectangle.</param>
            <returns>
                <c>true</c> if this <see cref="T:MonoGame.Extended.BoundingRectangle" /> is equal to the <paramref name="boundingRectangle" />;
                otherwise,
                <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.BoundingRectangle.Equals(System.Object)">
            <summary>
                Returns a value indicating whether this <see cref="T:MonoGame.Extended.BoundingRectangle" /> is equal to a specified object.
            </summary>
            <param name="obj">The object to make the comparison with.</param>
            <returns>
                <c>true</c> if this  <see cref="T:MonoGame.Extended.BoundingRectangle" /> is equal to <paramref name="obj" />; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.BoundingRectangle.GetHashCode">
            <summary>
                Returns a hash code of this <see cref="T:MonoGame.Extended.BoundingRectangle" /> suitable for use in hashing algorithms and data
                structures like a hash table.
            </summary>
            <returns>
                A hash code of this <see cref="T:MonoGame.Extended.BoundingRectangle" />.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.BoundingRectangle.op_Implicit(Microsoft.Xna.Framework.Rectangle)~MonoGame.Extended.BoundingRectangle">
            <summary>
                Performs an implicit conversion from a <see cref="T:Microsoft.Xna.Framework.Rectangle" /> to a <see cref="T:MonoGame.Extended.BoundingRectangle" />.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <returns>
                The resulting <see cref="T:MonoGame.Extended.BoundingRectangle" />.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.BoundingRectangle.op_Implicit(MonoGame.Extended.BoundingRectangle)~Microsoft.Xna.Framework.Rectangle">
            <summary>
                Performs an implicit conversion from a <see cref="T:MonoGame.Extended.BoundingRectangle" /> to a <see cref="T:Microsoft.Xna.Framework.Rectangle" />.
            </summary>
            <param name="boundingRectangle">The bounding rectangle.</param>
            <returns>
                The resulting <see cref="T:Microsoft.Xna.Framework.Rectangle" />.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.BoundingRectangle.op_Implicit(MonoGame.Extended.RectangleF)~MonoGame.Extended.BoundingRectangle">
            <summary>
                Performs an implicit conversion from a <see cref="T:MonoGame.Extended.RectangleF" /> to a <see cref="T:MonoGame.Extended.BoundingRectangle" />.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <returns>
                The resulting <see cref="T:MonoGame.Extended.BoundingRectangle" />.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.BoundingRectangle.op_Implicit(MonoGame.Extended.BoundingRectangle)~MonoGame.Extended.RectangleF">
            <summary>
                Performs an implicit conversion from a <see cref="T:MonoGame.Extended.BoundingRectangle" /> to a <see cref="T:MonoGame.Extended.RectangleF" />.
            </summary>
            <param name="boundingRectangle">The bounding rectangle.</param>
            <returns>
                The resulting <see cref="T:Microsoft.Xna.Framework.Rectangle" />.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.BoundingRectangle.ToString">
            <summary>
                Returns a <see cref="T:System.String" /> that represents this <see cref="T:MonoGame.Extended.BoundingRectangle" />.
            </summary>
            <returns>
                A <see cref="T:System.String" /> that represents this <see cref="T:MonoGame.Extended.BoundingRectangle" />.
            </returns>
        </member>
        <member name="T:MonoGame.Extended.CircleF">
            <summary>
                A two dimensional circle defined by a centre <see cref="T:Microsoft.Xna.Framework.Vector2" /> and a radius <see cref="T:System.Single" />.
            </summary>
            <remarks>
                <para>
                    An <see cref="T:MonoGame.Extended.CircleF" /> is categorized by the set of all points in a plane that are at equal distance from
                    the
                    centre.
                </para>
            </remarks>
            <seealso cref="T:System.IEquatable`1" />
            <seealso cref="T:MonoGame.Extended.IEquatableByRef`1" />
        </member>
        <member name="F:MonoGame.Extended.CircleF.Center">
            <summary>
                The centre position of this <see cref="T:MonoGame.Extended.CircleF" />.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.CircleF.Radius">
            <summary>
                The distance from the <see cref="F:MonoGame.Extended.CircleF.Center" /> point to any point on the boundary of this <see cref="T:MonoGame.Extended.CircleF" />.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.CircleF.Position">
            <summary>
            Gets or sets the position of the circle.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.CircleF.Diameter">
            <summary>
                Gets the distance from a point to the opposite point, both on the boundary of this <see cref="T:MonoGame.Extended.CircleF" />.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.CircleF.Circumference">
            <summary>
                Gets the distance around the boundary of this <see cref="T:MonoGame.Extended.CircleF" />.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.CircleF.#ctor(Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:MonoGame.Extended.CircleF" /> structure from the specified centre
                <see cref="T:Microsoft.Xna.Framework.Vector2" /> and the radius <see cref="T:System.Single" />.
            </summary>
            <param name="center">The centre point.</param>
            <param name="radius">The radius.</param>
        </member>
        <member name="M:MonoGame.Extended.CircleF.CreateFrom(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,MonoGame.Extended.CircleF@)">
            <summary>
                Computes the bounding <see cref="T:MonoGame.Extended.CircleF" /> from a minimum <see cref="T:Microsoft.Xna.Framework.Vector2" /> and maximum
                <see cref="T:Microsoft.Xna.Framework.Vector2" />.
            </summary>
            <param name="minimum">The minimum point.</param>
            <param name="maximum">The maximum point.</param>
            <param name="result">The resulting circle.</param>
        </member>
        <member name="M:MonoGame.Extended.CircleF.CreateFrom(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
                Computes the bounding <see cref="T:MonoGame.Extended.CircleF" /> from a minimum <see cref="T:Microsoft.Xna.Framework.Vector2" /> and maximum
                <see cref="T:Microsoft.Xna.Framework.Vector2" />.
            </summary>
            <param name="minimum">The minimum point.</param>
            <param name="maximum">The maximum point.</param>
            <returns>An <see cref="T:MonoGame.Extended.CircleF" />.</returns>
        </member>
        <member name="M:MonoGame.Extended.CircleF.CreateFrom(System.Collections.Generic.IReadOnlyList{Microsoft.Xna.Framework.Vector2},MonoGame.Extended.CircleF@)">
            <summary>
                Computes the bounding <see cref="T:MonoGame.Extended.CircleF" /> from a list of <see cref="T:Microsoft.Xna.Framework.Vector2" /> structures.
            </summary>
            <param name="points">The points.</param>
            <param name="result">The resulting circle.</param>
        </member>
        <member name="M:MonoGame.Extended.CircleF.CreateFrom(System.Collections.Generic.IReadOnlyList{Microsoft.Xna.Framework.Vector2})">
            <summary>
                Computes the bounding <see cref="T:MonoGame.Extended.CircleF" /> from a list of <see cref="T:Microsoft.Xna.Framework.Vector2" /> structures.
            </summary>
            <param name="points">The points.</param>
            <returns>An <see cref="T:MonoGame.Extended.CircleF" />.</returns>
        </member>
        <member name="M:MonoGame.Extended.CircleF.Intersects(MonoGame.Extended.CircleF@,MonoGame.Extended.CircleF@)">
            <summary>
                Determines whether the two specified <see cref="T:MonoGame.Extended.CircleF" /> structures intersect.
            </summary>
            <param name="first">The first circle.</param>
            <param name="second">The second circle.</param>
            <returns>
                <c>true</c> if the <paramref name="first" /> intersects with the <see cref="!:second" />; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.CircleF.Intersects(MonoGame.Extended.CircleF,MonoGame.Extended.CircleF)">
            <summary>
                Determines whether the two specified <see cref="T:MonoGame.Extended.CircleF" /> structures intersect.
            </summary>
            <param name="first">The first circle.</param>
            <param name="second">The second circle.</param>
            <returns>
                <c>true</c> if the <paramref name="first" /> intersects with the <see cref="!:second" />; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.CircleF.Intersects(MonoGame.Extended.CircleF@)">
            <summary>
                Determines whether the specified <see cref="T:MonoGame.Extended.CircleF" /> intersects with this <see cref="T:MonoGame.Extended.CircleF" />.
            </summary>
            <param name="circle">The circle.</param>
            <returns>
                <c>true</c> if the <paramref name="circle" /> intersects with this <see cref="T:MonoGame.Extended.CircleF" />; otherwise,
                <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.CircleF.Intersects(MonoGame.Extended.CircleF)">
            <summary>
                Determines whether the specified <see cref="T:MonoGame.Extended.CircleF" /> intersects with this <see cref="T:MonoGame.Extended.CircleF" />.
            </summary>
            <param name="circle">The circle.</param>
            <returns>
                <c>true</c> if the <paramref name="circle" /> intersects with this <see cref="T:MonoGame.Extended.CircleF" />; otherwise,
                <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.CircleF.Intersects(MonoGame.Extended.CircleF@,MonoGame.Extended.BoundingRectangle@)">
            <summary>
                Determines whether the specified <see cref="T:MonoGame.Extended.CircleF" /> and <see cref="P:MonoGame.Extended.CircleF.BoundingRectangle" /> structures intersect.
            </summary>
            <param name="circle">The circle.</param>
            <param name="rectangle">The rectangle.</param>
            <returns>
                <c>true</c> if the <paramref name="circle" /> intersects with the <see cref="!:rectangle" />; otherwise, <c>false</c>
                .
            </returns>
        </member>
        <member name="M:MonoGame.Extended.CircleF.Intersects(MonoGame.Extended.CircleF,MonoGame.Extended.BoundingRectangle)">
            <summary>
                Determines whether the specified <see cref="T:MonoGame.Extended.CircleF" /> and <see cref="P:MonoGame.Extended.CircleF.BoundingRectangle" /> structures intersect.
            </summary>
            <param name="circle">The circle.</param>
            <param name="rectangle">The rectangle.</param>
            <returns>
                <c>true</c> if the <paramref name="circle" /> intersects with the <see cref="!:rectangle" />; otherwise, <c>false</c>
                .
            </returns>
        </member>
        <member name="M:MonoGame.Extended.CircleF.Intersects(MonoGame.Extended.BoundingRectangle@)">
            <summary>
                Determines whether the specified <see cref="T:MonoGame.Extended.CircleF" /> intersects with this <see cref="P:MonoGame.Extended.CircleF.BoundingRectangle" />.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <returns>
                <c>true</c> if the <paramref name="rectangle" /> intersects with this <see cref="T:MonoGame.Extended.CircleF" />; otherwise,
                <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.CircleF.Intersects(MonoGame.Extended.BoundingRectangle)">
            <summary>
                Determines whether the specified <see cref="T:MonoGame.Extended.CircleF" /> intersects with this <see cref="P:MonoGame.Extended.CircleF.BoundingRectangle" />.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <returns>
                <c>true</c> if the <paramref name="rectangle" /> intersects with this <see cref="T:MonoGame.Extended.CircleF" />; otherwise,
                <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.CircleF.Contains(MonoGame.Extended.CircleF@,Microsoft.Xna.Framework.Vector2)">
            <summary>
                Determines whether the specified <see cref="T:MonoGame.Extended.CircleF" /> contains the specified
                <see cref="T:Microsoft.Xna.Framework.Vector2" />.
            </summary>
            <param name="circle">The circle.</param>
            <param name="point">The point.</param>
            <returns>
                <c>true</c> if the <paramref name="circle" /> contains the <paramref name="point" />; otherwise,
                <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.CircleF.Contains(MonoGame.Extended.CircleF,Microsoft.Xna.Framework.Vector2)">
            <summary>
                Determines whether the specified <see cref="T:MonoGame.Extended.CircleF" /> contains the specified
                <see cref="T:Microsoft.Xna.Framework.Vector2" />.
            </summary>
            <param name="circle">The circle.</param>
            <param name="point">The point.</param>
            <returns>
                <c>true</c> if the <paramref name="circle" /> contains the <paramref name="point" />; otherwise,
                <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.CircleF.Contains(Microsoft.Xna.Framework.Vector2)">
            <summary>
                Determines whether this <see cref="T:MonoGame.Extended.CircleF" /> contains the specified <see cref="T:Microsoft.Xna.Framework.Vector2" />.
            </summary>
            <param name="point">The point.</param>
            <returns>
                <c>true</c> if this <see cref="P:MonoGame.Extended.CircleF.BoundingRectangle" /> contains the <paramref name="point" />; otherwise,
                <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.CircleF.ClosestPointTo(Microsoft.Xna.Framework.Vector2)">
            <summary>
                Computes the closest <see cref="T:Microsoft.Xna.Framework.Vector2" /> on this <see cref="T:MonoGame.Extended.CircleF" /> to a specified
                <see cref="T:Microsoft.Xna.Framework.Vector2" />.
            </summary>
            <param name="point">The point.</param>
            <returns>The closest <see cref="T:Microsoft.Xna.Framework.Vector2" /> on this <see cref="T:MonoGame.Extended.CircleF" /> to the <paramref name="point" />.</returns>
        </member>
        <member name="M:MonoGame.Extended.CircleF.BoundaryPointAt(System.Single)">
            <summary>
                Computes the <see cref="T:Microsoft.Xna.Framework.Vector2" /> on the boundary of of this <see cref="T:MonoGame.Extended.CircleF" /> using the specified angle.
            </summary>
            <param name="angle">The angle in radians.</param>
            <returns>The <see cref="T:Microsoft.Xna.Framework.Vector2" /> on the boundary of this <see cref="T:MonoGame.Extended.CircleF" /> using <paramref name="angle" />.</returns>
        </member>
        <member name="M:MonoGame.Extended.CircleF.op_Equality(MonoGame.Extended.CircleF,MonoGame.Extended.CircleF)">
            <summary>
                Compares two <see cref="T:MonoGame.Extended.CircleF" /> structures. The result specifies whether the values of the
                <see cref="F:MonoGame.Extended.CircleF.Center" /> and <see cref="F:MonoGame.Extended.CircleF.Radius" /> fields of the two <see cref="T:MonoGame.Extended.CircleF" /> structures
                are equal.
            </summary>
            <param name="first">The first circle.</param>
            <param name="second">The second circle.</param>
            <returns>
                <c>true</c> if the <see cref="F:MonoGame.Extended.CircleF.Center" /> and <see cref="F:MonoGame.Extended.CircleF.Radius" /> fields of the two
                <see cref="P:MonoGame.Extended.CircleF.BoundingRectangle" /> structures are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.CircleF.op_Inequality(MonoGame.Extended.CircleF,MonoGame.Extended.CircleF)">
            <summary>
                Compares two <see cref="T:MonoGame.Extended.CircleF" /> structures. The result specifies whether the values of the
                <see cref="F:MonoGame.Extended.CircleF.Center" /> and <see cref="F:MonoGame.Extended.CircleF.Radius" /> fields of the two <see cref="T:MonoGame.Extended.CircleF" /> structures
                are unequal.
            </summary>
            <param name="first">The first circle.</param>
            <param name="second">The second circle.</param>
            <returns>
                <c>true</c> if the <see cref="F:MonoGame.Extended.CircleF.Center" /> and <see cref="F:MonoGame.Extended.CircleF.Radius" /> fields of the two
                <see cref="T:MonoGame.Extended.CircleF" /> structures are unequal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.CircleF.Equals(MonoGame.Extended.CircleF)">
            <summary>
                Indicates whether this <see cref="T:MonoGame.Extended.CircleF" /> is equal to another <see cref="T:MonoGame.Extended.CircleF" />.
            </summary>
            <param name="circle">The circle.</param>
            <returns>
                <c>true</c> if this <see cref="T:MonoGame.Extended.CircleF" /> is equal to the <paramref name="circle" />; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.CircleF.Equals(MonoGame.Extended.CircleF@)">
            <summary>
                Indicates whether this <see cref="T:MonoGame.Extended.CircleF" /> is equal to another <see cref="T:MonoGame.Extended.CircleF" />.
            </summary>
            <param name="circle">The bounding rectangle.</param>
            <returns>
                <c>true</c> if this <see cref="T:MonoGame.Extended.CircleF" /> is equal to the <paramref name="circle" />;
                otherwise,<c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.CircleF.Equals(System.Object)">
            <summary>
                Returns a value indicating whether this <see cref="T:MonoGame.Extended.CircleF" /> is equal to a specified object.
            </summary>
            <param name="obj">The object to make the comparison with.</param>
            <returns>
                <c>true</c> if this <see cref="T:MonoGame.Extended.CircleF" /> is equal to <paramref name="obj" />; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.CircleF.GetHashCode">
            <summary>
                Returns a hash code of this <see cref="T:MonoGame.Extended.CircleF" /> suitable for use in hashing algorithms and data
                structures like a hash table.
            </summary>
            <returns>
                A hash code of this <see cref="T:MonoGame.Extended.CircleF" />.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.CircleF.op_Explicit(MonoGame.Extended.CircleF)~Microsoft.Xna.Framework.Rectangle">
            <summary>
                Performs an explicit conversion from a <see cref="T:MonoGame.Extended.CircleF" /> to a <see cref="T:Microsoft.Xna.Framework.Rectangle" />.
            </summary>
            <param name="circle">The circle.</param>
            <returns>
                The resulting <see cref="T:Microsoft.Xna.Framework.Rectangle" />.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.CircleF.ToRectangle">
            <summary>
                Performs a conversion from a specified <see cref="T:MonoGame.Extended.CircleF" /> to a <see cref="T:Microsoft.Xna.Framework.Rectangle" />.
            </summary>
            <returns>
                The resulting <see cref="T:Microsoft.Xna.Framework.Rectangle" />.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.CircleF.op_Explicit(Microsoft.Xna.Framework.Rectangle)~MonoGame.Extended.CircleF">
            <summary>
                Performs an explicit conversion from a <see cref="T:Microsoft.Xna.Framework.Rectangle" /> to a <see cref="T:MonoGame.Extended.CircleF" />.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <returns>
                The resulting <see cref="T:MonoGame.Extended.CircleF" />.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.CircleF.op_Explicit(MonoGame.Extended.CircleF)~MonoGame.Extended.RectangleF">
            <summary>
                Performs an explicit conversion from a <see cref="T:MonoGame.Extended.CircleF" /> to a <see cref="T:MonoGame.Extended.RectangleF" />.
            </summary>
            <param name="circle">The circle.</param>
            <returns>
                The resulting <see cref="T:MonoGame.Extended.RectangleF" />.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.CircleF.ToRectangleF">
            <summary>
                Performs a conversion from a specified <see cref="T:MonoGame.Extended.CircleF" /> to a <see cref="T:MonoGame.Extended.RectangleF" />.
            </summary>
            <returns>
                The resulting <see cref="T:MonoGame.Extended.RectangleF" />.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.CircleF.op_Explicit(MonoGame.Extended.RectangleF)~MonoGame.Extended.CircleF">
            <summary>
                Performs an explicit conversion from a <see cref="T:MonoGame.Extended.RectangleF" /> to a <see cref="T:MonoGame.Extended.CircleF" />.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <returns>
                The resulting <see cref="T:MonoGame.Extended.CircleF" />.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.CircleF.ToString">
            <summary>
                Returns a <see cref="T:System.String" /> that represents this <see cref="T:MonoGame.Extended.CircleF" />.
            </summary>
            <returns>
                A <see cref="T:System.String" /> that represents this <see cref="T:MonoGame.Extended.CircleF" />.
            </returns>
        </member>
        <member name="T:MonoGame.Extended.FastRandom">
             <summary>
             Represents a pseudo-random number generator using a linear congruential generator algorithm.
             </summary>
             <remarks>
             <para>
                 This implementation uses the same constants as Microsoft Visual C++ rand() function:
            
                 a=214013
                 c=2531011
                 m=2^31
             </para>
             <para>
                 It provides high performance and speed, but comes at the price of having lower statistical quality, or true
                 'randomness' compared to modern algorithms.  The algorithm is deterministic based on the initial seed
                 value, making it suitable for reproducible sequences.
            </para>
            <para>
                 Note: This pseudo-random number generator exhibits noticeable patterns and should not be used for
                 cryptographic purposes or when a high-quality random distribution is critical.  Consider using
                 <see cref="T:System.Random"/> for better statistical properties.
             </para>
             </remarks>
        </member>
        <member name="P:MonoGame.Extended.FastRandom.Shared">
            <summary>
            Provides a thread-safe <see cref="T:MonoGame.Extended.FastRandom"/> instance that may be used concurrently from any thread.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.FastRandom.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MonoGame.Extended.FastRandom"/> class using the default seed value.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.FastRandom.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoGame.Extended.FastRandom"/> class using the specified seed value.
            </summary>
            <param name="seed">A number used to calculate a starting value for the pseudo-random number sequence.</param>
        </member>
        <member name="M:MonoGame.Extended.FastRandom.Next">
            <summary>
            Returns a non-negative random integer.
            </summary>
            <returns>A 32-bit signed integer that is greater than or equal to 0 and less than 32768.</returns>
        </member>
        <member name="M:MonoGame.Extended.FastRandom.Next(System.Int32)">
            <summary>
            Returns a non-negative random integer that is less than or equal to the specified maximum.
            </summary>
            <param name="max">The inclusive upper bound of the random number to be generated.</param>
            <returns>
            A 32-bit signed integer that is greater than or equal to 0 and less than or equal to <paramref name="max"/>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.FastRandom.Next(System.Int32,System.Int32)">
            <summary>
            Returns a random integer that is within a specified range.
            </summary>
            <param name="min">The inclusive lower bound of the random number returned.</param>
            <param name="max">The inclusive upper bound of the random number returned.</param>
            <returns>
            A 32-bit signed integer that is greater than or equal to <paramref name="min"/> and less than or equal to
            <paramref name="max"/>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.FastRandom.Next(MonoGame.Extended.Range{System.Int32})">
            <summary>
            Returns a random integer that is within a specified range.
            </summary>
            <param name="range">
            A range representing the inclusive lower and upper bound of the random number to return.
            </param>
            <returns>
            A 32-bit signed integer that is greater than or equal to the <see cref="P:MonoGame.Extended.Range`1.Min"/> and less than or
            equal to the <see cref="P:MonoGame.Extended.Range`1.Max"/> value of <paramref name="range"/>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.FastRandom.NextSingle">
            <summary>
            Returns a random floating-point number that is greater than or equal to 0.0 and less than 1.0.
            </summary>
            <returns>
            A single-precision floating point number that is greater than or equal to 0.0 and less than 1.0.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.FastRandom.NextSingle(System.Single)">
            <summary>
            Returns a random floating-point number that is greater than or equal to 0.0 and less than the
            specified maximum.
            </summary>
            <param name="max">The exclusive upper bond of the random number generated.</param>
            <returns>
            A single precision floating-point number that is greater than or equal to 0.0 and less than
            <paramref name="max"/>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.FastRandom.NextSingle(System.Single,System.Single)">
            <summary>
            Returns a random floating-point number that is within a specified range.
            </summary>
            <param name="min">The inclusive lower bound of the random number returned.</param>
            <param name="max">The exclusive upper bound of the random number returned.</param>
            <returns>
            A single-precision floating point number that is greater than or equal to <paramref name="min"/> and
            less than <paramref name="max"/>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.FastRandom.NextSingle(MonoGame.Extended.Range{System.Single})">
            <summary>
            Returns a random floating-point number that is within a specified range.
            </summary>
            <param name="range">
            A range representing the inclusive lower and exclusive upper bound of the random number returned.
            </param>
            <returns>
            A single-precision floating point number that is greater than or equal to the <see cref="P:MonoGame.Extended.Range`1.Min"/>
            and less than the <see cref="P:MonoGame.Extended.Range`1.Max"/> value of <paramref name="range"/>
            </returns>
        </member>
        <member name="M:MonoGame.Extended.FastRandom.NextAngle">
            <summary>
            Returns a random angle between -π and π.
            </summary>
            <returns>
            A random angle value in radians.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.FastRandom.NextUnitVector(Microsoft.Xna.Framework.Vector2@)">
            <summary>
            Gets a random unit vector.
            </summary>
            <param name="vector">When this method returns, contains a unit vector with a random direction.</param>
        </member>
        <member name="M:MonoGame.Extended.FastRandom.NextUnitVector(Microsoft.Xna.Framework.Vector2*)">
            <summary>
            Gets a random unit vector.
            </summary>
            <param name="vector">A pointer to the Vector2 where the random unit vector will be stored.</param>
        </member>
        <member name="T:MonoGame.Extended.Matrix3x2">
            <summary>
            Represents a 3x2 matrix using floating point values for each component that can store two dimensional translation,
            scale, and rotation information for a right-handed coordinate system.
            </summary>
            <remarks>
                <para>
                    Matrices use a row vector layout in the XNA / MonoGame Framework but, in general, matrices can be either
                    have a row vector or column vector layout. Row vector matrices view vectors as a row from left to right,
                    while column vector matrices view vectors as a column from top to bottom. For example, the
                    <see cref="P:MonoGame.Extended.Matrix3x2.Translation" /> corresponds to the fields <see cref="F:MonoGame.Extended.Matrix3x2.M31" /> and <see cref="F:MonoGame.Extended.Matrix3x2.M32" />.
                </para>
                <para>
                    The fields see <b>M13</b> and <b>M23</b> always have a value of <c>0.0f</c>, and thus are removed from
                    the <see cref="T:MonoGame.Extended.Matrix3x2" /> to reduce its memory footprint. Same is true for the field <b>M33</b>, except
                    it always has a value of <c>1.0f</c>.
                </para>
            </remarks>
        </member>
        <member name="F:MonoGame.Extended.Matrix3x2.M11">
            <summary>The first element of the first row.</summary>
            <remarks>Represents the scaling factor on the x-axis or a combination of scaling and rotation.</remarks>
        </member>
        <member name="F:MonoGame.Extended.Matrix3x2.M12">
            <summary>The second element of the first row.</summary>
            <remarks>Represents the shearing factor on the y-axis or a combination of shearing and rotation.</remarks>
        </member>
        <member name="F:MonoGame.Extended.Matrix3x2.M21">
            <summary>The first element of the second row.</summary>
            <remarks>Represents the shearing factor on the x-axis or a combination of shear and rotation.</remarks>
        </member>
        <member name="F:MonoGame.Extended.Matrix3x2.M22">
            <summary>The second element of the second row.</summary>
            <remarks>Represents the scaling factor on the y-axis or a combination of scale and rotation.</remarks>
        </member>
        <member name="F:MonoGame.Extended.Matrix3x2.M31">
            <summary>The first element of the third row.</summary>
            <remarks>Represents the translation on the x-axis</remarks>
        </member>
        <member name="F:MonoGame.Extended.Matrix3x2.M32">
            <summary>The second element of the third row.</summary>
            <remarks>Represents the translation on the y-axis</remarks>
        </member>
        <member name="P:MonoGame.Extended.Matrix3x2.X">
            <summary>
            Gets or Sets the vector formed by the first row of this <see cref="T:MonoGame.Extended.Matrix3x2"/>
            </summary>
            <remarks>
                <para>
                    The <see cref="F:Microsoft.Xna.Framework.Vector2.X"/> component of the vector represents the scaling factor on the x-axis or a
                    combination of scaling and rotation.
                </para>
                <para>
                    The <see cref="F:Microsoft.Xna.Framework.Vector2.Y"/> component of the vector represents the shearing factor on the y-axis or a
                    combination of shearing and rotation.
                </para>
            </remarks>
        </member>
        <member name="P:MonoGame.Extended.Matrix3x2.Y">
            <summary>
            Gets the vector formed by the second row of this <see cref="T:MonoGame.Extended.Matrix3x2"/>
            </summary>
            <remarks>
                <para>
                    The <see cref="F:Microsoft.Xna.Framework.Vector2.X"/> component of the vector represents the shearing factor on the x-axis or a
                    combination of shearing and rotation.
                </para>
                <para>
                    The <see cref="F:Microsoft.Xna.Framework.Vector2.Y"/> component of the vector represents the scaling factor on the y-axis or a
                    combination of scaling and rotation.
                </para>
            </remarks>
        </member>
        <member name="P:MonoGame.Extended.Matrix3x2.Z">
            <summary>
            Gets or Sets the vector formed by the third row of this <see cref="T:MonoGame.Extended.Matrix3x2"/>
            </summary>
            <remarks>
                <para>
                    The <see cref="F:Microsoft.Xna.Framework.Vector2.X"/> component of the vector represents the translation on the x-axis.
                </para>
                <para>
                    The <see cref="F:Microsoft.Xna.Framework.Vector2.Y"/> component of the vector represents the translation on the y-axis.
                </para>
            </remarks>
        </member>
        <member name="F:MonoGame.Extended.Matrix3x2.Identity">
            <summary>
            Gets the multiplicative identity matrix.
            </summary>
            <remarks>
                <para>The first row of the identity matrix is equal to <see cref="P:Microsoft.Xna.Framework.Vector2.UnitX"/></para>
                <para>The second row of the identity matrix is equal to <see cref="P:Microsoft.Xna.Framework.Vector2.UnitY"/></para>
                <para>The third row of the identity matrix is equal to <see cref="P:Microsoft.Xna.Framework.Vector2.Zero"/></para>
            </remarks>
        </member>
        <member name="P:MonoGame.Extended.Matrix3x2.Translation">
            <summary>
            Gets the translation component of this <see cref="T:MonoGame.Extended.Matrix3x2"/>.
            </summary>
            <remarks>
            The translation is equal to the third row vector <see cref="P:MonoGame.Extended.Matrix3x2.Z"/> composed of the <see cref="F:MonoGame.Extended.Matrix3x2.M31"/> and
            <see cref="F:MonoGame.Extended.Matrix3x2.M32"/> values.
            </remarks>
        </member>
        <member name="P:MonoGame.Extended.Matrix3x2.Rotation">
            <summary>
            Gets the rotation component of this <see cref="T:MonoGame.Extended.Matrix3x2"/>.
            </summary>
            <remarks>
            The rotation is equal to the arctangent of the <see cref="F:MonoGame.Extended.Matrix3x2.M21"/> and <see cref="F:MonoGame.Extended.Matrix3x2.M11"/>.
            <code>Math.Atan2(M21, M11);</code>
            </remarks>
        </member>
        <member name="P:MonoGame.Extended.Matrix3x2.Scale">
            <summary>
            Gets the scale component of this <see cref="T:MonoGame.Extended.Matrix3x2"/>.
            </summary>
            <remarks>
            The scale is equal to equal to the square root of the sum of the squares of matrix elements, with sign
            adjustment.
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Matrix3x2.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a 3x2 matrix from the specified components.
            </summary>
            <param name="m11">The value to assign to the first element of the first row.</param>
            <param name="m12">The value to assign to the second element of the first row.</param>
            <param name="m21">The value to assign to the first element of the second row.</param>
            <param name="m22">The value to assign to the second element of the second row.</param>
            <param name="m31">The value to assign to the first element of the third row.</param>
            <param name="m32">The value to assign to the second element of the third row.</param>
        </member>
        <member name="M:MonoGame.Extended.Matrix3x2.#ctor(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Creates a new 3x2 matrix from the specified components.
            </summary>
            <param name="x">The value to assign to the elements of the first row.</param>
            <param name="y">The value to assign to the elements of the second row.</param>
            <param name="z">The value to assign to the elements of the third row.</param>
        </member>
        <member name="M:MonoGame.Extended.Matrix3x2.Transform(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Transforms the given vector by this <see cref="T:MonoGame.Extended.Matrix3x2"/>
            </summary>
            <param name="vector">The vector to transform.</param>
            <returns>The result of the transformation.</returns>
        </member>
        <member name="M:MonoGame.Extended.Matrix3x2.Transform(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            Transforms the given vector by this <see cref="T:MonoGame.Extended.Matrix3x2"/>
            </summary>
            <param name="vector">The vector to transform.</param>
            <param name="result">
            When this method returns, contains the result of the transformation.  This parameter is passed uninitialized.
            </param>
        </member>
        <member name="M:MonoGame.Extended.Matrix3x2.Transform(System.Single@,System.Single@)">
            <summary>
            Transforms a vector with the specified x- and y-coordinate component values by this <see cref="T:MonoGame.Extended.Matrix3x2"/>
            </summary>
            <param name="x">The x-coordinate component value of the vector to transform.</param>
            <param name="y">The y-coordinate component value of the vector to transform.</param>
            <returns>The result of the transformation.</returns>
        </member>
        <member name="M:MonoGame.Extended.Matrix3x2.Transform(System.Single@,System.Single@,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            Transforms a vector with the specified x- and y-coordinate component values by this <see cref="T:MonoGame.Extended.Matrix3x2"/>
            </summary>
            <param name="x">The x-coordinate component value of the vector to transform.</param>
            <param name="y">The y-coordinate component value of the vector to transform.</param>
            <param name="result">
            When this method returns, contains the result of the transformation.  This parameter is passed uninitialized.
            </param>
        </member>
        <member name="M:MonoGame.Extended.Matrix3x2.Transform(System.Single@,System.Single@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Transforms a vector with the specified x- and y-coordinate component values by this <see cref="T:MonoGame.Extended.Matrix3x2"/>
            </summary>
            <param name="x">The x-coordinate component value of the vector to transform.</param>
            <param name="y">The y-coordinate component value of the vector to transform.</param>
            <param name="result">When this method returns, contains the result of the transformation.</param>
        </member>
        <member name="M:MonoGame.Extended.Matrix3x2.Determinant">
            <summary>
            Calculates the determinant of this <see cref="T:MonoGame.Extended.Matrix3x2"/>.
            </summary>
            <remarks>
            The determinant is calculated by expanding this matrix with a third column whose values are (0, 0, 1).
            </remarks>
            <returns>The determinant of this <see cref="T:MonoGame.Extended.Matrix3x2"/>.</returns>
        </member>
        <member name="M:MonoGame.Extended.Matrix3x2.Decompose(Microsoft.Xna.Framework.Vector2@,System.Single@,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            Deconstructs this <see cref="T:MonoGame.Extended.Matrix3x2"/> into its translation, rotation, and scale component representations.
            </summary>
            <param name="translation">
            When this method returns, contains the translation component of this <see cref="T:MonoGame.Extended.Matrix3x2"/>.  This parameter is
            passed uninitialized.
            </param>
            <param name="rotation">
            When this method returns, contains the rotation component of this <see cref="T:MonoGame.Extended.Matrix3x2"/>.  This parameter is
            passed uninitialized.
            </param>
            <param name="scale">
            When this method returns, contains the scale component of this <see cref="T:MonoGame.Extended.Matrix3x2"/>.  This parameter is
            passed uninitialized.
            </param>
        </member>
        <member name="M:MonoGame.Extended.Matrix3x2.CreateFrom(Microsoft.Xna.Framework.Vector2,System.Single@,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{Microsoft.Xna.Framework.Vector2})">
            <summary>
            Creates a new <see cref="T:MonoGame.Extended.Matrix3x2"/> value for 2D translation, rotation, and scale.
            </summary>
            <remarks>Rotation is performed along the z-axis.</remarks>
            <param name="position">The amount to translate the matrix by on the x- and y-axis.</param>
            <param name="rotation">The amount to rotate, in radians, the matrix along the z-axis. </param>
            <param name="scale">The amount to scale the matrix along the x- and y-axis.</param>
            <param name="origin">The origin point at which to scale and rotate the matrix around.</param>
            <returns>The resulting <see cref="T:MonoGame.Extended.Matrix3x2"/> value created by this method.</returns>
        </member>
        <member name="M:MonoGame.Extended.Matrix3x2.CreateFrom(Microsoft.Xna.Framework.Vector2,System.Single@,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{Microsoft.Xna.Framework.Vector2},MonoGame.Extended.Matrix3x2@)">
            <summary>
            Creates a new <see cref="T:MonoGame.Extended.Matrix3x2"/> value for 2D translation, rotation, and scale.
            </summary>
            <remarks>Rotation is performed along the z-axis.</remarks>
            <param name="position">The amount to translate the matrix by on the x- and y-axis.</param>
            <param name="rotation">The amount to rotate, in radians, the matrix along the z-axis. </param>
            <param name="scale">The amount to scale the matrix along the x- and y-axis.</param>
            <param name="origin">The origin point at which to scale and rotate the matrix around.</param>
            <param name="result">
            When this method returns, contains the resulting <see cref="T:MonoGame.Extended.Matrix3x2"/> value for 2D translation rotation, and
            scale.  This parameter is passed uninitialized.
            </param>
        </member>
        <member name="M:MonoGame.Extended.Matrix3x2.CreateRotationZ(System.Single@)">
            <summary>
             Creates a <see cref="T:MonoGame.Extended.Matrix3x2"/> value for 2D rotation.
            </summary>
            <remarks>Rotation is performed along the z-axis.</remarks>
            <param name="radians">The mount to rotate, in radians, the matrix along the z-axis.</param>
            <returns>The resulting <see cref="T:MonoGame.Extended.Matrix3x2"/> value created by this method.</returns>
        </member>
        <member name="M:MonoGame.Extended.Matrix3x2.CreateRotationZ(System.Single@,MonoGame.Extended.Matrix3x2@)">
            <summary>
             Creates a <see cref="T:MonoGame.Extended.Matrix3x2"/> value for 2D rotation.
            </summary>
            <remarks>Rotation is performed along the z-axis.</remarks>
            <param name="radians">The mount to rotate, in radians, the matrix along the z-axis.</param>
            <param name="result">
            When this method returns, contains the resulting <see cref="T:MonoGame.Extended.Matrix3x2"/> value for 2D rotation.  This parameter
            is passed uninitialized.
            </param>
        </member>
        <member name="M:MonoGame.Extended.Matrix3x2.CreateScale(System.Single@)">
            <summary>
             Creates a <see cref="T:MonoGame.Extended.Matrix3x2"/> value for 2D scaling.
            </summary>
            <param name="scale">The amount to scale the matrix along the x- and y-axis.</param>
            <returns>The <see cref="T:MonoGame.Extended.Matrix3x2"/> value created by this method.</returns>
        </member>
        <member name="M:MonoGame.Extended.Matrix3x2.CreateScale(System.Single@,MonoGame.Extended.Matrix3x2@)">
            <summary>
             Creates a <see cref="T:MonoGame.Extended.Matrix3x2"/> value for 2D scaling.
            </summary>
            <param name="scale">The amount to scale the matrix along the x- and y-axis.</param>
            <param name="result">
            When this method returns, contains the resulting <see cref="T:MonoGame.Extended.Matrix3x2"/> value for 2D scaling created.  This
            parameter is passed uninitialized.
            </param>
        </member>
        <member name="M:MonoGame.Extended.Matrix3x2.CreateScale(Microsoft.Xna.Framework.Vector2)">
            <summary>
             Creates a <see cref="T:MonoGame.Extended.Matrix3x2"/> value for 2D scaling.
            </summary>
            <param name="scale">A vector that represents the x- and y-axis scale factors.</param>
            <returns>The <see cref="T:MonoGame.Extended.Matrix3x2"/> value created by this method.</returns>
        </member>
        <member name="M:MonoGame.Extended.Matrix3x2.CreateScale(Microsoft.Xna.Framework.Vector2@,MonoGame.Extended.Matrix3x2@)">
            <summary>
             Creates a <see cref="T:MonoGame.Extended.Matrix3x2"/> value for 2D scaling.
            </summary>
            <param name="scale">A vector that represents the x- and y-axis scale factors.</param>
            <param name="result">
            When this method returns, contains the resulting <see cref="T:MonoGame.Extended.Matrix3x2"/> value for 2D scaling.  This parameter
            is passed uninitialized.
            </param>
        </member>
        <member name="M:MonoGame.Extended.Matrix3x2.CreateScale(System.Single@,System.Single@)">
            <summary>
             Creates a <see cref="T:MonoGame.Extended.Matrix3x2"/> value for 2D scaling.
            </summary>
            <param name="xScale">The scale factor for the x-axis.</param>
            <param name="yScale">The scale factor for the y-axis.</param>
            <returns>The <see cref="T:MonoGame.Extended.Matrix3x2"/> value created by this method.</returns>
        </member>
        <member name="M:MonoGame.Extended.Matrix3x2.CreateScale(System.Single@,System.Single@,MonoGame.Extended.Matrix3x2@)">
            <summary>
             Creates a <see cref="T:MonoGame.Extended.Matrix3x2"/> value for 2D scaling.
            </summary>
            <param name="xScale">The scale factor for the x-axis.</param>
            <param name="yScale">The scale factor for the y-axis.</param>
            <param name="result">
            When this method returns, contains the resulting <see cref="T:MonoGame.Extended.Matrix3x2"/> value for 2D scaling.  This parameter
            is passed uninitialized.
            </param>
        </member>
        <member name="M:MonoGame.Extended.Matrix3x2.CreateTranslation(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Creates a <see cref="T:MonoGame.Extended.Matrix3x2"/> value for 2D translation.
            </summary>
            <param name="vector">The translation vector</param>
            <returns>The resulting <see cref="T:MonoGame.Extended.Matrix3x2"/> value for 2D translation.</returns>
        </member>
        <member name="M:MonoGame.Extended.Matrix3x2.CreateTranslation(Microsoft.Xna.Framework.Vector2,MonoGame.Extended.Matrix3x2@)">
            <summary>
            Creates a <see cref="T:MonoGame.Extended.Matrix3x2"/> for 2D translation.
            </summary>
            <param name="vector">The translation vector</param>
            <param name="result">
            When this method returns, contains the resulting <see cref="T:MonoGame.Extended.Matrix3x2"/> value for 2D translation.  This
            parameter is passed uninitialized.
            </param>
        </member>
        <member name="M:MonoGame.Extended.Matrix3x2.CreateTranslation(System.Single@,System.Single@)">
            <summary>
            Creates a <see cref="T:MonoGame.Extended.Matrix3x2"/> value for 2D translation.
            </summary>
            <param name="x">The X-coordinate of the translation vector.</param>
            <param name="y">The Y-coordinate of the translation vector.</param>
            <returns>The resulting <see cref="T:MonoGame.Extended.Matrix3x2"/> value for 2D translation.</returns>
        </member>
        <member name="M:MonoGame.Extended.Matrix3x2.CreateTranslation(System.Single@,System.Single@,MonoGame.Extended.Matrix3x2@)">
            <summary>
            Creates a <see cref="T:MonoGame.Extended.Matrix3x2"/> value for 2D translation.
            </summary>
            <param name="x">The X-coordinate of the translation vector.</param>
            <param name="y">The Y-coordinate of the translation vector.</param>
            <param name="result">
            When this method returns, contains the resulting <see cref="T:MonoGame.Extended.Matrix3x2"/> value.  This parameter is passed
            uninitialized.
            </param>
        </member>
        <member name="M:MonoGame.Extended.Matrix3x2.Invert(MonoGame.Extended.Matrix3x2)">
            <summary>
            Inverts the provided <see cref="T:MonoGame.Extended.Matrix3x2"/>
            </summary>
            <param name="matrix">The <see cref="T:MonoGame.Extended.Matrix3x2"/> value to invert.</param>
            <returns>The result of inverting the <paramref name="matrix"/>.</returns>
        </member>
        <member name="M:MonoGame.Extended.Matrix3x2.Invert(MonoGame.Extended.Matrix3x2@)">
            <summary>
            Inverts the provided <see cref="T:MonoGame.Extended.Matrix3x2"/> value.
            </summary>
            <param name="matrix">The <see cref="T:MonoGame.Extended.Matrix3x2"/> value to invert.</param>
        </member>
        <member name="M:MonoGame.Extended.Matrix3x2.Add(MonoGame.Extended.Matrix3x2,MonoGame.Extended.Matrix3x2)">
            <summary>
            Adds the elements of two <see cref="T:MonoGame.Extended.Matrix3x2"/> values.
            </summary>
            <remarks>
            This operation is performed component-wise.
            </remarks>
            <param name="left">The first <see cref="T:MonoGame.Extended.Matrix3x2"/> value.</param>
            <param name="right">The second <see cref="T:MonoGame.Extended.Matrix3x2"/> value.</param>
            <returns>The result of the addition.</returns>
        </member>
        <member name="M:MonoGame.Extended.Matrix3x2.Add(MonoGame.Extended.Matrix3x2,MonoGame.Extended.Matrix3x2,MonoGame.Extended.Matrix3x2@)">
            <summary>
            Adds the elements of two <see cref="T:MonoGame.Extended.Matrix3x2"/> values.
            </summary>
            <remarks>
            This operation is performed component-wise.
            </remarks>
            <param name="left">The first <see cref="T:MonoGame.Extended.Matrix3x2"/> value.</param>
            <param name="right">The second <see cref="T:MonoGame.Extended.Matrix3x2"/> value.</param>
            <param name="result">
            When this method returns, contains the result of the addition.  This parameter is passed uninitialized.
            </param>
        </member>
        <member name="M:MonoGame.Extended.Matrix3x2.Subtract(MonoGame.Extended.Matrix3x2,MonoGame.Extended.Matrix3x2)">
            <summary>
            Subtracts the elements of a <see cref="T:MonoGame.Extended.Matrix3x2"/> from the corresponding elements of another
            <see cref="T:MonoGame.Extended.Matrix3x2"/>.
            </summary>
            <remarks>
            This operation is performed component-wise.
            </remarks>
            <param name="left">The first <see cref="T:MonoGame.Extended.Matrix3x2"/> value.</param>
            <param name="right">The second <see cref="T:MonoGame.Extended.Matrix3x2"/> value.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:MonoGame.Extended.Matrix3x2.Subtract(MonoGame.Extended.Matrix3x2,MonoGame.Extended.Matrix3x2,MonoGame.Extended.Matrix3x2@)">
            <summary>
            Subtracts the elements of a <see cref="T:MonoGame.Extended.Matrix3x2"/> from the corresponding elements of another
            <see cref="T:MonoGame.Extended.Matrix3x2"/>.
            </summary>
            <remarks>
            This operation is performed component-wise.
            </remarks>
            <param name="left">The first <see cref="T:MonoGame.Extended.Matrix3x2"/> value.</param>
            <param name="right">The second <see cref="T:MonoGame.Extended.Matrix3x2"/> value.</param>
            <param name="result">
            When this method returns, contains the result of the subtraction.  This method is passed uninitialized.
            </param>
        </member>
        <member name="M:MonoGame.Extended.Matrix3x2.Multiply(MonoGame.Extended.Matrix3x2,MonoGame.Extended.Matrix3x2)">
            <summary>
            Multiplies the elements of a <see cref="T:MonoGame.Extended.Matrix3x2"/> by the elements of another <see cref="T:MonoGame.Extended.Matrix3x2"/>.
            </summary>
            <remarks>
            This operation performs matrix multiplication.
            </remarks>
            <param name="left">The first <see cref="T:MonoGame.Extended.Matrix3x2"/> value.</param>
            <param name="right">The second <see cref="T:MonoGame.Extended.Matrix3x2"/> value.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:MonoGame.Extended.Matrix3x2.Multiply(MonoGame.Extended.Matrix3x2,MonoGame.Extended.Matrix3x2,MonoGame.Extended.Matrix3x2@)">
            <summary>
            Multiplies the elements of a <see cref="T:MonoGame.Extended.Matrix3x2"/> by the elements of another <see cref="T:MonoGame.Extended.Matrix3x2"/>.
            </summary>
            <remarks>
            This operation performs matrix multiplication.
            </remarks>
            <param name="left">The first <see cref="T:MonoGame.Extended.Matrix3x2"/> value.</param>
            <param name="right">The second <see cref="T:MonoGame.Extended.Matrix3x2"/> value.</param>
            <param name="result">
            When this method returns, contains the result of the multiplication.  This parameter is passed uninitialized.
            </param>
        </member>
        <member name="M:MonoGame.Extended.Matrix3x2.Multiply(MonoGame.Extended.Matrix3x2@,MonoGame.Extended.Matrix3x2@,MonoGame.Extended.Matrix3x2@)">
            <summary>
            Multiplies the elements of a <see cref="T:MonoGame.Extended.Matrix3x2"/> by the elements of another <see cref="T:MonoGame.Extended.Matrix3x2"/>.
            </summary>
            <remarks>
            This operation performs matrix multiplication.
            </remarks>
            <param name="left">The first <see cref="T:MonoGame.Extended.Matrix3x2"/> value.</param>
            <param name="right">The second <see cref="T:MonoGame.Extended.Matrix3x2"/> value.</param>
            <param name="result">
            When this method returns, contains the result of the multiplication.  This parameter is passed uninitialized.
            </param>
        </member>
        <member name="M:MonoGame.Extended.Matrix3x2.Multiply(MonoGame.Extended.Matrix3x2,System.Single@)">
            <summary>
            Multiplies the elements of a <see cref="T:MonoGame.Extended.Matrix3x2"/> by a scalar value.
            </summary>
            <remarks>
            This operation is performed component-wise.
            </remarks>
            <param name="matrix">The source <see cref="T:MonoGame.Extended.Matrix3x2"/>.</param>
            <param name="scalar">The scalar value.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:MonoGame.Extended.Matrix3x2.Multiply(MonoGame.Extended.Matrix3x2,System.Single@,MonoGame.Extended.Matrix3x2@)">
            <summary>
            Multiplies the elements of a <see cref="T:MonoGame.Extended.Matrix3x2"/> by a scalar value.
            </summary>
            <remarks>
            This operation is performed component-wise.
            </remarks>
            <param name="matrix">The source <see cref="T:MonoGame.Extended.Matrix3x2"/>.</param>
            <param name="scalar">The scalar value.</param>
            <param name="result">
            When this method returns, contains the result of the multiplication.  This parameter is passed uninitialized.
            </param>
        </member>
        <member name="M:MonoGame.Extended.Matrix3x2.Divide(MonoGame.Extended.Matrix3x2,MonoGame.Extended.Matrix3x2)">
            <summary>
            Divides the elements of a <see cref="T:MonoGame.Extended.Matrix3x2"/> by the elements of another <see cref="T:MonoGame.Extended.Matrix3x2"/>.
            </summary>
            <remarks>
            This operation is performed component-wise.
            </remarks>
            <param name="left">The first <see cref="T:MonoGame.Extended.Matrix3x2"/> value.</param>
            <param name="right">The second <see cref="T:MonoGame.Extended.Matrix3x2"/> value.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:MonoGame.Extended.Matrix3x2.Divide(MonoGame.Extended.Matrix3x2,MonoGame.Extended.Matrix3x2,MonoGame.Extended.Matrix3x2@)">
            <summary>
            Divides the elements of a <see cref="T:MonoGame.Extended.Matrix3x2"/> by the elements of another <see cref="T:MonoGame.Extended.Matrix3x2"/>.
            </summary>
            <remarks>
            This operation is performed component-wise.
            </remarks>
            <param name="left">The first <see cref="T:MonoGame.Extended.Matrix3x2"/> value.</param>
            <param name="right">The second <see cref="T:MonoGame.Extended.Matrix3x2"/> value.</param>
            <param name="result">
            When this method returns, contains the result of the division.  This parameter is passed uninitialized.
            </param>
        </member>
        <member name="M:MonoGame.Extended.Matrix3x2.Divide(MonoGame.Extended.Matrix3x2,System.Single@)">
            <summary>
            Divides the elements of a <see cref="T:MonoGame.Extended.Matrix3x2"/> by a scalar value.
            </summary>
            <remarks>
            This operation is performed component-wise.
            </remarks>
            <param name="matrix">The source <see cref="T:MonoGame.Extended.Matrix3x2"/>.</param>
            <param name="scalar">The scalar value.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:MonoGame.Extended.Matrix3x2.Divide(MonoGame.Extended.Matrix3x2,System.Single@,MonoGame.Extended.Matrix3x2@)">
            <summary>
            Divides the elements of a <see cref="T:MonoGame.Extended.Matrix3x2"/> by a scalar value.
            </summary>
            <remarks>
            This operation is performed component-wise.
            </remarks>
            <param name="matrix">The source <see cref="T:MonoGame.Extended.Matrix3x2"/>.</param>
            <param name="scalar">The scalar value.</param>
            <param name="result">
            When this method returns, contains the result of the division.  This parameter is passed uninitialized.
            </param>
        </member>
        <member name="M:MonoGame.Extended.Matrix3x2.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:MonoGame.Extended.Matrix3x2.Equals(MonoGame.Extended.Matrix3x2)">
            <inheritdoc />
        </member>
        <member name="M:MonoGame.Extended.Matrix3x2.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:MonoGame.Extended.Matrix3x2.ToMatrix">
            <summary>
            Converts the specified <see cref="T:MonoGame.Extended.Matrix3x2"/> value into a <see cref="T:Microsoft.Xna.Framework.Matrix"/> value.
            </summary>
            <remarks>
            The third row of the resulting <see cref="T:Microsoft.Xna.Framework.Matrix"/> is set to (0, 0, 1, 0), and the fourth row is set to
            (<see cref="F:MonoGame.Extended.Matrix3x2.M31"/>, <see cref="F:MonoGame.Extended.Matrix3x2.M32"/>, 0, 1).
            </remarks>
            <returns>The resulting <see cref="T:Microsoft.Xna.Framework.Matrix"/> value.</returns>
        </member>
        <member name="M:MonoGame.Extended.Matrix3x2.ToMatrix(System.Single@)">
            <summary>
            Converts the specified <see cref="T:MonoGame.Extended.Matrix3x2"/> value into a <see cref="T:Microsoft.Xna.Framework.Matrix"/> value.
            </summary>
            <remarks>
            The third row of the resulting <see cref="T:Microsoft.Xna.Framework.Matrix"/> is set to (0, 0, 1, 0), and the fourth row is set to
            (<see cref="F:MonoGame.Extended.Matrix3x2.M31"/>, <see cref="F:MonoGame.Extended.Matrix3x2.M32"/>, <paramref name="depth"/>, 1).
            </remarks>
            <param name="depth">
            The depth value to be used for the third row of the resulting <see cref="T:Microsoft.Xna.Framework.Matrix"/> value.
            </param>
            <returns>The resulting <see cref="T:Microsoft.Xna.Framework.Matrix"/> value.</returns>
        </member>
        <member name="M:MonoGame.Extended.Matrix3x2.ToMatrix(Microsoft.Xna.Framework.Matrix@)">
            <summary>
            Converts the specified <see cref="T:MonoGame.Extended.Matrix3x2"/> value into a <see cref="T:Microsoft.Xna.Framework.Matrix"/> value.
            </summary>
            <remarks>
            The third row of the resulting <see cref="T:Microsoft.Xna.Framework.Matrix"/> is set to (0, 0, 1, 0), and the fourth row is set to
            (<see cref="F:MonoGame.Extended.Matrix3x2.M31"/>, <see cref="F:MonoGame.Extended.Matrix3x2.M32"/>, 0, 1).
            </remarks>
            <param name="result">
            When this method returns, contains the resulting <see cref="T:Microsoft.Xna.Framework.Matrix"/> value.  This parameter is passed
            uninitialized.
            </param>
        </member>
        <member name="M:MonoGame.Extended.Matrix3x2.ToMatrix(System.Single@,Microsoft.Xna.Framework.Matrix@)">
            <summary>
            Converts the specified <see cref="T:MonoGame.Extended.Matrix3x2"/> value into a <see cref="T:Microsoft.Xna.Framework.Matrix"/> value.
            </summary>
            <remarks>
            The third row of the resulting <see cref="T:Microsoft.Xna.Framework.Matrix"/> is set to (0, 0, 1, 0), and the fourth row is set to
            (<see cref="F:MonoGame.Extended.Matrix3x2.M31"/>, <see cref="F:MonoGame.Extended.Matrix3x2.M32"/>, <paramref name="depth"/>, 1).
            </remarks>
            <param name="depth">
            The depth value to be used for the third row of the resulting <see cref="T:Microsoft.Xna.Framework.Matrix"/> value.
            </param>
            <param name="result">
            When this method returns, contains the resulting <see cref="T:Microsoft.Xna.Framework.Matrix"/> value.  This parameter is passed
            uninitialized.
            </param>
        </member>
        <member name="M:MonoGame.Extended.Matrix3x2.ToMatrix(MonoGame.Extended.Matrix3x2)">
            <summary>
            Converts the specified <see cref="T:MonoGame.Extended.Matrix3x2"/> value into a <see cref="T:Microsoft.Xna.Framework.Matrix"/> value.
            </summary>
            <remarks>
            The third row of the resulting <see cref="T:Microsoft.Xna.Framework.Matrix"/> is set to (0, 0, 1, 0), and the fourth row is set to
            (<see cref="F:MonoGame.Extended.Matrix3x2.M31"/>, <see cref="F:MonoGame.Extended.Matrix3x2.M32"/>, 0, 1).
            </remarks>
            <param name="matrix">The source <see cref="T:MonoGame.Extended.Matrix3x2"/> value.</param>
            <returns>The resulting <see cref="T:Microsoft.Xna.Framework.Matrix"/> value.</returns>
        </member>
        <member name="M:MonoGame.Extended.Matrix3x2.ToMatrix(MonoGame.Extended.Matrix3x2,System.Single@)">
            <summary>
            Converts the specified <see cref="T:MonoGame.Extended.Matrix3x2"/> value into a <see cref="T:Microsoft.Xna.Framework.Matrix"/> value.
            </summary>
            <remarks>
            The third row of the resulting <see cref="T:Microsoft.Xna.Framework.Matrix"/> is set to (0, 0, 1, 0), and the fourth row is set to
            (<see cref="F:MonoGame.Extended.Matrix3x2.M31"/>, <see cref="F:MonoGame.Extended.Matrix3x2.M32"/>, <paramref name="depth"/>, 1).
            </remarks>
            <param name="matrix">The source <see cref="T:MonoGame.Extended.Matrix3x2"/> value.</param>
            <param name="depth">
            The depth value to be used for the third row of the resulting <see cref="T:Microsoft.Xna.Framework.Matrix"/> value.
            </param>
            <returns>The resulting <see cref="T:Microsoft.Xna.Framework.Matrix"/> value.</returns>
        </member>
        <member name="M:MonoGame.Extended.Matrix3x2.ToMatrix(MonoGame.Extended.Matrix3x2,Microsoft.Xna.Framework.Matrix@)">
            <summary>
            Converts the specified <see cref="T:MonoGame.Extended.Matrix3x2"/> value into a <see cref="T:Microsoft.Xna.Framework.Matrix"/> value.
            </summary>
            <remarks>
            The third row of the resulting <see cref="T:Microsoft.Xna.Framework.Matrix"/> is set to (0, 0, 1, 0), and the fourth row is set to
            (<see cref="F:MonoGame.Extended.Matrix3x2.M31"/>, <see cref="F:MonoGame.Extended.Matrix3x2.M32"/>, 0, 1).
            </remarks>
            <param name="matrix">The source <see cref="T:MonoGame.Extended.Matrix3x2"/> value.</param>
            <param name="result">
            When this method returns, contains the resulting <see cref="T:Microsoft.Xna.Framework.Matrix"/> value.  This parameter is passed
            uninitialized.
            </param>
        </member>
        <member name="M:MonoGame.Extended.Matrix3x2.ToMatrix(MonoGame.Extended.Matrix3x2,System.Single@,Microsoft.Xna.Framework.Matrix@)">
            <summary>
            Converts the specified <see cref="T:MonoGame.Extended.Matrix3x2"/> value into a <see cref="T:Microsoft.Xna.Framework.Matrix"/> value.
            </summary>
            <remarks>
            The third row of the resulting <see cref="T:Microsoft.Xna.Framework.Matrix"/> is set to (0, 0, 1, 0), and the fourth row is set to
            (<see cref="F:MonoGame.Extended.Matrix3x2.M31"/>, <see cref="F:MonoGame.Extended.Matrix3x2.M32"/>, <paramref name="depth"/>, 1).
            </remarks>
            <param name="matrix">The source <see cref="T:MonoGame.Extended.Matrix3x2"/> value.</param>
            <param name="depth">
            The depth value to be used for the third row of the resulting <see cref="T:Microsoft.Xna.Framework.Matrix"/> value.
            </param>
            <param name="result">
            When this method returns, contains the resulting <see cref="T:Microsoft.Xna.Framework.Matrix"/> value.  This parameter is passed
            uninitialized.
            </param>
        </member>
        <member name="M:MonoGame.Extended.Matrix3x2.op_Implicit(MonoGame.Extended.Matrix3x2)~Microsoft.Xna.Framework.Matrix">
            <summary>
            Converts a <see cref="T:MonoGame.Extended.Matrix3x2"/> value to a <see cref="T:Microsoft.Xna.Framework.Matrix"/> value.
            </summary>
            <param name="matrix">The source <see cref="T:MonoGame.Extended.Matrix3x2"/> value.</param>
            <returns>The resulting <see cref="T:Microsoft.Xna.Framework.Matrix"/> value.</returns>
        </member>
        <member name="M:MonoGame.Extended.Matrix3x2.op_Equality(MonoGame.Extended.Matrix3x2,MonoGame.Extended.Matrix3x2)">
            <summary>
            Checks if two <see cref="T:MonoGame.Extended.Matrix3x2"/> values are equal.
            </summary>
            <remarks>
            Two <see cref="T:MonoGame.Extended.Matrix3x2"/> values are considered equal if all their corresponding elements are equal.
            </remarks>
            <param name="left">The first <see cref="T:MonoGame.Extended.Matrix3x2"/> value.</param>
            <param name="right">The second <see cref="T:MonoGame.Extended.Matrix3x2"/> value.</param>
            <returns>True if the values are equal; otherwise, false.</returns>
        </member>
        <member name="M:MonoGame.Extended.Matrix3x2.op_Inequality(MonoGame.Extended.Matrix3x2,MonoGame.Extended.Matrix3x2)">
            <summary>
            Checks if two <see cref="T:MonoGame.Extended.Matrix3x2"/> values are not equal.
            </summary>
            <remarks>
            Two <see cref="T:MonoGame.Extended.Matrix3x2"/> values are considered not equal if any of their corresponding elements differ.
            </remarks>
            <param name="left">The first <see cref="T:MonoGame.Extended.Matrix3x2"/> value.</param>
            <param name="right">The second <see cref="T:MonoGame.Extended.Matrix3x2"/> value.</param>
            <returns>True if the values are not equal; otherwise, false.</returns>
        </member>
        <member name="M:MonoGame.Extended.Matrix3x2.op_Addition(MonoGame.Extended.Matrix3x2,MonoGame.Extended.Matrix3x2)">
            <inheritdoc cref="M:MonoGame.Extended.Matrix3x2.Add(MonoGame.Extended.Matrix3x2,MonoGame.Extended.Matrix3x2)"/>
        </member>
        <member name="M:MonoGame.Extended.Matrix3x2.op_Subtraction(MonoGame.Extended.Matrix3x2,MonoGame.Extended.Matrix3x2)">
            <inheritdoc cref="M:MonoGame.Extended.Matrix3x2.Subtract(MonoGame.Extended.Matrix3x2,MonoGame.Extended.Matrix3x2)"/>
        </member>
        <member name="M:MonoGame.Extended.Matrix3x2.op_UnaryNegation(MonoGame.Extended.Matrix3x2)">
            <summary>
            Negates the elements of a <see cref="T:MonoGame.Extended.Matrix3x2"/>.
            </summary>
            <remarks>
            This operation is performed component-wise.
            </remarks>
            <param name="matrix">The source <see cref="T:MonoGame.Extended.Matrix3x2"/>.</param>
            <returns>The result of the negation.</returns>
        </member>
        <member name="M:MonoGame.Extended.Matrix3x2.op_Multiply(MonoGame.Extended.Matrix3x2,MonoGame.Extended.Matrix3x2)">
            <inheritdoc cref="M:MonoGame.Extended.Matrix3x2.Multiply(MonoGame.Extended.Matrix3x2,MonoGame.Extended.Matrix3x2)"/>
        </member>
        <member name="M:MonoGame.Extended.Matrix3x2.op_Multiply(MonoGame.Extended.Matrix3x2,System.Single@)">
            <inheritdoc cref="M:MonoGame.Extended.Matrix3x2.Multiply(MonoGame.Extended.Matrix3x2,System.Single@)"/>
        </member>
        <member name="M:MonoGame.Extended.Matrix3x2.op_Division(MonoGame.Extended.Matrix3x2,MonoGame.Extended.Matrix3x2)">
            <inheritdoc cref="M:MonoGame.Extended.Matrix3x2.Divide(MonoGame.Extended.Matrix3x2,MonoGame.Extended.Matrix3x2)"/>
        </member>
        <member name="M:MonoGame.Extended.Matrix3x2.op_Division(MonoGame.Extended.Matrix3x2,System.Single@)">
            <inheritdoc cref="M:MonoGame.Extended.Matrix3x2.Divide(MonoGame.Extended.Matrix3x2,System.Single@)"/>
        </member>
        <member name="M:MonoGame.Extended.Matrix3x2.ToString">
            <summary>
            Returns a string representation of this <see cref="T:MonoGame.Extended.Matrix3x2"/>
            </summary>
            <returns>The string representation of this <see cref="T:MonoGame.Extended.Matrix3x2"/></returns>
        </member>
        <member name="T:MonoGame.Extended.OrientedRectangle">
            <summary>
            An oriented bounding rectangle is a rectangular block, much like a bounding rectangle
            <see cref="P:MonoGame.Extended.OrientedRectangle.BoundingRectangle" /> but with an arbitrary orientation <see cref="T:Microsoft.Xna.Framework.Vector2" />.
            </summary>
            <seealso cref="T:System.IEquatable`1" />
        </member>
        <member name="F:MonoGame.Extended.OrientedRectangle.Center">
            <summary>
            The centre position of this <see cref="T:MonoGame.Extended.OrientedRectangle" />.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.OrientedRectangle.Radii">
             <summary>
             The distance from the <see cref="F:MonoGame.Extended.OrientedRectangle.Center" /> point along both axes to any point on the boundary of this
             <see cref="T:MonoGame.Extended.OrientedRectangle" />.
             </summary>
            
        </member>
        <member name="F:MonoGame.Extended.OrientedRectangle.Orientation">
            <summary>
            The rotation matrix <see cref="T:MonoGame.Extended.Matrix3x2" /> of the bounding rectangle <see cref="T:MonoGame.Extended.OrientedRectangle" />.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.OrientedRectangle.#ctor(Microsoft.Xna.Framework.Vector2,MonoGame.Extended.SizeF,MonoGame.Extended.Matrix3x2)">
            <summary>
            Initializes a new instance of the <see cref="P:MonoGame.Extended.OrientedRectangle.BoundingRectangle" /> structure from the specified centre
            <see cref="T:Microsoft.Xna.Framework.Vector2" /> and the radii <see cref="T:MonoGame.Extended.SizeF" />.
            </summary>
            <param name="center">The centre <see cref="T:Microsoft.Xna.Framework.Vector2" />.</param>
            <param name="radii">The radii <see cref="T:Microsoft.Xna.Framework.Vector2" />.</param>
            <param name="orientation">The orientation <see cref="T:MonoGame.Extended.Matrix3x2" />.</param>
        </member>
        <member name="P:MonoGame.Extended.OrientedRectangle.Points">
            <summary>
            Gets a list of points defining the corner points of the oriented rectangle.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.OrientedRectangle.Transform(MonoGame.Extended.OrientedRectangle,MonoGame.Extended.Matrix3x2@)">
            <summary>
            Computes the <see cref="T:MonoGame.Extended.OrientedRectangle"/> from the specified <paramref name="rectangle"/>
            transformed by <paramref name="transformMatrix"/>.
            </summary>
            <param name="rectangle">The <see cref="T:MonoGame.Extended.OrientedRectangle"/> to transform.</param>
            <param name="transformMatrix">The <see cref="T:MonoGame.Extended.Matrix3x2"/> transformation.</param>
            <returns>A new <see cref="T:MonoGame.Extended.OrientedRectangle"/>.</returns>
        </member>
        <member name="M:MonoGame.Extended.OrientedRectangle.op_Equality(MonoGame.Extended.OrientedRectangle,MonoGame.Extended.OrientedRectangle)">
            <summary>
            Compares to two <see cref="T:MonoGame.Extended.OrientedRectangle"/> structures. The result specifies whether the
            the values of the <see cref="F:MonoGame.Extended.OrientedRectangle.Center"/>, <see cref="F:MonoGame.Extended.OrientedRectangle.Radii"/> and <see cref="F:MonoGame.Extended.OrientedRectangle.Orientation"/> are
            equal.
            </summary>
            <param name="left">The left <see cref="T:MonoGame.Extended.OrientedRectangle" />.</param>
            <param name="right">The right <see cref="T:MonoGame.Extended.OrientedRectangle" />.</param>
            <returns><c>true</c> if left and right argument are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MonoGame.Extended.OrientedRectangle.op_Inequality(MonoGame.Extended.OrientedRectangle,MonoGame.Extended.OrientedRectangle)">
            <summary>
            Compares to two <see cref="T:MonoGame.Extended.OrientedRectangle"/> structures. The result specifies whether the
            the values of the <see cref="F:MonoGame.Extended.OrientedRectangle.Center"/>, <see cref="F:MonoGame.Extended.OrientedRectangle.Radii"/> or <see cref="F:MonoGame.Extended.OrientedRectangle.Orientation"/> are
            unequal.
            </summary>
            <param name="left">The left <see cref="T:MonoGame.Extended.OrientedRectangle" />.</param>
            <param name="right">The right <see cref="T:MonoGame.Extended.OrientedRectangle" />.</param>
            <returns><c>true</c> if left and right argument are unequal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MonoGame.Extended.OrientedRectangle.Equals(MonoGame.Extended.OrientedRectangle)">
            <summary>
            Determines whether two instances of <see cref="T:MonoGame.Extended.OrientedRectangle"/> are equal.
            </summary>
            <param name="other">The other <see cref="T:MonoGame.Extended.OrientedRectangle"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:MonoGame.Extended.OrientedRectangle"/> is equal
            to the current <see cref="T:MonoGame.Extended.OrientedRectangle"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MonoGame.Extended.OrientedRectangle.Equals(System.Object)">
            <summary>
            Determines whether two instances of <see cref="T:MonoGame.Extended.OrientedRectangle"/> are equal.
            </summary>
            <param name="obj">The <see cref="T:MonoGame.Extended.OrientedRectangle"/> to compare to.</param>
            <returns><c>true</c> if the specified <see cref="T:MonoGame.Extended.OrientedRectangle"/> is equal
            to the current <see cref="T:MonoGame.Extended.OrientedRectangle"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MonoGame.Extended.OrientedRectangle.GetHashCode">
            <summary>
            Returns a hash code for this object instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MonoGame.Extended.OrientedRectangle.op_Explicit(MonoGame.Extended.RectangleF)~MonoGame.Extended.OrientedRectangle">
            <summary>
            Performs an implicit conversion from a <see cref="T:MonoGame.Extended.RectangleF" /> to <see cref="T:MonoGame.Extended.OrientedRectangle" />.
            </summary>
            <param name="rectangle">The rectangle to convert.</param>
            <returns>The resulting <see cref="T:MonoGame.Extended.OrientedRectangle" />.</returns>
        </member>
        <member name="M:MonoGame.Extended.OrientedRectangle.Intersects(MonoGame.Extended.OrientedRectangle,MonoGame.Extended.OrientedRectangle)">
            <summary>
            See:
            https://www.flipcode.com/archives/2D_OBB_Intersection.shtml
            https://dyn4j.org/2010/01/sat
            </summary>
            <param name="rectangle"></param>
            <param name="other"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:MonoGame.Extended.OrientedRectangle.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this <see cref="T:MonoGame.Extended.OrientedRectangle" />.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this <see cref="T:MonoGame.Extended.OrientedRectangle" />.
            </returns>
        </member>
        <member name="T:MonoGame.Extended.Range`1">
            <summary>
                Represents a closed interval defined by a minimum and a maximum value of a give type.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Range`1.Min">
            <summary>
                Gets the minium value of the <see cref="T:MonoGame.Extended.Range`1" />.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Range`1.Max">
            <summary>
                Gets the maximum value of the <see cref="T:MonoGame.Extended.Range`1" />.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Range`1.IsDegenerate">
            <summary>
                Returns wheter or not this <see cref="T:MonoGame.Extended.Range`1" /> is degenerate.
                (Min and Max are the same)
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Range`1.IsProper">
            <summary>
                Returns wheter or not this <see cref="T:MonoGame.Extended.Range`1" /> is proper.
                (Min and Max are not the same)
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Range`1.IsInBetween(`0,System.Boolean,System.Boolean)">
            <summary>
                Returns wheter or not the value falls in this <see cref="T:MonoGame.Extended.Range`1" />.
            </summary>
        </member>
        <member name="T:MonoGame.Extended.Ray2">
            <summary>
                A two dimensional ray defined by a starting <see cref="T:Microsoft.Xna.Framework.Vector2" /> and a direction <see cref="T:Microsoft.Xna.Framework.Vector2" />.
            </summary>
            <seealso cref="T:System.IEquatable`1" />
            <seealso cref="T:MonoGame.Extended.IEquatableByRef`1" />
        </member>
        <member name="F:MonoGame.Extended.Ray2.Position">
            <summary>
                The starting <see cref="T:Microsoft.Xna.Framework.Vector2" /> of this <see cref="T:MonoGame.Extended.Ray2" />.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.Ray2.Direction">
            <summary>
                The direction <see cref="T:Microsoft.Xna.Framework.Vector2" /> of this <see cref="T:MonoGame.Extended.Ray2" />.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Ray2.#ctor(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
                Initializes a new instance of the <see cref="T:MonoGame.Extended.Ray2" /> structure from the specified position and direction.
            </summary>
            <param name="position">The starting point.</param>
            <param name="direction">The direction vector.</param>
        </member>
        <member name="M:MonoGame.Extended.Ray2.Intersects(MonoGame.Extended.BoundingRectangle,System.Single@,System.Single@)">
            <summary>
                Determines whether this <see cref="T:MonoGame.Extended.Ray2" /> intersects with a specified <see cref="T:MonoGame.Extended.BoundingRectangle" />.
            </summary>
            <param name="boundingRectangle">The bounding rectangle.</param>
            <param name="rayNearDistance">
                When this method returns, contains the distance along the ray to the first intersection
                point with the <paramref name="boundingRectangle" />, if an intersection was found; otherwise,
                <see cref="F:System.Single.NaN" />.
                This parameter is passed uninitialized.
            </param>
            <param name="rayFarDistance">
                When this method returns, contains the distance along the ray to the second intersection
                point with the <paramref name="boundingRectangle" />, if an intersection was found; otherwise,
                <see cref="F:System.Single.NaN" />.
                This parameter is passed uninitialized.
            </param>
            <returns>
                <c>true</c> if this <see cref="T:MonoGame.Extended.Ray2" /> intersects with <paramref name="boundingRectangle" />; otherwise,
                <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Ray2.op_Equality(MonoGame.Extended.Ray2,MonoGame.Extended.Ray2)">
            <summary>
                Compares two <see cref="T:MonoGame.Extended.Ray2" /> structures. The result specifies whether the values of the
                <see cref="F:MonoGame.Extended.Ray2.Position" />
                and <see cref="F:MonoGame.Extended.Ray2.Direction" /> fields of the two <see cref="T:MonoGame.Extended.Ray2" /> structures are equal.
            </summary>
            <param name="first">The first ray.</param>
            <param name="second">The second ray.</param>
            <returns>
                <c>true</c> if the <see cref="F:MonoGame.Extended.Ray2.Position" /> and <see cref="F:MonoGame.Extended.Ray2.Direction" />
                fields of the two <see cref="T:MonoGame.Extended.Ray2" />
                structures are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Ray2.Equals(MonoGame.Extended.Ray2)">
            <summary>
                Indicates whether this <see cref="T:MonoGame.Extended.Ray2" /> is equal to another <see cref="T:MonoGame.Extended.Ray2" />.
            </summary>
            <param name="ray">The ray.</param>
            <returns>
                <c>true</c> if this <see cref="T:MonoGame.Extended.Ray2" /> is equal to the <paramref name="ray" /> parameter; otherwise,
                <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Ray2.Equals(MonoGame.Extended.Ray2@)">
            <summary>
                Indicates whether this <see cref="T:MonoGame.Extended.Ray2" /> is equal to another <see cref="T:MonoGame.Extended.Ray2" />.
            </summary>
            <param name="ray">The ray.</param>
            <returns>
                <c>true</c> if this <see cref="T:MonoGame.Extended.Ray2" /> is equal to the <paramref name="ray" />; otherwise,
                <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Ray2.Equals(System.Object)">
            <summary>
                Returns a value indicating whether this <see cref="T:MonoGame.Extended.Ray2" /> is equal to a specified object.
            </summary>
            <param name="obj">The object to make the comparison with.</param>
            <returns>
                <c>true</c> if this  <see cref="T:MonoGame.Extended.Ray2" /> is equal to <paramref name="obj" />; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Ray2.op_Inequality(MonoGame.Extended.Ray2,MonoGame.Extended.Ray2)">
            <summary>
                Compares two <see cref="T:MonoGame.Extended.Ray2" /> structures. The result specifies whether the values of the
                <see cref='F:MonoGame.Extended.Ray2.Position' />
                and <see cref="F:MonoGame.Extended.Ray2.Direction" /> fields of the two <see cref="T:MonoGame.Extended.Ray2" /> structures are unequal.
            </summary>
            <param name="first">The first ray.</param>
            <param name="second">The second ray.</param>
            <returns>
                <c>true</c> if the <see cref="F:MonoGame.Extended.Ray2.Position" /> and <see cref="F:MonoGame.Extended.Ray2.Direction" />
                fields of the two <see cref="T:MonoGame.Extended.Ray2" />
                structures are unequal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Ray2.GetHashCode">
            <summary>
                Returns a hash code of this <see cref="T:MonoGame.Extended.Ray2" /> suitable for use in hashing algorithms and data
                structures like a hash table.
            </summary>
            <returns>
                A hash code of this <see cref="T:MonoGame.Extended.Ray2" />.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Ray2.ToString">
            <summary>
                Returns a <see cref="T:System.String" /> that represents this <see cref="T:MonoGame.Extended.Ray2" />.
            </summary>
            <returns>
                A <see cref="T:System.String" /> that represents this <see cref="T:MonoGame.Extended.Ray2" />.
            </returns>
        </member>
        <member name="T:MonoGame.Extended.RectangleF">
            <summary>
                An axis-aligned, four sided, two dimensional box defined by a top-left position (<see cref="F:MonoGame.Extended.RectangleF.X" /> and
                <see cref="F:MonoGame.Extended.RectangleF.Y" />) and a size (<see cref="F:MonoGame.Extended.RectangleF.Width" /> and <see cref="F:MonoGame.Extended.RectangleF.Height" />).
            </summary>
            <remarks>
                <para>
                    An <see cref="T:MonoGame.Extended.RectangleF" /> is categorized by having its faces oriented in such a way that its
                    face normals are at all times parallel with the axes of the given coordinate system.
                </para>
                <para>
                    The bounding <see cref="T:MonoGame.Extended.RectangleF" /> of a rotated <see cref="T:MonoGame.Extended.RectangleF" /> will be equivalent or larger
                    in size than the original depending on the angle of rotation.
                </para>
            </remarks>
            <seealso cref="T:System.IEquatable`1" />
            <seealso cref="T:MonoGame.Extended.IEquatableByRef`1" />
        </member>
        <member name="F:MonoGame.Extended.RectangleF.Empty">
            <summary>
                The <see cref="T:MonoGame.Extended.RectangleF" /> with <see cref="F:MonoGame.Extended.RectangleF.X" />, <see cref="F:MonoGame.Extended.RectangleF.Y" />, <see cref="F:MonoGame.Extended.RectangleF.Width" /> and
                <see cref="F:MonoGame.Extended.RectangleF.Height" /> all set to <code>0.0f</code>.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.RectangleF.X">
            <summary>
                The x-coordinate of the top-left corner position of this <see cref="T:MonoGame.Extended.RectangleF" />.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.RectangleF.Y">
            <summary>
                The y-coordinate of the top-left corner position of this <see cref="T:MonoGame.Extended.RectangleF" />.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.RectangleF.Width">
            <summary>
                The width of this <see cref="T:MonoGame.Extended.RectangleF" />.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.RectangleF.Height">
            <summary>
                The height of this <see cref="T:MonoGame.Extended.RectangleF" />.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.RectangleF.Left">
            <summary>
                Gets the x-coordinate of the left edge of this <see cref="T:MonoGame.Extended.RectangleF" />.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.RectangleF.Right">
            <summary>
                Gets the x-coordinate of the right edge of this <see cref="T:MonoGame.Extended.RectangleF" />.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.RectangleF.Top">
            <summary>
                Gets the y-coordinate of the top edge of this <see cref="T:MonoGame.Extended.RectangleF" />.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.RectangleF.Bottom">
            <summary>
                Gets the y-coordinate of the bottom edge of this <see cref="T:MonoGame.Extended.RectangleF" />.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.RectangleF.IsEmpty">
            <summary>
                Gets a value indicating whether this <see cref="T:MonoGame.Extended.RectangleF" /> has a <see cref="F:MonoGame.Extended.RectangleF.X" />, <see cref="F:MonoGame.Extended.RectangleF.Y" />,
                <see cref="F:MonoGame.Extended.RectangleF.Width" />,
                <see cref="F:MonoGame.Extended.RectangleF.Height" /> all equal to <code>0.0f</code>.
            </summary>
            <value>
                <c>true</c> if this instance is empty; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MonoGame.Extended.RectangleF.Position">
            <summary>
                Gets the <see cref="T:Microsoft.Xna.Framework.Vector2" /> representing the the top-left of this <see cref="T:MonoGame.Extended.RectangleF" />.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.RectangleF.Size">
            <summary>
                Gets the <see cref="T:MonoGame.Extended.SizeF" /> representing the extents of this <see cref="T:MonoGame.Extended.RectangleF" />.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.RectangleF.Center">
            <summary>
                Gets the <see cref="T:Microsoft.Xna.Framework.Vector2" /> representing the center of this <see cref="T:MonoGame.Extended.RectangleF" />.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.RectangleF.TopLeft">
            <summary>
                Gets the <see cref="T:Microsoft.Xna.Framework.Vector2" /> representing the top-left of this <see cref="T:MonoGame.Extended.RectangleF" />.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.RectangleF.TopRight">
            <summary>
                Gets the <see cref="T:Microsoft.Xna.Framework.Vector2" /> representing the top-right of this <see cref="T:MonoGame.Extended.RectangleF" />.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.RectangleF.BottomLeft">
            <summary>
                Gets the <see cref="T:Microsoft.Xna.Framework.Vector2" /> representing the bottom-left of this <see cref="T:MonoGame.Extended.RectangleF" />.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.RectangleF.BottomRight">
            <summary>
                Gets the <see cref="T:Microsoft.Xna.Framework.Vector2" /> representing the bottom-right of this <see cref="T:MonoGame.Extended.RectangleF" />.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.RectangleF.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:MonoGame.Extended.RectangleF" /> structure from the specified top-left xy-coordinate
                <see cref="T:System.Single" />s, width <see cref="T:System.Single" /> and height <see cref="T:System.Single" />.
            </summary>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:MonoGame.Extended.RectangleF.#ctor(Microsoft.Xna.Framework.Vector2,MonoGame.Extended.SizeF)">
            <summary>
                Initializes a new instance of the <see cref="T:MonoGame.Extended.RectangleF" /> structure from the specified top-left
                <see cref="T:Microsoft.Xna.Framework.Vector2" /> and the extents <see cref="T:MonoGame.Extended.SizeF" />.
            </summary>
            <param name="position">The top-left point.</param>
            <param name="size">The extents.</param>
        </member>
        <member name="M:MonoGame.Extended.RectangleF.CreateFrom(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,MonoGame.Extended.RectangleF@)">
            <summary>
                Computes the <see cref="T:MonoGame.Extended.RectangleF" /> from a minimum <see cref="T:Microsoft.Xna.Framework.Vector2" /> and maximum
                <see cref="T:Microsoft.Xna.Framework.Vector2" />.
            </summary>
            <param name="minimum">The minimum point.</param>
            <param name="maximum">The maximum point.</param>
            <param name="result">The resulting rectangle.</param>
        </member>
        <member name="M:MonoGame.Extended.RectangleF.CreateFrom(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
                Computes the <see cref="T:MonoGame.Extended.RectangleF" /> from a minimum <see cref="T:Microsoft.Xna.Framework.Vector2" /> and maximum
                <see cref="T:Microsoft.Xna.Framework.Vector2" />.
            </summary>
            <param name="minimum">The minimum point.</param>
            <param name="maximum">The maximum point.</param>
            <returns>The resulting <see cref="T:MonoGame.Extended.RectangleF" />.</returns>
        </member>
        <member name="M:MonoGame.Extended.RectangleF.CreateFrom(System.Collections.Generic.IReadOnlyList{Microsoft.Xna.Framework.Vector2},MonoGame.Extended.RectangleF@)">
            <summary>
                Computes the <see cref="T:MonoGame.Extended.RectangleF" /> from a list of <see cref="T:Microsoft.Xna.Framework.Vector2" /> structures.
            </summary>
            <param name="points">The points.</param>
            <param name="result">The resulting rectangle.</param>
        </member>
        <member name="M:MonoGame.Extended.RectangleF.CreateFrom(System.Collections.Generic.IReadOnlyList{Microsoft.Xna.Framework.Vector2})">
            <summary>
                Computes the <see cref="T:MonoGame.Extended.RectangleF" /> from a list of <see cref="T:Microsoft.Xna.Framework.Vector2" /> structures.
            </summary>
            <param name="points">The points.</param>
            <returns>The resulting <see cref="T:MonoGame.Extended.RectangleF" />.</returns>
        </member>
        <member name="M:MonoGame.Extended.RectangleF.Transform(MonoGame.Extended.RectangleF@,MonoGame.Extended.Matrix3x2@,MonoGame.Extended.RectangleF@)">
            <summary>
                Computes the <see cref="T:MonoGame.Extended.RectangleF" /> from the specified <see cref="T:MonoGame.Extended.RectangleF" /> transformed by
                the specified <see cref="T:MonoGame.Extended.Matrix3x2" />.
            </summary>
            <param name="rectangle">The rectangle to be transformed.</param>
            <param name="transformMatrix">The transform matrix.</param>
            <param name="result">The resulting transformed rectangle.</param>
            <returns>
                The <see cref="T:MonoGame.Extended.BoundingRectangle" /> from the <paramref name="rectangle" /> transformed by the
                <paramref name="transformMatrix" />.
            </returns>
            <remarks>
                <para>
                    If a transformed <see cref="T:MonoGame.Extended.BoundingRectangle" /> is used for <paramref name="rectangle" /> then the
                    resulting <see cref="T:MonoGame.Extended.BoundingRectangle" /> will have the compounded transformation, which most likely is
                    not desired.
                </para>
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.RectangleF.Transform(MonoGame.Extended.RectangleF,MonoGame.Extended.Matrix3x2@)">
            <summary>
                Computes the <see cref="T:MonoGame.Extended.RectangleF" /> from the specified <see cref="T:MonoGame.Extended.BoundingRectangle" /> transformed by
                the
                specified <see cref="T:MonoGame.Extended.Matrix3x2" />.
            </summary>
            <param name="rectangle">The bounding rectangle.</param>
            <param name="transformMatrix">The transform matrix.</param>
            <returns>
                The <see cref="T:MonoGame.Extended.BoundingRectangle" /> from the <paramref name="rectangle" /> transformed by the
                <paramref name="transformMatrix" />.
            </returns>
            <remarks>
                <para>
                    If a transformed <see cref="T:MonoGame.Extended.BoundingRectangle" /> is used for <paramref name="rectangle" /> then the
                    resulting <see cref="T:MonoGame.Extended.BoundingRectangle" /> will have the compounded transformation, which most likely is
                    not desired.
                </para>
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.RectangleF.Union(MonoGame.Extended.RectangleF@,MonoGame.Extended.RectangleF@,MonoGame.Extended.RectangleF@)">
            <summary>
                Computes the <see cref="T:MonoGame.Extended.RectangleF" /> that contains the two specified
                <see cref="T:MonoGame.Extended.RectangleF" /> structures.
            </summary>
            <param name="first">The first rectangle.</param>
            <param name="second">The second rectangle.</param>
            <param name="result">The resulting rectangle that contains both the <paramref name="first" /> and the
                <paramref name="second" />.</param>
        </member>
        <member name="M:MonoGame.Extended.RectangleF.Union(MonoGame.Extended.RectangleF,MonoGame.Extended.RectangleF)">
            <summary>
                Computes the <see cref="T:MonoGame.Extended.RectangleF" /> that contains the two specified
                <see cref="T:MonoGame.Extended.RectangleF" /> structures.
            </summary>
            <param name="first">The first rectangle.</param>
            <param name="second">The second rectangle.</param>
            <returns>
                An <see cref="T:MonoGame.Extended.RectangleF" /> that contains both the <paramref name="first" /> and the
                <paramref name="second" />.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.RectangleF.Union(MonoGame.Extended.RectangleF)">
            <summary>
                Computes the <see cref="T:MonoGame.Extended.RectangleF" /> that contains both the specified <see cref="T:MonoGame.Extended.RectangleF" /> and this <see cref="T:MonoGame.Extended.RectangleF" />.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <returns>
                An <see cref="T:MonoGame.Extended.RectangleF" /> that contains both the <paramref name="rectangle" /> and
                this <see cref="T:MonoGame.Extended.RectangleF" />.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.RectangleF.Intersection(MonoGame.Extended.RectangleF@,MonoGame.Extended.RectangleF@,MonoGame.Extended.RectangleF@)">
            <summary>
                Computes the <see cref="T:MonoGame.Extended.RectangleF" /> that is in common between the two specified
                <see cref="T:MonoGame.Extended.RectangleF" /> structures.
            </summary>
            <param name="first">The first rectangle.</param>
            <param name="second">The second rectangle.</param>
            <param name="result">The resulting rectangle that is in common between both the <paramref name="first" /> and
                the <paramref name="second" />, if they intersect; otherwise, <see cref="F:MonoGame.Extended.RectangleF.Empty"/>.</param>
        </member>
        <member name="M:MonoGame.Extended.RectangleF.Intersection(MonoGame.Extended.RectangleF,MonoGame.Extended.RectangleF)">
            <summary>
                Computes the <see cref="T:MonoGame.Extended.RectangleF" /> that is in common between the two specified
                <see cref="T:MonoGame.Extended.RectangleF" /> structures.
            </summary>
            <param name="first">The first rectangle.</param>
            <param name="second">The second rectangle.</param>
            <returns>
                A <see cref="T:MonoGame.Extended.RectangleF" /> that is in common between both the <paramref name="first" /> and
                the <paramref name="second" />, if they intersect; otherwise, <see cref="F:MonoGame.Extended.RectangleF.Empty"/>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.RectangleF.Intersection(MonoGame.Extended.RectangleF)">
            <summary>
                Computes the <see cref="T:MonoGame.Extended.RectangleF" /> that is in common between the specified
                <see cref="T:MonoGame.Extended.RectangleF" /> and this <see cref="T:MonoGame.Extended.RectangleF" />.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <returns>
                A <see cref="T:MonoGame.Extended.RectangleF" /> that is in common between both the <paramref name="rectangle" /> and
                this <see cref="T:MonoGame.Extended.RectangleF"/>, if they intersect; otherwise, <see cref="F:MonoGame.Extended.RectangleF.Empty"/>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.RectangleF.Intersects(MonoGame.Extended.RectangleF@,MonoGame.Extended.RectangleF@)">
            <summary>
                Determines whether the two specified <see cref="T:MonoGame.Extended.RectangleF" /> structures intersect.
            </summary>
            <param name="first">The first rectangle.</param>
            <param name="second">The second rectangle.</param>
            <returns>
                <c>true</c> if the <paramref name="first" /> intersects with the <see cref="!:second" />; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.RectangleF.Intersects(MonoGame.Extended.RectangleF,MonoGame.Extended.RectangleF)">
            <summary>
                Determines whether the two specified <see cref="T:MonoGame.Extended.RectangleF" /> structures intersect.
            </summary>
            <param name="first">The first rectangle.</param>
            <param name="second">The second rectangle.</param>
            <returns>
                <c>true</c> if the <paramref name="first" /> intersects with the <see cref="!:second" />; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.RectangleF.Intersects(MonoGame.Extended.RectangleF)">
            <summary>
                Determines whether the specified <see cref="T:MonoGame.Extended.RectangleF" /> intersects with this
                <see cref="T:MonoGame.Extended.RectangleF" />.
            </summary>
            <param name="rectangle">The bounding rectangle.</param>
            <returns>
                <c>true</c> if the <paramref name="rectangle" /> intersects with this
                <see cref="T:MonoGame.Extended.RectangleF" />; otherwise,
                <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.RectangleF.Contains(MonoGame.Extended.RectangleF@,Microsoft.Xna.Framework.Vector2@)">
            <summary>
                Determines whether the specified <see cref="T:MonoGame.Extended.RectangleF" /> contains the specified
                <see cref="T:Microsoft.Xna.Framework.Vector2" />.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <param name="point">The point.</param>
            <returns>
                <c>true</c> if the <paramref name="rectangle" /> contains the <paramref name="point" />; otherwise,
                <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.RectangleF.Contains(MonoGame.Extended.RectangleF,Microsoft.Xna.Framework.Vector2)">
            <summary>
                Determines whether the specified <see cref="T:MonoGame.Extended.RectangleF" /> contains the specified
                <see cref="T:Microsoft.Xna.Framework.Vector2" />.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <param name="point">The point.</param>
            <returns>
                <c>true</c> if the <paramref name="rectangle" /> contains the <paramref name="point" />; otherwise,
                <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.RectangleF.Contains(Microsoft.Xna.Framework.Vector2)">
            <summary>
                Determines whether this <see cref="T:MonoGame.Extended.RectangleF" /> contains the specified
                <see cref="T:Microsoft.Xna.Framework.Vector2" />.
            </summary>
            <param name="point">The point.</param>
            <returns>
                <c>true</c> if the this <see cref="T:MonoGame.Extended.RectangleF"/> contains the <paramref name="point" />; otherwise,
                <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.RectangleF.UpdateFromPoints(System.Collections.Generic.IReadOnlyList{Microsoft.Xna.Framework.Vector2})">
            <summary>
                Updates this <see cref="T:MonoGame.Extended.RectangleF" /> from a list of <see cref="T:Microsoft.Xna.Framework.Vector2" /> structures.
            </summary>
            <param name="points">The points.</param>
        </member>
        <member name="M:MonoGame.Extended.RectangleF.SquaredDistanceTo(Microsoft.Xna.Framework.Vector2)">
            <summary>
                Computes the squared distance from this <see cref="T:MonoGame.Extended.RectangleF"/> to a <see cref="T:Microsoft.Xna.Framework.Vector2"/>.
            </summary>
            <param name="point">The point.</param>
            <returns>The squared distance from this <see cref="T:MonoGame.Extended.RectangleF"/> to the <paramref name="point"/>.</returns>
        </member>
        <member name="M:MonoGame.Extended.RectangleF.DistanceTo(Microsoft.Xna.Framework.Vector2)">
            <summary>
                Computes the distance from this <see cref="T:MonoGame.Extended.RectangleF"/> to a <see cref="T:Microsoft.Xna.Framework.Vector2"/>.
            </summary>
            <param name="point">The point.</param>
            <returns>The distance from this <see cref="T:MonoGame.Extended.RectangleF"/> to the <paramref name="point"/>.</returns>
        </member>
        <member name="M:MonoGame.Extended.RectangleF.ClosestPointTo(Microsoft.Xna.Framework.Vector2)">
            <summary>
                Computes the closest <see cref="T:Microsoft.Xna.Framework.Vector2" /> on this <see cref="T:MonoGame.Extended.RectangleF" /> to a specified
                <see cref="T:Microsoft.Xna.Framework.Vector2" />.
            </summary>
            <param name="point">The point.</param>
            <returns>The closest <see cref="T:Microsoft.Xna.Framework.Vector2" /> on this <see cref="T:MonoGame.Extended.RectangleF" /> to the <paramref name="point" />.</returns>
        </member>
        <member name="M:MonoGame.Extended.RectangleF.op_Equality(MonoGame.Extended.RectangleF,MonoGame.Extended.RectangleF)">
            <summary>
                Compares two <see cref="T:MonoGame.Extended.RectangleF" /> structures. The result specifies whether the values of the
                <see cref="F:MonoGame.Extended.RectangleF.X" />, <see cref="F:MonoGame.Extended.RectangleF.Y"/>, <see cref="F:MonoGame.Extended.RectangleF.Width"/> and <see cref="F:MonoGame.Extended.RectangleF.Height" /> fields of the two <see cref="T:MonoGame.Extended.RectangleF" /> structures
                are equal.
            </summary>
            <param name="first">The first rectangle.</param>
            <param name="second">The second rectangle.</param>
            <returns>
                <c>true</c> if the values of the
                <see cref="F:MonoGame.Extended.RectangleF.X" />, <see cref="F:MonoGame.Extended.RectangleF.Y"/>, <see cref="F:MonoGame.Extended.RectangleF.Width"/> and <see cref="F:MonoGame.Extended.RectangleF.Height" /> fields of the two <see cref="T:MonoGame.Extended.RectangleF" /> structures
                are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.RectangleF.op_Inequality(MonoGame.Extended.RectangleF,MonoGame.Extended.RectangleF)">
            <summary>
                Compares two <see cref="T:MonoGame.Extended.RectangleF" /> structures. The result specifies whether the values of the
                <see cref="F:MonoGame.Extended.RectangleF.X" />, <see cref="F:MonoGame.Extended.RectangleF.Y"/>, <see cref="F:MonoGame.Extended.RectangleF.Width"/> and <see cref="F:MonoGame.Extended.RectangleF.Height" /> fields of the two <see cref="T:MonoGame.Extended.RectangleF" /> structures
                are unequal.
            </summary>
            <param name="first">The first rectangle.</param>
            <param name="second">The second rectangle.</param>
            <returns>
                <c>true</c> if the values of the
                <see cref="F:MonoGame.Extended.RectangleF.X" />, <see cref="F:MonoGame.Extended.RectangleF.Y"/>, <see cref="F:MonoGame.Extended.RectangleF.Width"/> and <see cref="F:MonoGame.Extended.RectangleF.Height" /> fields of the two <see cref="T:MonoGame.Extended.RectangleF" /> structures
                are unequal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.RectangleF.Equals(MonoGame.Extended.RectangleF)">
            <summary>
                Indicates whether this <see cref="T:MonoGame.Extended.RectangleF" /> is equal to another <see cref="T:MonoGame.Extended.RectangleF" />.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <returns>
                <c>true</c> if this <see cref="T:MonoGame.Extended.RectangleF" /> is equal to the <paramref name="rectangle" />; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.RectangleF.Equals(MonoGame.Extended.RectangleF@)">
            <summary>
                Indicates whether this <see cref="T:MonoGame.Extended.RectangleF" /> is equal to another <see cref="T:MonoGame.Extended.RectangleF" />.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <returns>
                <c>true</c> if this <see cref="T:MonoGame.Extended.RectangleF" /> is equal to the <paramref name="rectangle" />; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.RectangleF.Equals(System.Object)">
            <summary>
                Returns a value indicating whether this <see cref="T:MonoGame.Extended.RectangleF" /> is equal to a specified object.
            </summary>
            <param name="obj">The object to make the comparison with.</param>
            <returns>
                <c>true</c> if this <see cref="T:MonoGame.Extended.RectangleF" /> is equal to <paramref name="obj" />; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.RectangleF.GetHashCode">
            <summary>
                Returns a hash code of this <see cref="T:MonoGame.Extended.RectangleF" /> suitable for use in hashing algorithms and data
                structures like a hash table.
            </summary>
            <returns>
                A hash code of this <see cref="T:MonoGame.Extended.RectangleF" />.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.RectangleF.op_Implicit(Microsoft.Xna.Framework.Rectangle)~MonoGame.Extended.RectangleF">
            <summary>
                Performs an implicit conversion from a <see cref="T:Microsoft.Xna.Framework.Rectangle" /> to a <see cref="T:MonoGame.Extended.RectangleF" />.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <returns>
                The resulting <see cref="T:MonoGame.Extended.RectangleF" />.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.RectangleF.op_Explicit(MonoGame.Extended.RectangleF)~Microsoft.Xna.Framework.Rectangle">
            <summary>
                Performs an explicit conversion from a <see cref="T:Microsoft.Xna.Framework.Rectangle" /> to a <see cref="T:MonoGame.Extended.RectangleF" />.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <returns>
                The resulting <see cref="T:MonoGame.Extended.RectangleF" />.
            </returns>
            <remarks>
                <para>A loss of precision may occur due to the truncation from <see cref="T:System.Single" /> to <see cref="T:System.Int32" />.</para>
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.RectangleF.ToString">
            <summary>
                Returns a <see cref="T:System.String" /> that represents this <see cref="T:MonoGame.Extended.RectangleF" />.
            </summary>
            <returns>
                A <see cref="T:System.String" /> that represents this <see cref="T:MonoGame.Extended.RectangleF" />.
            </returns>
        </member>
        <member name="T:MonoGame.Extended.Segment2">
            <summary>
                A two dimensional line segment defined by two <see cref="T:Microsoft.Xna.Framework.Vector2" /> structures, a starting point and an ending
                point.
            </summary>
            <seealso cref="T:System.IEquatable`1" />
            <seealso cref="T:MonoGame.Extended.IEquatableByRef`1" />
        </member>
        <member name="F:MonoGame.Extended.Segment2.Start">
            <summary>
                The starting <see cref="T:Microsoft.Xna.Framework.Vector2" /> of this <see cref="T:MonoGame.Extended.Segment2" />.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.Segment2.End">
            <summary>
                The ending <see cref="T:Microsoft.Xna.Framework.Vector2" /> of this <see cref="T:MonoGame.Extended.Segment2" />.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Segment2.#ctor(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
                Initializes a new instance of the <see cref="T:MonoGame.Extended.Segment2" /> structure from the specified starting and ending
                <see cref="T:Microsoft.Xna.Framework.Vector2" /> structures.
            </summary>
            <param name="start">The starting point.</param>
            <param name="end">The ending point.</param>
        </member>
        <member name="M:MonoGame.Extended.Segment2.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:MonoGame.Extended.Segment2" /> structure.
            </summary>
            <param name="x1">The starting x-coordinate.</param>
            <param name="y1">The starting y-coordinate.</param>
            <param name="x2">The ending x-coordinate.</param>
            <param name="y2">The ending y-coordinate.</param>
        </member>
        <member name="M:MonoGame.Extended.Segment2.ClosestPointTo(Microsoft.Xna.Framework.Vector2)">
            <summary>
                Computes the closest <see cref="T:Microsoft.Xna.Framework.Vector2" /> on this <see cref="T:MonoGame.Extended.Segment2" /> to a specified <see cref="T:Microsoft.Xna.Framework.Vector2" />.
            </summary>
            <param name="point">The point.</param>
            <returns>The closest <see cref="T:Microsoft.Xna.Framework.Vector2" /> on this <see cref="T:MonoGame.Extended.Segment2" /> to the <paramref name="point" />.</returns>
        </member>
        <member name="M:MonoGame.Extended.Segment2.SquaredDistanceTo(Microsoft.Xna.Framework.Vector2)">
            <summary>
                Computes the squared distance from this <see cref="T:MonoGame.Extended.Segment2" /> to a specified <see cref="T:Microsoft.Xna.Framework.Vector2" />.
            </summary>
            <param name="point">The point.</param>
            <returns>The squared distance from this <see cref="T:MonoGame.Extended.Segment2" /> to a specified <see cref="T:Microsoft.Xna.Framework.Vector2" />.</returns>
        </member>
        <member name="M:MonoGame.Extended.Segment2.DistanceTo(Microsoft.Xna.Framework.Vector2)">
            <summary>
                Computes the distance from this <see cref="T:MonoGame.Extended.Segment2" /> to a specified <see cref="T:Microsoft.Xna.Framework.Vector2" />.
            </summary>
            <param name="point">The point.</param>
            <returns>The distance from this <see cref="T:MonoGame.Extended.Segment2" /> to a specified <see cref="T:Microsoft.Xna.Framework.Vector2" />.</returns>
        </member>
        <member name="M:MonoGame.Extended.Segment2.Intersects(MonoGame.Extended.RectangleF,Microsoft.Xna.Framework.Vector2@)">
            <summary>
                Determines whether this <see cref="T:MonoGame.Extended.Segment2" /> intersects with the specified <see cref="T:MonoGame.Extended.BoundingRectangle" />.
            </summary>
            <param name="rectangle">The bounding box.</param>
            <param name="intersectionPoint">
                When this method returns, contains the <see cref="T:Microsoft.Xna.Framework.Vector2" /> of intersection, if an
                intersection was found; otherwise, the <see cref="!:Vector2.NaN" />. This parameter is passed uninitialized.
            </param>
            <returns>
                <c>true</c> if this <see cref="T:MonoGame.Extended.Segment2" /> intersects with <paramref name="rectangle" />; otherwise,
                <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Segment2.Intersects(MonoGame.Extended.BoundingRectangle,Microsoft.Xna.Framework.Vector2@)">
            <summary>
                Determines whether this <see cref="T:MonoGame.Extended.Segment2" /> intersects with the specified <see cref="T:MonoGame.Extended.BoundingRectangle" />.
            </summary>
            <param name="boundingRectangle">The bounding box.</param>
            <param name="intersectionPoint">
                When this method returns, contains the <see cref="T:Microsoft.Xna.Framework.Vector2" /> of intersection, if an
                intersection was found; otherwise, the <see cref="!:Vector2.NaN" />. This parameter is passed uninitialized.
            </param>
            <returns>
                <c>true</c> if this <see cref="T:MonoGame.Extended.Segment2" /> intersects with <paramref name="boundingRectangle" />; otherwise,
                <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Segment2.op_Equality(MonoGame.Extended.Segment2,MonoGame.Extended.Segment2)">
            <summary>
                Compares two <see cref="T:MonoGame.Extended.Segment2" /> structures. The result specifies
                whether the values of the <see cref="F:MonoGame.Extended.Segment2.Start" /> and <see cref="F:MonoGame.Extended.Segment2.End" />
                fields of the two <see cref='T:MonoGame.Extended.Segment2' />
                structures are equal.
            </summary>
            <param name="first">The first segment.</param>
            <param name="second">The second segment.</param>
            <returns>
                <c>true</c> if the <see cref="F:MonoGame.Extended.Segment2.Start" /> and <see cref="F:MonoGame.Extended.Segment2.End" />
                fields of the two <see cref="T:MonoGame.Extended.Segment2" />
                structures are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Segment2.Equals(MonoGame.Extended.Segment2)">
            <summary>
                Indicates whether this <see cref="T:MonoGame.Extended.Segment2" /> is equal to another <see cref="T:MonoGame.Extended.Segment2" />.
            </summary>
            <param name="segment">The segment.</param>
            <returns>
                <c>true</c> if this <see cref="T:MonoGame.Extended.Segment2" /> is equal to the <paramref name="segment" />; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Segment2.Equals(MonoGame.Extended.Segment2@)">
            <summary>
                Indicates whether this <see cref="T:MonoGame.Extended.Segment2" /> is equal to another <see cref="T:MonoGame.Extended.Segment2" />.
            </summary>
            <param name="segment">The segment.</param>
            <returns>
                <c>true</c> if this <see cref="T:MonoGame.Extended.Segment2" /> is equal to the <paramref name="segment" /> parameter; otherwise,
                <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Segment2.Equals(System.Object)">
            <summary>
                Returns a value indicating whether this <see cref="T:MonoGame.Extended.Segment2" /> is equal to a specified object.
            </summary>
            <param name="obj">The object to make the comparison with.</param>
            <returns>
                <c>true</c> if this  <see cref="T:MonoGame.Extended.Segment2" /> is equal to <paramref name="obj" />; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Segment2.op_Inequality(MonoGame.Extended.Segment2,MonoGame.Extended.Segment2)">
            <summary>
                Compares two <see cref="T:MonoGame.Extended.Segment2" /> structures. The result specifies
                whether the values of the <see cref="F:MonoGame.Extended.Segment2.Start" /> and <see cref="F:MonoGame.Extended.Segment2.End" />
                fields of the two <see cref="T:MonoGame.Extended.Segment2" />
                structures are unequal.
            </summary>
            <param name="first">The first point.</param>
            <param name="second">The second point.</param>
            <returns>
                <c>true</c> if the <see cref="F:MonoGame.Extended.Segment2.Start" /> and <see cref="F:MonoGame.Extended.Segment2.End" />
                fields of the two <see cref="T:MonoGame.Extended.Segment2" />
                structures are unequal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Segment2.GetHashCode">
            <summary>
                Returns a hash code of this <see cref="T:MonoGame.Extended.Segment2" /> suitable for use in hashing algorithms and data
                structures like a hash table.
            </summary>
            <returns>
                A hash code of this <see cref="T:MonoGame.Extended.Segment2" />.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Segment2.ToString">
            <summary>
                Returns a <see cref="T:System.String" /> that represents this <see cref="T:MonoGame.Extended.Segment2" />.
            </summary>
            <returns>
                A <see cref="T:System.String" /> that represents this <see cref="T:MonoGame.Extended.Segment2" />.
            </returns>
        </member>
        <member name="T:MonoGame.Extended.ShapeExtensions">
            <summary>
                Sprite batch extensions for drawing primitive shapes
            </summary>
        </member>
        <member name="M:MonoGame.Extended.ShapeExtensions.DrawPolygon(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,MonoGame.Extended.Shapes.Polygon,Microsoft.Xna.Framework.Color,System.Single,System.Single)">
            <summary>
                Draws a closed polygon from a <see cref="T:MonoGame.Extended.Shapes.Polygon" /> shape
            </summary>
            <param name="spriteBatch">The destination drawing surface</param>
            ///
            <param name="position">Where to position the polygon</param>
            <param name="polygon">The polygon to draw</param>
            <param name="color">The color to use</param>
            <param name="thickness">The thickness of the lines</param>
            /// <param name="layerDepth">The depth of the layer of this shape</param>
        </member>
        <member name="M:MonoGame.Extended.ShapeExtensions.DrawPolygon(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,System.Collections.Generic.IReadOnlyList{Microsoft.Xna.Framework.Vector2},Microsoft.Xna.Framework.Color,System.Single,System.Single)">
            <summary>
                Draws a closed polygon from an array of points
            </summary>
            <param name="spriteBatch">The destination drawing surface</param>
            ///
            <param name="offset">Where to offset the points</param>
            <param name="points">The points to connect with lines</param>
            <param name="color">The color to use</param>
            <param name="thickness">The thickness of the lines</param>
            <param name="layerDepth">The depth of the layer of this shape</param>
        </member>
        <member name="M:MonoGame.Extended.ShapeExtensions.FillRectangle(Microsoft.Xna.Framework.Graphics.SpriteBatch,MonoGame.Extended.RectangleF,Microsoft.Xna.Framework.Color,System.Single)">
            <summary>
            Draws a filled rectangle
            </summary>
            <param name="spriteBatch">The destination drawing surface</param>
            <param name="rectangle">The rectangle to draw</param>
            <param name="color">The color to draw the rectangle in</param>
            <param name="layerDepth">The depth of the layer of this shape</param>
        </member>
        <member name="M:MonoGame.Extended.ShapeExtensions.FillRectangle(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,MonoGame.Extended.SizeF,Microsoft.Xna.Framework.Color,System.Single)">
            <summary>
            Draws a filled rectangle
            </summary>
            <param name="spriteBatch">The destination drawing surface</param>
            <param name="location">Where to draw</param>
            <param name="size">The size of the rectangle</param>
            <param name="color">The color to draw the rectangle in</param>
            <param name="layerDepth">The depth of the layer of this shape</param>
        </member>
        <member name="M:MonoGame.Extended.ShapeExtensions.FillRectangle(Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Single,System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Color,System.Single)">
            <summary>
            Draws a filled rectangle
            </summary>
            <param name="spriteBatch">The destination drawing surface</param>
            <param name="x">The X coord of the left side</param>
            <param name="y">The Y coord of the upper side</param>
            <param name="width">Width</param>
            <param name="height">Height</param>
            <param name="color">The color to draw the rectangle in</param>
            <param name="layerDepth">The depth of the layer of this shape</param>
        </member>
        <member name="M:MonoGame.Extended.ShapeExtensions.DrawRectangle(Microsoft.Xna.Framework.Graphics.SpriteBatch,MonoGame.Extended.RectangleF,Microsoft.Xna.Framework.Color,System.Single,System.Single)">
            <summary>
            Draws a rectangle with the thickness provided
            </summary>
            <param name="spriteBatch">The destination drawing surface</param>
            <param name="rectangle">The rectangle to draw</param>
            <param name="color">The color to draw the rectangle in</param>
            <param name="thickness">The thickness of the lines</param>
            <param name="layerDepth">The depth of the layer of this shape</param>
        </member>
        <member name="M:MonoGame.Extended.ShapeExtensions.DrawRectangle(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,MonoGame.Extended.SizeF,Microsoft.Xna.Framework.Color,System.Single,System.Single)">
            <summary>
            Draws a rectangle with the thickness provided
            </summary>
            <param name="spriteBatch">The destination drawing surface</param>
            <param name="location">Where to draw</param>
            <param name="size">The size of the rectangle</param>
            <param name="color">The color to draw the rectangle in</param>
            <param name="thickness">The thickness of the line</param>
            <param name="layerDepth">The depth of the layer of this shape</param>
        </member>
        <member name="M:MonoGame.Extended.ShapeExtensions.DrawRectangle(Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Single,System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Color,System.Single,System.Single)">
            <summary>
            Draws a rectangle outline.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.ShapeExtensions.DrawLine(Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Single,System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Color,System.Single,System.Single)">
            <summary>
            Draws a line from point1 to point2 with an offset
            </summary>
            <param name="spriteBatch">The destination drawing surface</param>
            <param name="x1">The X coord of the first point</param>
            <param name="y1">The Y coord of the first point</param>
            <param name="x2">The X coord of the second point</param>
            <param name="y2">The Y coord of the second point</param>
            <param name="color">The color to use</param>
            <param name="thickness">The thickness of the line</param>
            <param name="layerDepth">The depth of the layer of this shape</param>
        </member>
        <member name="M:MonoGame.Extended.ShapeExtensions.DrawLine(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,System.Single,System.Single)">
            <summary>
            Draws a line from point1 to point2 with an offset
            </summary>
            <param name="spriteBatch">The destination drawing surface</param>
            <param name="point1">The first point</param>
            <param name="point2">The second point</param>
            <param name="color">The color to use</param>
            <param name="thickness">The thickness of the line</param>
            <param name="layerDepth">The depth of the layer of this shape</param>
        </member>
        <member name="M:MonoGame.Extended.ShapeExtensions.DrawLine(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,Microsoft.Xna.Framework.Color,System.Single,System.Single)">
            <summary>
            Draws a line from point1 to point2 with an offset
            </summary>
            <param name="spriteBatch">The destination drawing surface</param>
            <param name="point">The starting point</param>
            <param name="length">The length of the line</param>
            <param name="angle">The angle of this line from the starting point</param>
            <param name="color">The color to use</param>
            <param name="thickness">The thickness of the line</param>
            <param name="layerDepth">The depth of the layer of this shape</param>
        </member>
        <member name="M:MonoGame.Extended.ShapeExtensions.DrawPoint(Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Single,System.Single,Microsoft.Xna.Framework.Color,System.Single,System.Single)">
            <summary>
            Draws a point at the specified x, y position. The center of the point will be at the position.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.ShapeExtensions.DrawPoint(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,System.Single,System.Single)">
            <summary>
            Draws a point at the specified position. The center of the point will be at the position.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.ShapeExtensions.DrawCircle(Microsoft.Xna.Framework.Graphics.SpriteBatch,MonoGame.Extended.CircleF,System.Int32,Microsoft.Xna.Framework.Color,System.Single,System.Single)">
            <summary>
            Draw a circle from a <see cref="T:MonoGame.Extended.CircleF" /> shape
            </summary>
            <param name="spriteBatch">The destination drawing surface</param>
            <param name="circle">The circle shape to draw</param>
            <param name="sides">The number of sides to generate</param>
            <param name="color">The color of the circle</param>
            <param name="thickness">The thickness of the lines used</param>
            <param name="layerDepth">The depth of the layer of this shape</param>
        </member>
        <member name="M:MonoGame.Extended.ShapeExtensions.DrawCircle(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,System.Single,System.Int32,Microsoft.Xna.Framework.Color,System.Single,System.Single)">
            <summary>
            Draw a circle
            </summary>
            <param name="spriteBatch">The destination drawing surface</param>
            <param name="center">The center of the circle</param>
            <param name="radius">The radius of the circle</param>
            <param name="sides">The number of sides to generate</param>
            <param name="color">The color of the circle</param>
            <param name="thickness">The thickness of the lines used</param>
            <param name="layerDepth">The depth of the layer of this shape</param>
        </member>
        <member name="M:MonoGame.Extended.ShapeExtensions.DrawCircle(Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Single,System.Single,System.Single,System.Int32,Microsoft.Xna.Framework.Color,System.Single,System.Single)">
            <summary>
            Draw a circle
            </summary>
            <param name="spriteBatch">The destination drawing surface</param>
            <param name="x">The center X of the circle</param>
            <param name="y">The center Y of the circle</param>
            <param name="radius">The radius of the circle</param>
            <param name="sides">The number of sides to generate</param>
            <param name="color">The color of the circle</param>
            <param name="thickness">The thickness of the line</param>
            <param name="layerDepth">The depth of the layer of this shape</param>
        </member>
        <member name="M:MonoGame.Extended.ShapeExtensions.DrawEllipse(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Int32,Microsoft.Xna.Framework.Color,System.Single,System.Single)">
            <summary>
            Draw an ellipse.
            </summary>
            <param name="spriteBatch">The destination drawing surface</param>
            <param name="center">Center of the ellipse</param>
            <param name="radius">Radius of the ellipse</param>
            <param name="sides">The number of sides to generate.</param>
            <param name="color">The color of the ellipse.</param>
            <param name="thickness">The thickness of the line around the ellipse.</param>
            <param name="layerDepth">The depth of the layer of this shape</param>
        </member>
        <member name="T:MonoGame.Extended.IShapeF">
            <summary>
                Base class for shapes.
            </summary>
            <remakarks>
                Created to allow checking intersection between shapes of different types.
            </remakarks>
        </member>
        <member name="P:MonoGame.Extended.IShapeF.Position">
            <summary>
            Gets or sets the position of the shape.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.IShapeF.BoundingRectangle">
            <summary>
            Gets escribed rectangle, which lying outside the shape
            </summary>
        </member>
        <member name="T:MonoGame.Extended.Shape">
            <summary>
                Class that implements methods for shared <see cref="T:MonoGame.Extended.IShapeF" /> methods.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Shape.Intersects(MonoGame.Extended.IShapeF,MonoGame.Extended.IShapeF)">
            <summary>
                Check if two shapes intersect.
            </summary>
            <param name="a">The first shape.</param>
            <param name="b">The second shape.</param>
            <returns>True if the two shapes intersect.</returns>
        </member>
        <member name="M:MonoGame.Extended.Shape.Intersects(MonoGame.Extended.CircleF,MonoGame.Extended.RectangleF)">
            <summary>
                Checks if a circle and rectangle intersect.
            </summary>
            <param name="circle">Circle to check intersection with rectangle.</param>
            <param name="rectangle">Rectangle to check intersection with circle.</param>
            <returns>True if the circle and rectangle intersect.</returns>
        </member>
        <member name="M:MonoGame.Extended.Shape.Intersects(MonoGame.Extended.CircleF,MonoGame.Extended.OrientedRectangle)">
            <summary>
            Checks whether a <see cref="T:MonoGame.Extended.CircleF"/> and <see cref="T:MonoGame.Extended.OrientedRectangle"/> intersects.
            </summary>
            <param name="circle"><see cref="T:MonoGame.Extended.CircleF"/>to use in intersection test.</param>
            <param name="orientedRectangle"><see cref="T:MonoGame.Extended.OrientedRectangle"/>to use in intersection test.</param>
            <returns>True if the circle and oriented bounded rectangle intersects, otherwise false.</returns>
        </member>
        <member name="M:MonoGame.Extended.Shape.Intersects(MonoGame.Extended.RectangleF,MonoGame.Extended.OrientedRectangle)">
            <summary>
            Checks if a <see cref="T:MonoGame.Extended.RectangleF"/> and <see cref="T:MonoGame.Extended.OrientedRectangle"/> intersects.
            </summary>
            <param name="rectangleF"></param>
            <param name="orientedRectangle"></param>
            <returns>True if objects are intersecting, otherwise false.</returns>
        </member>
        <member name="T:MonoGame.Extended.Size">
            <summary>
                A two dimensional size defined by two real numbers, a width and a height.
            </summary>
            <remarks>
                <para>
                    A size is a subspace of two-dimensional space, the area of which is described in terms of a two-dimensional
                    coordinate system, given by a reference point and two coordinate axes.
                </para>
            </remarks>
            <seealso cref="T:System.IEquatable`1" />
            <seealso cref="T:MonoGame.Extended.IEquatableByRef`1" />
        </member>
        <member name="F:MonoGame.Extended.Size.Empty">
            <summary>
                Returns a <see cref="T:MonoGame.Extended.Size" /> with <see cref="F:MonoGame.Extended.Size.Width" /> and <see cref="F:MonoGame.Extended.Size.Height" /> equal to <c>0.0f</c>.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.Size.Width">
            <summary>
                The horizontal component of this <see cref="T:MonoGame.Extended.Size" />.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.Size.Height">
            <summary>
                The vertical component of this <see cref="T:MonoGame.Extended.Size" />.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Size.IsEmpty">
            <summary>
                Gets a value that indicates whether this <see cref="T:MonoGame.Extended.Size" /> is empty.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Size.#ctor(System.Int32,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:MonoGame.Extended.Size" /> structure from the specified dimensions.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:MonoGame.Extended.Size.op_Equality(MonoGame.Extended.Size,MonoGame.Extended.Size)">
            <summary>
                Compares two <see cref="T:MonoGame.Extended.Size" /> structures. The result specifies
                whether the values of the <see cref="F:MonoGame.Extended.Size.Width" /> and <see cref="F:MonoGame.Extended.Size.Height" />
                fields of the two <see cref="T:Microsoft.Xna.Framework.Point" /> structures are equal.
            </summary>
            <param name="first">The first size.</param>
            <param name="second">The second size.</param>
            <returns>
                <c>true</c> if the <see cref="F:MonoGame.Extended.Size.Width" /> and <see cref="F:MonoGame.Extended.Size.Height" />
                fields of the two <see cref="T:Microsoft.Xna.Framework.Point" /> structures are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Size.Equals(MonoGame.Extended.Size)">
            <summary>
                Indicates whether this <see cref="T:MonoGame.Extended.Size" /> is equal to another <see cref="T:MonoGame.Extended.Size" />.
            </summary>
            <param name="size">The size.</param>
            <returns>
                <c>true</c> if this <see cref="T:Microsoft.Xna.Framework.Point" /> is equal to the <paramref name="size" /> parameter; otherwise,
                <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Size.Equals(MonoGame.Extended.Size@)">
            <summary>
                Indicates whether this <see cref="T:MonoGame.Extended.Size" /> is equal to another <see cref="T:MonoGame.Extended.Size" />.
            </summary>
            <param name="size">The size.</param>
            <returns>
                <c>true</c> if this <see cref="T:Microsoft.Xna.Framework.Point" /> is equal to the <paramref name="size" />; otherwise,
                <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Size.Equals(System.Object)">
            <summary>
                Returns a value indicating whether this <see cref="T:MonoGame.Extended.Size" /> is equal to a specified object.
            </summary>
            <param name="obj">The object to make the comparison with.</param>
            <returns>
                <c>true</c> if this  <see cref="T:MonoGame.Extended.Size" /> is equal to <paramref name="obj" />; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Size.op_Inequality(MonoGame.Extended.Size,MonoGame.Extended.Size)">
            <summary>
                Compares two <see cref="T:MonoGame.Extended.Size" /> structures. The result specifies
                whether the values of the <see cref="F:MonoGame.Extended.Size.Width" /> or <see cref="F:MonoGame.Extended.Size.Height" />
                fields of the two <see cref="T:MonoGame.Extended.Size" /> structures are unequal.
            </summary>
            <param name="first">The first size.</param>
            <param name="second">The second size.</param>
            <returns>
                <c>true</c> if the <see cref="F:MonoGame.Extended.Size.Width" /> or <see cref="F:MonoGame.Extended.Size.Height" />
                fields of the two <see cref="T:MonoGame.Extended.Size" /> structures are unequal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Size.op_Addition(MonoGame.Extended.Size,MonoGame.Extended.Size)">
            <summary>
                Calculates the <see cref="T:MonoGame.Extended.Size" /> representing the vector addition of two <see cref="T:MonoGame.Extended.Size" /> structures as if
                they
                were <see cref="T:Microsoft.Xna.Framework.Vector2" /> structures.
            </summary>
            <param name="first">The first size.</param>
            <param name="second">The second size.</param>
            <returns>
                The <see cref="T:MonoGame.Extended.Size" /> representing the vector addition of two <see cref="T:MonoGame.Extended.Size" /> structures as if they
                were <see cref="T:Microsoft.Xna.Framework.Vector2" /> structures.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Size.Add(MonoGame.Extended.Size,MonoGame.Extended.Size)">
            <summary>
                Calculates the <see cref="T:MonoGame.Extended.Size" /> representing the vector addition of two <see cref="T:MonoGame.Extended.Size" /> structures.
            </summary>
            <param name="first">The first size.</param>
            <param name="second">The second size.</param>
            <returns>
                The <see cref="T:MonoGame.Extended.Size" /> representing the vector addition of two <see cref="T:MonoGame.Extended.Size" /> structures.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Size.op_Subtraction(MonoGame.Extended.Size,MonoGame.Extended.Size)">
            <summary>
            Calculates the <see cref="T:MonoGame.Extended.Size" /> representing the vector subtraction of two <see cref="T:MonoGame.Extended.Size" /> structures.
            </summary>
            <param name="first">The first size.</param>
            <param name="second">The second size.</param>
            <returns>
                The <see cref="T:MonoGame.Extended.Size" /> representing the vector subtraction of two <see cref="T:MonoGame.Extended.Size" /> structures.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Size.Subtract(MonoGame.Extended.Size,MonoGame.Extended.Size)">
            <summary>
                Calculates the <see cref="T:MonoGame.Extended.Size" /> representing the vector subtraction of two <see cref="T:MonoGame.Extended.Size" /> structures.
            </summary>
            <param name="first">The first size.</param>
            <param name="second">The second size.</param>
            <returns>
                The <see cref="T:MonoGame.Extended.Size" /> representing the vector subtraction of two <see cref="T:MonoGame.Extended.Size" /> structures.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Size.GetHashCode">
            <summary>
                Returns a hash code of this <see cref="T:MonoGame.Extended.Size" /> suitable for use in hashing algorithms and data
                structures like a hash table.
            </summary>
            <returns>
                A hash code of this <see cref="T:Microsoft.Xna.Framework.Point" />.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Size.op_Implicit(Microsoft.Xna.Framework.Point)~MonoGame.Extended.Size">
            <summary>
                Performs an implicit conversion from a <see cref="T:Microsoft.Xna.Framework.Point" /> to a <see cref="T:MonoGame.Extended.Size" />.
            </summary>
            <param name="point">The point.</param>
            <returns>
                The resulting <see cref="T:MonoGame.Extended.Size" />.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Size.op_Implicit(MonoGame.Extended.Size)~Microsoft.Xna.Framework.Point">
            <summary>
                Performs an implicit conversion from a <see cref="T:Microsoft.Xna.Framework.Point" /> to a <see cref="T:MonoGame.Extended.Size" />.
            </summary>
            <param name="size">The size.</param>
            <returns>
                The resulting <see cref="T:Microsoft.Xna.Framework.Point" />.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Size.ToString">
            <summary>
                Returns a <see cref="T:System.String" /> that represents this <see cref="T:MonoGame.Extended.Size" />.
            </summary>
            <returns>
                A <see cref="T:System.String" /> that represents this <see cref="T:MonoGame.Extended.Size" />.
            </returns>
        </member>
        <member name="T:MonoGame.Extended.SizeF">
            <summary>
                A two dimensional size defined by two real numbers, a width and a height.
            </summary>
            <remarks>
                <para>
                    A size is a subspace of two-dimensional space, the area of which is described in terms of a two-dimensional
                    coordinate system, given by a reference point and two coordinate axes.
                </para>
            </remarks>
            <seealso cref="T:System.IEquatable`1" />
            <seealso cref="T:MonoGame.Extended.IEquatableByRef`1" />
        </member>
        <member name="F:MonoGame.Extended.SizeF.Empty">
            <summary>
                Returns a <see cref="T:MonoGame.Extended.SizeF" /> with <see cref="F:MonoGame.Extended.SizeF.Width" /> and <see cref="F:MonoGame.Extended.SizeF.Height" /> equal to <c>0.0f</c>.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.SizeF.Width">
            <summary>
                The horizontal component of this <see cref="T:MonoGame.Extended.SizeF" />.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.SizeF.Height">
            <summary>
                The vertical component of this <see cref="T:MonoGame.Extended.SizeF" />.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.SizeF.IsEmpty">
            <summary>
                Gets a value that indicates whether this <see cref="T:MonoGame.Extended.SizeF" /> is empty.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.SizeF.#ctor(System.Single,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:MonoGame.Extended.SizeF" /> structure from the specified dimensions.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:MonoGame.Extended.SizeF.op_Equality(MonoGame.Extended.SizeF,MonoGame.Extended.SizeF)">
            <summary>
                Compares two <see cref="T:MonoGame.Extended.SizeF" /> structures. The result specifies
                whether the values of the <see cref="F:MonoGame.Extended.SizeF.Width" /> and <see cref="F:MonoGame.Extended.SizeF.Height" />
                fields of the two <see cref="T:Microsoft.Xna.Framework.Vector2" /> structures are equal.
            </summary>
            <param name="first">The first size.</param>
            <param name="second">The second size.</param>
            <returns>
                <c>true</c> if the <see cref="F:MonoGame.Extended.SizeF.Width" /> and <see cref="F:MonoGame.Extended.SizeF.Height" />
                fields of the two <see cref="T:Microsoft.Xna.Framework.Vector2" /> structures are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.SizeF.Equals(MonoGame.Extended.SizeF)">
            <summary>
                Indicates whether this <see cref="T:MonoGame.Extended.SizeF" /> is equal to another <see cref="T:MonoGame.Extended.SizeF" />.
            </summary>
            <param name="size">The size.</param>
            <returns>
                <c>true</c> if this <see cref="T:Microsoft.Xna.Framework.Vector2" /> is equal to the <paramref name="size" /> parameter; otherwise,
                <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.SizeF.Equals(MonoGame.Extended.SizeF@)">
            <summary>
                Indicates whether this <see cref="T:MonoGame.Extended.SizeF" /> is equal to another <see cref="T:MonoGame.Extended.SizeF" />.
            </summary>
            <param name="size">The size.</param>
            <returns>
                <c>true</c> if this <see cref="T:Microsoft.Xna.Framework.Vector2" /> is equal to the <paramref name="size" />; otherwise,
                <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.SizeF.Equals(System.Object)">
            <summary>
                Returns a value indicating whether this <see cref="T:MonoGame.Extended.SizeF" /> is equal to a specified object.
            </summary>
            <param name="obj">The object to make the comparison with.</param>
            <returns>
                <c>true</c> if this  <see cref="T:MonoGame.Extended.SizeF" /> is equal to <paramref name="obj" />; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.SizeF.op_Inequality(MonoGame.Extended.SizeF,MonoGame.Extended.SizeF)">
            <summary>
                Compares two <see cref="T:MonoGame.Extended.SizeF" /> structures. The result specifies
                whether the values of the <see cref="F:MonoGame.Extended.SizeF.Width" /> or <see cref="F:MonoGame.Extended.SizeF.Height" />
                fields of the two <see cref="T:MonoGame.Extended.SizeF" /> structures are unequal.
            </summary>
            <param name="first">The first size.</param>
            <param name="second">The second size.</param>
            <returns>
                <c>true</c> if the <see cref="F:MonoGame.Extended.SizeF.Width" /> or <see cref="F:MonoGame.Extended.SizeF.Height" />
                fields of the two <see cref="T:MonoGame.Extended.SizeF" /> structures are unequal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.SizeF.op_Addition(MonoGame.Extended.SizeF,MonoGame.Extended.SizeF)">
            <summary>
                Calculates the <see cref="T:MonoGame.Extended.SizeF" /> representing the vector addition of two <see cref="T:MonoGame.Extended.SizeF" /> structures as if
                they
                were <see cref="T:Microsoft.Xna.Framework.Vector2" /> structures.
            </summary>
            <param name="first">The first size.</param>
            <param name="second">The second size.</param>
            <returns>
                The <see cref="T:MonoGame.Extended.SizeF" /> representing the vector addition of two <see cref="T:MonoGame.Extended.SizeF" /> structures as if they
                were <see cref="T:Microsoft.Xna.Framework.Vector2" /> structures.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.SizeF.Add(MonoGame.Extended.SizeF,MonoGame.Extended.SizeF)">
            <summary>
                Calculates the <see cref="T:MonoGame.Extended.SizeF" /> representing the vector addition of two <see cref="T:MonoGame.Extended.SizeF" /> structures.
            </summary>
            <param name="first">The first size.</param>
            <param name="second">The second size.</param>
            <returns>
                The <see cref="T:MonoGame.Extended.SizeF" /> representing the vector addition of two <see cref="T:MonoGame.Extended.SizeF" /> structures.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.SizeF.op_Subtraction(MonoGame.Extended.SizeF,MonoGame.Extended.SizeF)">
            <summary>
            Calculates the <see cref="T:MonoGame.Extended.SizeF" /> representing the vector subtraction of two <see cref="T:MonoGame.Extended.SizeF" /> structures.
            </summary>
            <param name="first">The first size.</param>
            <param name="second">The second size.</param>
            <returns>
                The <see cref="T:MonoGame.Extended.SizeF" /> representing the vector subtraction of two <see cref="T:MonoGame.Extended.SizeF" /> structures.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.SizeF.Subtract(MonoGame.Extended.SizeF,MonoGame.Extended.SizeF)">
            <summary>
                Calculates the <see cref="T:MonoGame.Extended.SizeF" /> representing the vector subtraction of two <see cref="T:MonoGame.Extended.SizeF" /> structures.
            </summary>
            <param name="first">The first size.</param>
            <param name="second">The second size.</param>
            <returns>
                The <see cref="T:MonoGame.Extended.SizeF" /> representing the vector subtraction of two <see cref="T:MonoGame.Extended.SizeF" /> structures.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.SizeF.GetHashCode">
            <summary>
                Returns a hash code of this <see cref="T:MonoGame.Extended.SizeF" /> suitable for use in hashing algorithms and data
                structures like a hash table.
            </summary>
            <returns>
                A hash code of this <see cref="T:Microsoft.Xna.Framework.Vector2" />.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.SizeF.op_Implicit(Microsoft.Xna.Framework.Vector2)~MonoGame.Extended.SizeF">
            <summary>
                Performs an implicit conversion from a <see cref="T:Microsoft.Xna.Framework.Vector2" /> to a <see cref="T:MonoGame.Extended.SizeF" />.
            </summary>
            <param name="point">The point.</param>
            <returns>
                The resulting <see cref="T:MonoGame.Extended.SizeF" />.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.SizeF.op_Implicit(Microsoft.Xna.Framework.Point)~MonoGame.Extended.SizeF">
            <summary>
                Performs an implicit conversion from a <see cref="T:Microsoft.Xna.Framework.Point" /> to a <see cref="T:MonoGame.Extended.SizeF" />.
            </summary>
            <param name="point">The point.</param>
            <returns>
                The resulting <see cref="T:MonoGame.Extended.SizeF" />.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.SizeF.op_Implicit(MonoGame.Extended.SizeF)~Microsoft.Xna.Framework.Vector2">
            <summary>
                Performs an implicit conversion from a <see cref="T:Microsoft.Xna.Framework.Vector2" /> to a <see cref="T:MonoGame.Extended.SizeF" />.
            </summary>
            <param name="size">The size.</param>
            <returns>
                The resulting <see cref="T:Microsoft.Xna.Framework.Vector2" />.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.SizeF.op_Explicit(MonoGame.Extended.SizeF)~Microsoft.Xna.Framework.Point">
            <summary>
                Performs an explicit conversion from a <see cref="!:Size2" /> to a <see cref="T:Microsoft.Xna.Framework.Point" />.
            </summary>
            <param name="size">The size.</param>
            <returns>
                The resulting <see cref="!:Size2" />.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.SizeF.ToString">
            <summary>
                Returns a <see cref="T:System.String" /> that represents this <see cref="T:MonoGame.Extended.SizeF" />.
            </summary>
            <returns>
                A <see cref="T:System.String" /> that represents this <see cref="T:MonoGame.Extended.SizeF" />.
            </returns>
        </member>
        <member name="T:MonoGame.Extended.Triangulation.CyclicalList`1">
            <summary>
            Implements a List structure as a cyclical list where indices are wrapped.
            </summary>
            MIT Licensed: https://github.com/nickgravelyn/Triangulator
            <typeparam name="T">The Type to hold in the list.</typeparam>
        </member>
        <member name="T:MonoGame.Extended.Triangulation.IndexableCyclicalLinkedList`1">
            <summary>
            Implements a LinkedList that is both indexable as well as cyclical. Thus
            indexing into the list with an out-of-bounds index will automatically cycle
            around the list to find a valid node.
            </summary>
            MIT Licensed: https://github.com/nickgravelyn/Triangulator
        </member>
        <member name="P:MonoGame.Extended.Triangulation.IndexableCyclicalLinkedList`1.Item(System.Int32)">
            <summary>
            Gets the LinkedListNode at a particular index.
            </summary>
            <param name="index">The index of the node to retrieve.</param>
            <returns>The LinkedListNode found at the index given.</returns>
        </member>
        <member name="M:MonoGame.Extended.Triangulation.IndexableCyclicalLinkedList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the node at a given index.
            </summary>
            <param name="index">The index of the node to remove.</param>
        </member>
        <member name="M:MonoGame.Extended.Triangulation.IndexableCyclicalLinkedList`1.IndexOf(`0)">
            <summary>
            Finds the index of a given item.
            </summary>
            <param name="item">The item to find.</param>
            <returns>The index of the item if found; -1 if the item is not found.</returns>
        </member>
        <member name="T:MonoGame.Extended.Triangulation.LineSegment">
            <summary>
            MIT Licensed: https://github.com/nickgravelyn/Triangulator
            </summary>
        </member>
        <member name="T:MonoGame.Extended.Triangulation.Triangle">
            <summary>
            A basic triangle structure that holds the three vertices that make up a given triangle.
            MIT Licensed: https://github.com/nickgravelyn/Triangulator
            </summary>
        </member>
        <member name="T:MonoGame.Extended.Triangulation.Triangulator">
            <summary>
            MIT Licensed: https://github.com/nickgravelyn/Triangulator
            
            A static class exposing methods for triangulating 2D polygons. This is the sole public
            class in the entire library; all other classes/structures are intended as internal-only
            objects used only to assist in triangulation.
            
            This class makes use of the DEBUG conditional and produces quite verbose output when built
            in Debug mode. This is quite useful for debugging purposes, but can slow the process down
            quite a bit. For optimal performance, build the library in Release mode.
            
            The triangulation is also not optimized for garbage sensitive processing. The point of the
            library is a robust, yet simple, system for triangulating 2D shapes. It is intended to be
            used as part of your content pipeline or at load-time. It is not something you want to be
            using each and every frame unless you really don't care about garbage.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Triangulation.Triangulator.Triangulate(Microsoft.Xna.Framework.Vector2[],MonoGame.Extended.Triangulation.WindingOrder,Microsoft.Xna.Framework.Vector2[]@,System.Int32[]@)">
            <summary>
            Triangulates a 2D polygon produced the indexes required to render the points as a triangle list.
            </summary>
            <param name="inputVertices">The polygon vertices in counter-clockwise winding order.</param>
            <param name="desiredWindingOrder">The desired output winding order.</param>
            <param name="outputVertices">The resulting vertices that include any reversals of winding order and holes.</param>
            <param name="indices">The resulting indices for rendering the shape as a triangle list.</param>
        </member>
        <member name="M:MonoGame.Extended.Triangulation.Triangulator.CutHoleInShape(Microsoft.Xna.Framework.Vector2[],Microsoft.Xna.Framework.Vector2[])">
            <summary>
            Cuts a hole into a shape.
            </summary>
            <param name="shapeVerts">An array of vertices for the primary shape.</param>
            <param name="holeVerts">An array of vertices for the hole to be cut. It is assumed that these vertices lie completely within the shape verts.</param>
            <returns>The new array of vertices that can be passed to Triangulate to properly triangulate the shape with the hole.</returns>
        </member>
        <member name="M:MonoGame.Extended.Triangulation.Triangulator.EnsureWindingOrder(Microsoft.Xna.Framework.Vector2[],MonoGame.Extended.Triangulation.WindingOrder)">
            <summary>
            Ensures that a set of vertices are wound in a particular order, reversing them if necessary.
            </summary>
            <param name="vertices">The vertices of the polygon.</param>
            <param name="windingOrder">The desired winding order.</param>
            <returns>A new set of vertices if the winding order didn't match; otherwise the original set.</returns>
        </member>
        <member name="M:MonoGame.Extended.Triangulation.Triangulator.ReverseWindingOrder(Microsoft.Xna.Framework.Vector2[])">
            <summary>
            Reverses the winding order for a set of vertices.
            </summary>
            <param name="vertices">The vertices of the polygon.</param>
            <returns>The new vertices for the polygon with the opposite winding order.</returns>
        </member>
        <member name="M:MonoGame.Extended.Triangulation.Triangulator.DetermineWindingOrder(Microsoft.Xna.Framework.Vector2[])">
            <summary>
            Determines the winding order of a polygon given a set of vertices.
            </summary>
            <param name="vertices">The vertices of the polygon.</param>
            <returns>The calculated winding order of the polygon.</returns>
        </member>
        <member name="T:MonoGame.Extended.Triangulation.WindingOrder">
            <summary>
            Specifies a desired winding order for the shape vertices.
            </summary>
        </member>
        <member name="T:MonoGame.Extended.Triangulation.Vertex">
            <summary>
            MIT Licensed: https://github.com/nickgravelyn/Triangulator
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Vector2Extensions.Dot(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
                Calculates the dot product of two vectors. If the two vectors are unit vectors, the dot product returns a floating
                point value between -1 and 1 that can be used to determine some properties of the angle between two vectors. For
                example, it can show whether the vectors are orthogonal, parallel, or have an acute or obtuse angle between them.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The dot product of the two vectors.</returns>
            <remarks>
                <para>The dot product is also known as the inner product.</para>
                <para>
                    For any two vectors, the dot product is defined as: <c>(vector1.X * vector2.X) + (vector1.Y * vector2.Y).</c>
                    The result of this calculation, plus or minus some margin to account for floating point error, is equal to:
                    <c>Length(vector1) * Length(vector2) * System.Math.Cos(theta)</c>, where <c>theta</c> is the angle between the
                    two vectors.
                </para>
                <para>
                    If <paramref name="vector1" /> and <paramref name="vector2" /> are unit vectors, the length of each
                    vector will be equal to 1. So, when <paramref name="vector1" /> and <paramref name="vector2" /> are unit
                    vectors, the dot product is simply equal to the cosine of the angle between the two vectors. For example, both
                    <c>cos</c> values in the following calcuations would be equal in value:
                    <c>vector1.Normalize(); vector2.Normalize(); var cos = vector1.Dot(vector2)</c>,
                    <c>var cos = System.Math.Cos(theta)</c>, where <c>theta</c> is angle in radians betwen the two vectors.
                </para>
                <para>
                    If <paramref name="vector1" /> and <paramref name="vector2" /> are unit vectors, without knowing the value of
                    <c>theta</c> or using a potentially processor-intensive trigonometric function, the value of the dot product
                    can tell us the
                    following things:
                    <list type="bullet">
                        <item>
                            <description>
                                If <c>vector1.Dot(vector2) &gt; 0</c>, the angle between the two vectors
                                is less than 90 degrees.
                            </description>
                        </item>
                        <item>
                            <description>
                                If <c>vector1.Dot(vector2) &lt; 0</c>, the angle between the two vectors
                                is more than 90 degrees.
                            </description>
                        </item>
                        <item>
                            <description>
                                If <c>vector1.Dot(vector2) == 0</c>, the angle between the two vectors
                                is 90 degrees; that is, the vectors are othogonal.
                            </description>
                        </item>
                        <item>
                            <description>
                                If <c>vector1.Dot(vector2) == 1</c>, the angle between the two vectors
                                is 0 degrees; that is, the vectors point in the same direction and are parallel.
                            </description>
                        </item>
                        <item>
                            <description>
                                If <c>vector1.Dot(vector2) == -1</c>, the angle between the two vectors
                                is 180 degrees; that is, the vectors point in opposite directions and are parallel.
                            </description>
                        </item>
                    </list>
                </para>
                <note type="caution">
                    Because of floating point error, two orthogonal vectors may not return a dot product that is exactly zero. It
                    might be zero plus some amount of floating point error. In your code, you will want to determine what amount of
                    error is acceptable in your calculation, and take that into account when you do your comparisons.
                </note>
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Vector2Extensions.ScalarProjectOnto(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
                Calculates the scalar projection of one vector onto another. The scalar projection returns the length of the
                orthogonal projection of the first vector onto a straight line parallel to the second vector, with a negative value
                if the projection has an opposite direction with respect to the second vector.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The scalar projection of <paramref name="vector1" /> onto <paramref name="vector2" />.</returns>
            <remarks>
                <para>
                    The scalar projection is also known as the scalar resolute of the first vector in the direction of the second
                    vector.
                </para>
                <para>
                    For any two vectors, the scalar projection is defined as: <c>vector1.Dot(vector2) / Length(vector2)</c>. The
                    result of this calculation, plus or minus some margin to account for floating point error, is equal to:
                    <c>Length(vector1) * System.Math.Cos(theta)</c>, where <c>theta</c> is the angle in radians between
                    <paramref name="vector1" /> and <paramref name="vector2" />.
                </para>
                <para>
                    The value of the scalar projection can tell us the following things:
                    <list type="bullet">
                        <item>
                            <description>
                                If <c>vector1.ScalarProjectOnto(vector2) &gt;= 0</c>, the angle between <paramref name="vector1" />
                                and <paramref name="vector2" /> is between 0 degrees (exclusive) and 90 degrees (inclusive).
                            </description>
                        </item>
                        <item>
                            <description>
                                If <c>vector1.ScalarProjectOnto(vector2) &lt; 0</c>, the angle between <paramref name="vector1" />
                                and <paramref name="vector2" /> is between 90 degrees (exclusive) and 180 degrees (inclusive).
                            </description>
                        </item>
                    </list>
                </para>
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Vector2Extensions.ProjectOnto(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
                Calculates the vector projection of one vector onto another. The vector projection returns the orthogonal
                projection of the first vector onto a straight line parallel to the second vector.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The vector projection of <paramref name="vector1" /> onto <paramref name="vector2" />.</returns>
            <remarks>
                <para>
                    The vector projection is also known as the vector component or vector resolute of the first vector in the
                    direction of the second vector.
                </para>
                <para>
                    For any two vectors, the vector projection is defined as:
                    <c>( vector1.Dot(vector2) / Length(vector2)^2 ) * vector2</c>.
                    The
                    result of this calculation, plus or minus some margin to account for floating point error, is equal to:
                    <c>( Length(vector1) * System.Math.Cos(theta) ) * vector2 / Length(vector2)</c>, where <c>theta</c> is the
                    angle in radians between <paramref name="vector1" /> and <paramref name="vector2" />.
                </para>
                <para>
                    This function is easier to compute than <see cref="M:MonoGame.Extended.Vector2Extensions.ScalarProjectOnto(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)" /> since it does not use a square root.
                    When the vector projection and the scalar projection is required, consider using this function; the scalar
                    projection can be obtained by taking the length of the projection vector.
                </para>
            </remarks>
        </member>
        <member name="T:MonoGame.Extended.Particles.Data.Particle">
            <summary>
            Represents an individual particle within the particle system.
            </summary>
            <remarks>
            The struct uses sequential layout with tight packing to optimize memory usage and performance.
            The fixed arrays are used to store positional, velocity, and color data efficiently in unmanaged memory.
            </remarks>
        </member>
        <member name="F:MonoGame.Extended.Particles.Data.Particle.Inception">
            <summary>
            The time (in seconds) when this particle was created.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.Particles.Data.Particle.Age">
            <summary>
            The current age (in seconds) of this particle.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.Particles.Data.Particle.Position">
            <summary>
            The current position of this particle in 2D space [X, Y].
            </summary>
        </member>
        <member name="F:MonoGame.Extended.Particles.Data.Particle.Velocity">
            <summary>
            The current velocity vector of this particle [X, Y].
            </summary>
        </member>
        <member name="F:MonoGame.Extended.Particles.Data.Particle.Color">
            <summary>
            The color of this particle in RGB format [R, G, B].
            </summary>
        </member>
        <member name="F:MonoGame.Extended.Particles.Data.Particle.Scale">
            <summary>
            The scale factor applied to this particle's visual representation.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.Particles.Data.Particle.TriggeredPos">
            <summary>
            The position where this particle was triggered or emitted from [X, Y].
            </summary>
        </member>
        <member name="F:MonoGame.Extended.Particles.Data.Particle.Opacity">
            <summary>
            The opacity (alpha) value of this particle, ranging from 0.0 (transparent) to 1.0 (opaque).
            </summary>
        </member>
        <member name="F:MonoGame.Extended.Particles.Data.Particle.Rotation">
            <summary>
            The rotation of this particle in radians.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.Particles.Data.Particle.Mass">
            <summary>
            The mass of this particle used during physics calculations.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.Particles.Data.Particle.LayerDepth">
            <summary>
            The depth at which this particle is rendered, used for layering particles.
            </summary>
            <remarks>
            Values range from 0.0 (front) to 1.0 (back).
            </remarks>
        </member>
        <member name="F:MonoGame.Extended.Particles.Data.Particle.SizeInBytes">
            <summary>
            The size of the <see cref="T:MonoGame.Extended.Particles.Data.Particle"/> struct in bytes.
            </summary>
            <remarks>
            Used for memory allocations and buffer operations.
            </remarks>
        </member>
        <member name="T:MonoGame.Extended.Particles.Data.ParticleColorParameter">
            <summary>
            Represents a color parameter for particle properties that can be either a constant color value
            or a randomly generated color within a specified range.
            </summary>
            <remarks>
            This struct uses <see cref="T:Microsoft.Xna.Framework.Vector3"/> to represent color values, the HSL color space.
            </remarks>
        </member>
        <member name="F:MonoGame.Extended.Particles.Data.ParticleColorParameter.Kind">
            <summary>
            The <see cref="T:MonoGame.Extended.Particles.Data.ParticleValueKind"/> that determines whether this parameter uses a constant value or a randomly
            generated value.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.Particles.Data.ParticleColorParameter.Constant">
            <summary>
            The constant color value when <see cref="F:MonoGame.Extended.Particles.Data.ParticleColorParameter.Kind"/> is set to <see cref="F:MonoGame.Extended.Particles.Data.ParticleValueKind.Constant"/>.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.Particles.Data.ParticleColorParameter.RandomMin">
            <summary>
            The minimum color values of the range when <see cref="F:MonoGame.Extended.Particles.Data.ParticleColorParameter.Kind"/> is set to <see cref="F:MonoGame.Extended.Particles.Data.ParticleValueKind.Random"/>.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.Particles.Data.ParticleColorParameter.RandomMax">
            <summary>
            The maximum color values of the range when <see cref="F:MonoGame.Extended.Particles.Data.ParticleColorParameter.Kind"/> is set to <see cref="F:MonoGame.Extended.Particles.Data.ParticleValueKind.Random"/>.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Particles.Data.ParticleColorParameter.Value">
            <summary>
            Gets the current color value of this parameter based on its <see cref="F:MonoGame.Extended.Particles.Data.ParticleColorParameter.Kind"/>.
            </summary>
            <remarks>
            If <see cref="F:MonoGame.Extended.Particles.Data.ParticleColorParameter.Kind"/> is <see cref="F:MonoGame.Extended.Particles.Data.ParticleValueKind.Constant"/>, returns <see cref="F:MonoGame.Extended.Particles.Data.ParticleColorParameter.Constant"/>.
            If <see cref="F:MonoGame.Extended.Particles.Data.ParticleColorParameter.Kind"/> is <see cref="F:MonoGame.Extended.Particles.Data.ParticleValueKind.Random"/>, returns a random color where each component
            is a random value between the corresponding components of <see cref="F:MonoGame.Extended.Particles.Data.ParticleColorParameter.RandomMin"/> and <see cref="F:MonoGame.Extended.Particles.Data.ParticleColorParameter.RandomMax"/>.
            The vector components represent HSL.
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Particles.Data.ParticleColorParameter.#ctor(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoGame.Extended.Particles.Data.ParticleColorParameter"/> struct with a constant color value.
            </summary>
            <param name="value">The constant color value for this parameter.</param>
        </member>
        <member name="M:MonoGame.Extended.Particles.Data.ParticleColorParameter.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoGame.Extended.Particles.Data.ParticleColorParameter"/> struct with a random color range.
            </summary>
            <param name="rangeStart">The minimum color values of the random range.</param>
            <param name="rangeEnd">The maximum color values of the random range.</param>
        </member>
        <member name="M:MonoGame.Extended.Particles.Data.ParticleColorParameter.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current parameter.
            </summary>
            <param name="obj">The object to compare with the current parameter.</param>
            <returns>
            <see langword="true"/> if the specified object is equal tot he current parameter;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Particles.Data.ParticleColorParameter.Equals(MonoGame.Extended.Particles.Data.ParticleColorParameter)">
            <summary>
            Determines whether the specified parameter is equal to the current parameter.
            </summary>
            <param name="other">The parameter to compare with the current parameter.</param>
            <returns>
            <see langword="true"/> if the specified parameter is equal to the current parameter;
            otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            When <see cref="F:MonoGame.Extended.Particles.Data.ParticleColorParameter.Kind"/> is <see cref="F:MonoGame.Extended.Particles.Data.ParticleValueKind.Constant"/> only the <see cref="F:MonoGame.Extended.Particles.Data.ParticleColorParameter.Constant"/> values are
            compared.
            When <see cref="F:MonoGame.Extended.Particles.Data.ParticleColorParameter.Kind"/> is <see cref="F:MonoGame.Extended.Particles.Data.ParticleValueKind.Random"/>, both <see cref="F:MonoGame.Extended.Particles.Data.ParticleColorParameter.RandomMin"/> and
            <see cref="F:MonoGame.Extended.Particles.Data.ParticleColorParameter.RandomMax"/> values are compared.
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Particles.Data.ParticleColorParameter.GetHashCode">
            <summary>
            Returns the hash code for this parameter.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
            <remarks>
            When <see cref="F:MonoGame.Extended.Particles.Data.ParticleColorParameter.Kind"/> is <see cref="F:MonoGame.Extended.Particles.Data.ParticleValueKind.Constant"/>, returns the hash of <see cref="F:MonoGame.Extended.Particles.Data.ParticleColorParameter.Constant"/>.
            When <see cref="F:MonoGame.Extended.Particles.Data.ParticleColorParameter.Kind"/> is <see cref="F:MonoGame.Extended.Particles.Data.ParticleValueKind.Random"/> returns the combined has of
            <see cref="F:MonoGame.Extended.Particles.Data.ParticleColorParameter.RandomMin"/> and <see cref="F:MonoGame.Extended.Particles.Data.ParticleColorParameter.RandomMax"/>.
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Particles.Data.ParticleColorParameter.op_Equality(MonoGame.Extended.Particles.Data.ParticleColorParameter,MonoGame.Extended.Particles.Data.ParticleColorParameter)">
            <summary>
            Determines whether two parameters are equal.
            </summary>
            <param name="lhs">The first parameter to compare.</param>
            <param name="rhs">The second parameter to compare.</param>
            <returns>
            <see langword="true"/> if the parameters are equal; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Particles.Data.ParticleColorParameter.op_Inequality(MonoGame.Extended.Particles.Data.ParticleColorParameter,MonoGame.Extended.Particles.Data.ParticleColorParameter)">
            <summary>
            Determines whether two parameters are not equal.
            </summary>
            <param name="lhs">The first parameter to compare.</param>
            <param name="rhs">The second parameter to compare.</param>
            <returns>
            <see langword="true"/> if the parameters are not equal; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:MonoGame.Extended.Particles.Data.ParticleFloatParameter">
            <summary>
            Represents an floating-point number parameter for particle properties that can be either a constant value or a
            randomly generated value within a specified range.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.Particles.Data.ParticleFloatParameter.Kind">
            <summary>
            The <see cref="T:MonoGame.Extended.Particles.Data.ParticleValueKind"/> that determines whether this parameter uses a constant value or a randomly
            generated value.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.Particles.Data.ParticleFloatParameter.Constant">
            <summary>
            The constant value when <see cref="F:MonoGame.Extended.Particles.Data.ParticleFloatParameter.Kind"/> is <see cref="F:MonoGame.Extended.Particles.Data.ParticleValueKind.Constant"/>.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.Particles.Data.ParticleFloatParameter.RandomMin">
            <summary>
            The minimum value of the range when <see cref="F:MonoGame.Extended.Particles.Data.ParticleFloatParameter.Kind"/> is <see cref="F:MonoGame.Extended.Particles.Data.ParticleValueKind.Random"/>.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.Particles.Data.ParticleFloatParameter.RandomMax">
            <summary>
            The maximum value of the range when <see cref="F:MonoGame.Extended.Particles.Data.ParticleFloatParameter.Kind"/> is <see cref="F:MonoGame.Extended.Particles.Data.ParticleValueKind.Random"/>.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Particles.Data.ParticleFloatParameter.Value">
            <summary>
            Gets the current value of this parameter based on its <see cref="F:MonoGame.Extended.Particles.Data.ParticleFloatParameter.Kind"/>
            </summary>
            <remarks>
            If <see cref="F:MonoGame.Extended.Particles.Data.ParticleFloatParameter.Kind"/> is <see cref="F:MonoGame.Extended.Particles.Data.ParticleValueKind.Constant"/>, returns <see cref="F:MonoGame.Extended.Particles.Data.ParticleFloatParameter.Constant"/>.
            If <see cref="F:MonoGame.Extended.Particles.Data.ParticleFloatParameter.Kind"/> is <see cref="F:MonoGame.Extended.Particles.Data.ParticleValueKind.Random"/>, returns a random value between
            <see cref="F:MonoGame.Extended.Particles.Data.ParticleFloatParameter.RandomMin"/> and <see cref="F:MonoGame.Extended.Particles.Data.ParticleFloatParameter.RandomMax"/>.
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Particles.Data.ParticleFloatParameter.#ctor(System.Single)">
            <summary>
            Initializes a new <see cref="T:MonoGame.Extended.Particles.Data.ParticleFloatParameter"/> value with a constant value.
            </summary>
            <param name="value">The constant value for this parameter.</param>
        </member>
        <member name="M:MonoGame.Extended.Particles.Data.ParticleFloatParameter.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new <see cref="T:MonoGame.Extended.Particles.Data.ParticleFloatParameter"/> value with a random range.
            </summary>
            <param name="rangeStart">The minimum value of the random range.</param>
            <param name="rangeEnd">The maximum value of the random range.</param>
        </member>
        <member name="M:MonoGame.Extended.Particles.Data.ParticleFloatParameter.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current parameter.
            </summary>
            <param name="obj">The object to compare with the current parameter.</param>
            <returns>
            <see langword="true"/> if the specified object is equal tot he current parameter;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Particles.Data.ParticleFloatParameter.Equals(MonoGame.Extended.Particles.Data.ParticleFloatParameter)">
            <summary>
            Determines whether the specified parameter is equal to the current parameter.
            </summary>
            <param name="other">The parameter to compare with the current parameter.</param>
            <returns>
            <see langword="true"/> if the specified parameter is equal to the current parameter;
            otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            When <see cref="F:MonoGame.Extended.Particles.Data.ParticleFloatParameter.Kind"/> is <see cref="F:MonoGame.Extended.Particles.Data.ParticleValueKind.Constant"/> only the <see cref="F:MonoGame.Extended.Particles.Data.ParticleFloatParameter.Constant"/> values are
            compared.
            When <see cref="F:MonoGame.Extended.Particles.Data.ParticleFloatParameter.Kind"/> is <see cref="F:MonoGame.Extended.Particles.Data.ParticleValueKind.Random"/>, both <see cref="F:MonoGame.Extended.Particles.Data.ParticleFloatParameter.RandomMin"/> and
            <see cref="F:MonoGame.Extended.Particles.Data.ParticleFloatParameter.RandomMax"/> values are compared.
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Particles.Data.ParticleFloatParameter.GetHashCode">
            <summary>
            Returns the hash code for this parameter.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
            <remarks>
            When <see cref="F:MonoGame.Extended.Particles.Data.ParticleFloatParameter.Kind"/> is <see cref="F:MonoGame.Extended.Particles.Data.ParticleValueKind.Constant"/>, returns the hash of <see cref="F:MonoGame.Extended.Particles.Data.ParticleFloatParameter.Constant"/>.
            When <see cref="F:MonoGame.Extended.Particles.Data.ParticleFloatParameter.Kind"/> is <see cref="F:MonoGame.Extended.Particles.Data.ParticleValueKind.Random"/> returns the combined has of
            <see cref="F:MonoGame.Extended.Particles.Data.ParticleFloatParameter.RandomMin"/> and <see cref="F:MonoGame.Extended.Particles.Data.ParticleFloatParameter.RandomMax"/>.
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Particles.Data.ParticleFloatParameter.ToString">
            <summary>
            Returns a string representation of this parameter.
            </summary>
            <returns>
            When <see cref="F:MonoGame.Extended.Particles.Data.ParticleFloatParameter.Kind"/> is <see cref="F:MonoGame.Extended.Particles.Data.ParticleValueKind.Constant"/>, returns the string representation of
            <see cref="F:MonoGame.Extended.Particles.Data.ParticleFloatParameter.Constant"/>.
            When <see cref="F:MonoGame.Extended.Particles.Data.ParticleFloatParameter.Kind"/> is <see cref="F:MonoGame.Extended.Particles.Data.ParticleValueKind.Random"/>, returns a string in the format
            "MinValue, MaxValue".
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Particles.Data.ParticleFloatParameter.op_Equality(MonoGame.Extended.Particles.Data.ParticleFloatParameter,MonoGame.Extended.Particles.Data.ParticleFloatParameter)">
            <summary>
            Determines whether two parameters are equal.
            </summary>
            <param name="lhs">The first parameter to compare.</param>
            <param name="rhs">The second parameter to compare.</param>
            <returns>
            <see langword="true"/> if the parameters are equal; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Particles.Data.ParticleFloatParameter.op_Inequality(MonoGame.Extended.Particles.Data.ParticleFloatParameter,MonoGame.Extended.Particles.Data.ParticleFloatParameter)">
            <summary>
            Determines whether two parameters are not equal.
            </summary>
            <param name="lhs">The first parameter to compare.</param>
            <param name="rhs">The second parameter to compare.</param>
            <returns>
            <see langword="true"/> if the parameters are not equal; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:MonoGame.Extended.Particles.Data.ParticleInt32Parameter">
            <summary>
            Represents an integer parameter for particle properties that can be either a constant value or a randomly generated
            value within a specified range.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.Particles.Data.ParticleInt32Parameter.Kind">
            <summary>
            The <see cref="T:MonoGame.Extended.Particles.Data.ParticleValueKind"/> that determines whether this parameter uses a constant value or a randomly
            generated value.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.Particles.Data.ParticleInt32Parameter.Constant">
            <summary>
            The constant value when <see cref="F:MonoGame.Extended.Particles.Data.ParticleInt32Parameter.Kind"/> is <see cref="F:MonoGame.Extended.Particles.Data.ParticleValueKind.Constant"/>.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.Particles.Data.ParticleInt32Parameter.RandomMin">
            <summary>
            The minimum value of the range when <see cref="F:MonoGame.Extended.Particles.Data.ParticleInt32Parameter.Kind"/> is <see cref="F:MonoGame.Extended.Particles.Data.ParticleValueKind.Random"/>.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.Particles.Data.ParticleInt32Parameter.RandomMax">
            <summary>
            The maximum value of the range when <see cref="F:MonoGame.Extended.Particles.Data.ParticleInt32Parameter.Kind"/> is <see cref="F:MonoGame.Extended.Particles.Data.ParticleValueKind.Random"/>.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Particles.Data.ParticleInt32Parameter.Value">
            <summary>
            Gets the current value of this parameter based on its <see cref="F:MonoGame.Extended.Particles.Data.ParticleInt32Parameter.Kind"/>
            </summary>
            <remarks>
            If <see cref="F:MonoGame.Extended.Particles.Data.ParticleInt32Parameter.Kind"/> is <see cref="F:MonoGame.Extended.Particles.Data.ParticleValueKind.Constant"/>, returns <see cref="F:MonoGame.Extended.Particles.Data.ParticleInt32Parameter.Constant"/>.
            If <see cref="F:MonoGame.Extended.Particles.Data.ParticleInt32Parameter.Kind"/> is <see cref="F:MonoGame.Extended.Particles.Data.ParticleValueKind.Random"/>, returns a random value between
            <see cref="F:MonoGame.Extended.Particles.Data.ParticleInt32Parameter.RandomMin"/> and <see cref="F:MonoGame.Extended.Particles.Data.ParticleInt32Parameter.RandomMax"/>.
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Particles.Data.ParticleInt32Parameter.#ctor(System.Int32)">
            <summary>
            Initializes a new <see cref="T:MonoGame.Extended.Particles.Data.ParticleInt32Parameter"/> value with a constant value.
            </summary>
            <param name="value">The constant value for this parameter.</param>
        </member>
        <member name="M:MonoGame.Extended.Particles.Data.ParticleInt32Parameter.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new <see cref="T:MonoGame.Extended.Particles.Data.ParticleInt32Parameter"/> value with a random range.
            </summary>
            <param name="rangeStart">The minimum value of the random range.</param>
            <param name="rangeEnd">The maximum value of the random range.</param>
        </member>
        <member name="M:MonoGame.Extended.Particles.Data.ParticleInt32Parameter.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current parameter.
            </summary>
            <param name="obj">The object to compare with the current parameter.</param>
            <returns>
            <see langword="true"/> if the specified object is equal tot he current parameter;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Particles.Data.ParticleInt32Parameter.Equals(MonoGame.Extended.Particles.Data.ParticleInt32Parameter)">
            <summary>
            Determines whether the specified parameter is equal to the current parameter.
            </summary>
            <param name="other">The parameter to compare with the current parameter.</param>
            <returns>
            <see langword="true"/> if the specified parameter is equal to the current parameter;
            otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            When <see cref="F:MonoGame.Extended.Particles.Data.ParticleInt32Parameter.Kind"/> is <see cref="F:MonoGame.Extended.Particles.Data.ParticleValueKind.Constant"/> only the <see cref="F:MonoGame.Extended.Particles.Data.ParticleInt32Parameter.Constant"/> values are
            compared.
            When <see cref="F:MonoGame.Extended.Particles.Data.ParticleInt32Parameter.Kind"/> is <see cref="F:MonoGame.Extended.Particles.Data.ParticleValueKind.Random"/>, both <see cref="F:MonoGame.Extended.Particles.Data.ParticleInt32Parameter.RandomMin"/> and
            <see cref="F:MonoGame.Extended.Particles.Data.ParticleInt32Parameter.RandomMax"/> values are compared.
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Particles.Data.ParticleInt32Parameter.GetHashCode">
            <summary>
            Returns the hash code for this parameter.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
            <remarks>
            When <see cref="F:MonoGame.Extended.Particles.Data.ParticleInt32Parameter.Kind"/> is <see cref="F:MonoGame.Extended.Particles.Data.ParticleValueKind.Constant"/>, returns the hash of <see cref="F:MonoGame.Extended.Particles.Data.ParticleInt32Parameter.Constant"/>.
            When <see cref="F:MonoGame.Extended.Particles.Data.ParticleInt32Parameter.Kind"/> is <see cref="F:MonoGame.Extended.Particles.Data.ParticleValueKind.Random"/> returns the combined has of
            <see cref="F:MonoGame.Extended.Particles.Data.ParticleInt32Parameter.RandomMin"/> and <see cref="F:MonoGame.Extended.Particles.Data.ParticleInt32Parameter.RandomMax"/>.
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Particles.Data.ParticleInt32Parameter.ToString">
            <summary>
            Returns a string representation of this parameter.
            </summary>
            <returns>
            When <see cref="F:MonoGame.Extended.Particles.Data.ParticleInt32Parameter.Kind"/> is <see cref="F:MonoGame.Extended.Particles.Data.ParticleValueKind.Constant"/>, returns the string representation of
            <see cref="F:MonoGame.Extended.Particles.Data.ParticleInt32Parameter.Constant"/>.
            When <see cref="F:MonoGame.Extended.Particles.Data.ParticleInt32Parameter.Kind"/> is <see cref="F:MonoGame.Extended.Particles.Data.ParticleValueKind.Random"/>, returns a string in the format
            "MinValue, MaxValue".
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Particles.Data.ParticleInt32Parameter.op_Equality(MonoGame.Extended.Particles.Data.ParticleInt32Parameter,MonoGame.Extended.Particles.Data.ParticleInt32Parameter)">
            <summary>
            Determines whether two parameters are equal.
            </summary>
            <param name="lhs">The first parameter to compare.</param>
            <param name="rhs">The second parameter to compare.</param>
            <returns>
            <see langword="true"/> if the parameters are equal; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Particles.Data.ParticleInt32Parameter.op_Inequality(MonoGame.Extended.Particles.Data.ParticleInt32Parameter,MonoGame.Extended.Particles.Data.ParticleInt32Parameter)">
            <summary>
            Determines whether two parameters are not equal.
            </summary>
            <param name="lhs">The first parameter to compare.</param>
            <param name="rhs">The second parameter to compare.</param>
            <returns>
            <see langword="true"/> if the parameters are not equal; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:MonoGame.Extended.Particles.Data.ParticleReleaseParameters">
            <summary>
            Defines the parameters used when releasing particles from an emitter.
            </summary>
            <remarks>
            This class encapsulates all the configurable properties that control how particles are initialized when they are
            created by the particle system. Each property can be set as either a constant value or a random range.
            </remarks>
        </member>
        <member name="F:MonoGame.Extended.Particles.Data.ParticleReleaseParameters.Quantity">
            <summary>
            Gets or sets the number of particles to release in a single emission.
            </summary>
            <remarks>
            Defaults to a random value between 5 and 100 particles per emission.
            </remarks>
        </member>
        <member name="F:MonoGame.Extended.Particles.Data.ParticleReleaseParameters.Speed">
            <summary>
            Gets or sets the initial speed of particles when released.
            </summary>
            <remarks>
            Defaults to a random value between 50.0 and 100.0 units per second.
            </remarks>
        </member>
        <member name="F:MonoGame.Extended.Particles.Data.ParticleReleaseParameters.Color">
            <summary>
            Gets or sets the initial color of particles when released.
            </summary>
            <remarks>
            Defaults to white (1.0f, 1.0f, 1.0f).
            </remarks>
        </member>
        <member name="F:MonoGame.Extended.Particles.Data.ParticleReleaseParameters.Opacity">
            <summary>
            Gets or sets the initial opacity of particles when released.
            </summary>
            <remarks>
            Defaults to a random value between 0.0 (transparent) and 1.0 (opaque).
            </remarks>
        </member>
        <member name="F:MonoGame.Extended.Particles.Data.ParticleReleaseParameters.Scale">
            <summary>
            Gets or sets the initial scale of particles when released.
            </summary>
            <remarks>
            Defaults to a random value between 0.0 (half scale) and 1.0 (full scale)
            </remarks>
        </member>
        <member name="F:MonoGame.Extended.Particles.Data.ParticleReleaseParameters.Rotation">
            <summary>
            Gets or sets the initial rotation (in radians) of particles when released.
            </summary>
            <remarks>
            Defaults to a random value between -π and π radians (a full 360° range).
            </remarks>
        </member>
        <member name="F:MonoGame.Extended.Particles.Data.ParticleReleaseParameters.Mass">
            <summary>
            Gets or sets the mass of particles when released.
            </summary>
            <remarks>
            Defaults to a constant value of 1.0.
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Particles.Data.ParticleReleaseParameters.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MonoGame.Extended.Particles.Data.ParticleReleaseParameters"/> class with default values.
            </summary>
            <remarks>
            Default values for properties:
            <para>
            <list type="table">
              <listheader>
                <term>Property</term>
                <description>Default Value</description>
              </listheader>
              <item>
                <term>Quantity</term>
                <description>Random: 5-100 particles</description>
              </item>
              <item>
                <term>Speed</term>
                <description>Random: 50.0-100.0 units/second</description>
              </item>
              <item>
                <term>Color</term>
                <description>Constant: White (1.0, 1.0, 1.0)</description>
              </item>
              <item>
                <term>Opacity</term>
                <description>Random: 0.0-1.0</description>
              </item>
              <item>
                <term>Scale</term>
                <description>Random: 0.5-1.0</description>
              </item>
              <item>
                <term>Rotation</term>
                <description>Random: -π to π radians</description>
              </item>
              <item>
                <term>Mass</term>
                <description>Constant: 1.0</description>
              </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="T:MonoGame.Extended.Particles.Data.ParticleValueKind">
            <summary>
            Defines how particle property values are determined during particle creation and simulation.
            </summary>
            <remarks>
            This enum is used throughout the particle system to specify whether values should be constant or randomly generated
            within a specified range.
            </remarks>
        </member>
        <member name="F:MonoGame.Extended.Particles.Data.ParticleValueKind.Constant">
            <summary>
            Indicates that a particle property should maintain a constant value.
            </summary>
            <remarks>
            WHen a particle property uses this kind, all particles will have the same value for that property, which remains
            unchanged unless explicitly modified.
            </remarks>
        </member>
        <member name="F:MonoGame.Extended.Particles.Data.ParticleValueKind.Random">
            <summary>
            Indicates that a particle property should be randomly generated within a specified range.
            </summary>
            <remarks>
            When a particle property uses this kind, each particle will receive a unique random value within the defined
            minimum and maximum bounds when the particle is created.
            </remarks>
        </member>
        <member name="T:MonoGame.Extended.Particles.Data.ParticleVector2Parameter">
            <summary>
            Represents an vector parameter for particle properties that can be either a constant value or a
            randomly generated value within a specified range.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.Particles.Data.ParticleVector2Parameter.Kind">
            <summary>
            The <see cref="T:MonoGame.Extended.Particles.Data.ParticleValueKind"/> that determines whether this parameter uses a constant value or a randomly
            generated value.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.Particles.Data.ParticleVector2Parameter.Constant">
            <summary>
            The constant value when <see cref="F:MonoGame.Extended.Particles.Data.ParticleVector2Parameter.Kind"/> is <see cref="F:MonoGame.Extended.Particles.Data.ParticleValueKind.Constant"/>.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.Particles.Data.ParticleVector2Parameter.RandomMin">
            <summary>
            The minimum value of the range when <see cref="F:MonoGame.Extended.Particles.Data.ParticleVector2Parameter.Kind"/> is <see cref="F:MonoGame.Extended.Particles.Data.ParticleValueKind.Random"/>.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.Particles.Data.ParticleVector2Parameter.RandomMax">
            <summary>
            The maximum value of the range when <see cref="F:MonoGame.Extended.Particles.Data.ParticleVector2Parameter.Kind"/> is <see cref="F:MonoGame.Extended.Particles.Data.ParticleValueKind.Random"/>.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Particles.Data.ParticleVector2Parameter.Value">
            <summary>
            Gets the current value of this parameter based on its <see cref="F:MonoGame.Extended.Particles.Data.ParticleVector2Parameter.Kind"/>
            </summary>
            <remarks>
            If <see cref="F:MonoGame.Extended.Particles.Data.ParticleVector2Parameter.Kind"/> is <see cref="F:MonoGame.Extended.Particles.Data.ParticleValueKind.Constant"/>, returns <see cref="F:MonoGame.Extended.Particles.Data.ParticleVector2Parameter.Constant"/>.
            If <see cref="F:MonoGame.Extended.Particles.Data.ParticleVector2Parameter.Kind"/> is <see cref="F:MonoGame.Extended.Particles.Data.ParticleValueKind.Random"/>, returns a random value between
            <see cref="F:MonoGame.Extended.Particles.Data.ParticleVector2Parameter.RandomMin"/> and <see cref="F:MonoGame.Extended.Particles.Data.ParticleVector2Parameter.RandomMax"/>.
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Particles.Data.ParticleVector2Parameter.#ctor(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Initializes a new <see cref="T:MonoGame.Extended.Particles.Data.ParticleVector2Parameter"/> value with a constant value.
            </summary>
            <param name="value">The constant value for this parameter.</param>
        </member>
        <member name="M:MonoGame.Extended.Particles.Data.ParticleVector2Parameter.#ctor(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Initializes a new <see cref="T:MonoGame.Extended.Particles.Data.ParticleVector2Parameter"/> value with a random range.
            </summary>
            <param name="rangeStart">The minimum value of the random range.</param>
            <param name="rangeEnd">The maximum value of the random range.</param>
        </member>
        <member name="M:MonoGame.Extended.Particles.Data.ParticleVector2Parameter.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current parameter.
            </summary>
            <param name="obj">The object to compare with the current parameter.</param>
            <returns>
            <see langword="true"/> if the specified object is equal tot he current parameter;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Particles.Data.ParticleVector2Parameter.Equals(MonoGame.Extended.Particles.Data.ParticleVector2Parameter)">
            <summary>
            Determines whether the specified parameter is equal to the current parameter.
            </summary>
            <param name="other">The parameter to compare with the current parameter.</param>
            <returns>
            <see langword="true"/> if the specified parameter is equal to the current parameter;
            otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            When <see cref="F:MonoGame.Extended.Particles.Data.ParticleVector2Parameter.Kind"/> is <see cref="F:MonoGame.Extended.Particles.Data.ParticleValueKind.Constant"/> only the <see cref="F:MonoGame.Extended.Particles.Data.ParticleVector2Parameter.Constant"/> values are
            compared.
            When <see cref="F:MonoGame.Extended.Particles.Data.ParticleVector2Parameter.Kind"/> is <see cref="F:MonoGame.Extended.Particles.Data.ParticleValueKind.Random"/>, both <see cref="F:MonoGame.Extended.Particles.Data.ParticleVector2Parameter.RandomMin"/> and
            <see cref="F:MonoGame.Extended.Particles.Data.ParticleVector2Parameter.RandomMax"/> values are compared.
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Particles.Data.ParticleVector2Parameter.GetHashCode">
            <summary>
            Returns the hash code for this parameter.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
            <remarks>
            When <see cref="F:MonoGame.Extended.Particles.Data.ParticleVector2Parameter.Kind"/> is <see cref="F:MonoGame.Extended.Particles.Data.ParticleValueKind.Constant"/>, returns the hash of <see cref="F:MonoGame.Extended.Particles.Data.ParticleVector2Parameter.Constant"/>.
            When <see cref="F:MonoGame.Extended.Particles.Data.ParticleVector2Parameter.Kind"/> is <see cref="F:MonoGame.Extended.Particles.Data.ParticleValueKind.Random"/> returns the combined has of
            <see cref="F:MonoGame.Extended.Particles.Data.ParticleVector2Parameter.RandomMin"/> and <see cref="F:MonoGame.Extended.Particles.Data.ParticleVector2Parameter.RandomMax"/>.
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Particles.Data.ParticleVector2Parameter.ToString">
            <summary>
            Returns a string representation of this parameter.
            </summary>
            <returns>
            When <see cref="F:MonoGame.Extended.Particles.Data.ParticleVector2Parameter.Kind"/> is <see cref="F:MonoGame.Extended.Particles.Data.ParticleValueKind.Constant"/>, returns the string representation of
            <see cref="F:MonoGame.Extended.Particles.Data.ParticleVector2Parameter.Constant"/>.
            When <see cref="F:MonoGame.Extended.Particles.Data.ParticleVector2Parameter.Kind"/> is <see cref="F:MonoGame.Extended.Particles.Data.ParticleValueKind.Random"/>, returns a string in the format
            "MinValue, MaxValue".
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Particles.Data.ParticleVector2Parameter.op_Equality(MonoGame.Extended.Particles.Data.ParticleVector2Parameter,MonoGame.Extended.Particles.Data.ParticleVector2Parameter)">
            <summary>
            Determines whether two parameters are equal.
            </summary>
            <param name="lhs">The first parameter to compare.</param>
            <param name="rhs">The second parameter to compare.</param>
            <returns>
            <see langword="true"/> if the parameters are equal; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Particles.Data.ParticleVector2Parameter.op_Inequality(MonoGame.Extended.Particles.Data.ParticleVector2Parameter,MonoGame.Extended.Particles.Data.ParticleVector2Parameter)">
            <summary>
            Determines whether two parameters are not equal.
            </summary>
            <param name="lhs">The first parameter to compare.</param>
            <param name="rhs">The second parameter to compare.</param>
            <returns>
            <see langword="true"/> if the parameters are not equal; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:MonoGame.Extended.Particles.Modifiers.AgeModifier">
             <summary>
             A modifier that applies multiple interpolators to particles based on their age.
             </summary>
             <remarks>
             The <see cref="T:MonoGame.Extended.Particles.Modifiers.AgeModifier"/> controls how particle properties change over their lifetime
             by applying a collection of <see cref="T:MonoGame.Extended.Particles.Modifiers.Interpolators.Interpolator"/> objects to each particle. Each interpolator
             in the collection operates on a different property of the particle (such as color, scale, or opacity),
             creating complex, time-based transformations.
            
             Unlike other modifiers that apply incremental changes each frame, interpolators directly compute
             the target property values based on the particle's current age as a fraction of its total lifespan.
             This provides more predictable and consistent results regardless of frame rate.
             </remarks>
        </member>
        <member name="P:MonoGame.Extended.Particles.Modifiers.AgeModifier.Interpolators">
            <summary>
            Gets or sets the collection of interpolators that will be applied to particles.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Particles.Modifiers.AgeModifier.Update(System.Single,MonoGame.Extended.Particles.ParticleIterator)">
            <summary>
            Updates all particles by applying each interpolator in the collection to each particle.
            </summary>
            <inheritdoc/>
        </member>
        <member name="T:MonoGame.Extended.Particles.Modifiers.Containers.CircleContainerModifier">
            <summary>
            A modifier that constrains particles within or outside of a circular boundary.
            </summary>
            <remarks>
            The <see cref="T:MonoGame.Extended.Particles.Modifiers.Containers.CircleContainerModifier"/> keeps particles either inside or outside a circular area, reflecting them
            at the boundary based on a configurable restitution coefficient. The circle is centered at each particle's trigger
            position (where it was emitted), creating local containment areas.
            </remarks>
        </member>
        <member name="F:MonoGame.Extended.Particles.Modifiers.Containers.CircleContainerModifier.Radius">
            <summary>
            The radius of the circular container.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.Particles.Modifiers.Containers.CircleContainerModifier.Inside">
             <summary>
             Indicates whether particles should be contained inside the circle.
             </summary>
             <remarks>
             <list type="bullet">
                 <item>
                     When <see langword="true"/>, particles are kept inside the circle (bouncing inward at the boundary).
                 </item>
                 <item>
                     When <see langword="false"/>, particles are kept outside the circle (bouncing outward at the boundary).
                 </item>
             </list>
            
             The default value is <see langword="true"/>.
             </remarks>
        </member>
        <member name="F:MonoGame.Extended.Particles.Modifiers.Containers.CircleContainerModifier.RestitutionCoefficient">
             <summary>
             Gets or sets the coefficient of restitution (bounciness) for particle collisions with the boundary.
             </summary>
             <remarks>
             <list type="bullet">
                 <item>
                     A value of 1.0 creates a perfectly elastic collision where particles maintain their energy.
                 </item>
                 <item>
                     Values less than 1.0 create inelastic collisions where particles lose energy with each bounce.
                 </item>
                 <item>
                     Values greater than 1.0 create super-elastic collisions where particles gain energy.
                 </item>
             </list>
            
             The default value is 1.0.
             </remarks>
        </member>
        <member name="M:MonoGame.Extended.Particles.Modifiers.Containers.CircleContainerModifier.Update(System.Single,MonoGame.Extended.Particles.ParticleIterator)">
            <summary>
            Updates all particles by constraining them to the circular boundary.
            </summary>
            <inheritdoc/>
        </member>
        <member name="T:MonoGame.Extended.Particles.Modifiers.Containers.RectangleContainerModifier">
            <summary>
            A modifier that constrains particles within a rectangular boundary.
            </summary>
            <remarks>
            The <see cref="T:MonoGame.Extended.Particles.Modifiers.Containers.RectangleContainerModifier"/> keeps particles inside a rectangular area, reflecting them off the
            boundaries based on a configurable restitution coefficient. The rectangle is centered at each particle's trigger
            position (where it was emitted), creating local containment areas.
            </remarks>
        </member>
        <member name="F:MonoGame.Extended.Particles.Modifiers.Containers.RectangleContainerModifier.Width">
            <summary>
            Gets or sets the width of the rectangular container.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.Particles.Modifiers.Containers.RectangleContainerModifier.Height">
            <summary>
            Gets or sets the height of the rectangular container, in units.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.Particles.Modifiers.Containers.RectangleContainerModifier.RestitutionCoefficient">
             <summary>
             Gets or sets the coefficient of restitution (bounciness) for particle
             collisions with the boundary.
             </summary>
             <remarks>
             <list type="bullet">
                 <item>
                     A value of 1.0 creates a perfectly elastic collision where particles maintain their energy.
                 </item>
                 <item>
                     Values less than 1.0 create inelastic collisions where particles lose energy with each bounce.
                 </item>
                 <item>
                     Values greater than 1.0 create super-elastic collisions where particles gain energy.
                 </item>
             </list>
            
             The default value is 1.0.
             </remarks>
        </member>
        <member name="M:MonoGame.Extended.Particles.Modifiers.Containers.RectangleContainerModifier.Update(System.Single,MonoGame.Extended.Particles.ParticleIterator)">
            <summary>
            Updates all particles by constraining them to the rectangular boundary.
            </summary>
            <inheritdoc/>
        </member>
        <member name="T:MonoGame.Extended.Particles.Modifiers.Containers.RectangleLoopContainerModifier">
            <summary>
            A modifier that constrains particles within a rectangular boundary by wrapping them around to the opposite side.
            </summary>
            <remarks>
            The <see cref="T:MonoGame.Extended.Particles.Modifiers.Containers.RectangleLoopContainerModifier"/> creates a looping effect by teleporting particles that exit the
            boundary to the opposite side, similar to classic arcade games where objects wrap around the screen edges. The
            rectangle is centered at each particle's trigger position (where it was emitted), creating local containment areas.
            </remarks>
        </member>
        <member name="F:MonoGame.Extended.Particles.Modifiers.Containers.RectangleLoopContainerModifier.Width">
            <summary>
            Gets or sets the width of the rectangular container, in units.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.Particles.Modifiers.Containers.RectangleLoopContainerModifier.Height">
            <summary>
            Gets or sets the height of the rectangular container, in units.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Particles.Modifiers.Containers.RectangleLoopContainerModifier.Update(System.Single,MonoGame.Extended.Particles.ParticleIterator)">
            <summary>
            Updates all particles by wrapping them around to the opposite side when they cross the rectangular boundary.
            </summary>
            <inheritdoc/>
        </member>
        <member name="T:MonoGame.Extended.Particles.Modifiers.DragModifier">
            <summary>
            A modifier that applies fluid resistance (drag) to particles, gradually reducing their velocity.
            </summary>
            <remarks>
            The <see cref="T:MonoGame.Extended.Particles.Modifiers.DragModifier"/> simulates the effect of particles moving through a fluid medium
            such as air, water, or another substance. This creates a damping effect that slows particles over time,
            with the slowdown proportional to their velocity, mass, and the properties of the medium.
            </remarks>
        </member>
        <member name="F:MonoGame.Extended.Particles.Modifiers.DragModifier.DragCoefficient">
             <summary>
             Gets or sets the drag coefficient, representing the aerodynamic or hydrodynamic properties of particles.
             </summary>
             <remarks>
             The drag coefficient is a dimensionless quantity used in fluid dynamics to model
             the resistance of an object moving through a fluid. Higher values create stronger
             drag effects, causing particles to slow down more quickly.
            
             For reference to approximate real-world drag cooeficients, see
             <see href="https://en.wikipedia.org/wiki/Drag_coefficient"/>.
            
             The default value is 0.47.
             </remarks>
        </member>
        <member name="F:MonoGame.Extended.Particles.Modifiers.DragModifier.Density">
             <summary>
             Gets or sets the density of the fluid medium, affecting the strength of the drag force.
             </summary>
             <remarks>
             This value represents the density of the fluid through which particles are moving.
             Higher values create stronger drag effects, simulating denser media like water or oil.
            
             For reference to approximate real-world density values for various fluids, see
             <see href="https://en.wikipedia.org/wiki/Density#Various_materials"/>.
            
             The default value is 0.5.
             </remarks>
        </member>
        <member name="M:MonoGame.Extended.Particles.Modifiers.DragModifier.Update(System.Single,MonoGame.Extended.Particles.ParticleIterator)">
            <summary>
            Updates all particles by applying drag forces based on their velocity.
            </summary>
            <inheritdoc/>
        </member>
        <member name="T:MonoGame.Extended.Particles.Modifiers.Interpolators.ColorInterpolator">
            <summary>
            An interpolator that gradually changes particle color properties over their lifetime.
            </summary>
            <remarks>
                <para>
                    The <see cref="T:MonoGame.Extended.Particles.Modifiers.Interpolators.ColorInterpolator"/> transitions a particle's color from the inherited
                    <see cref="F:MonoGame.Extended.Particles.Modifiers.Interpolators.Interpolator`1.StartValue"/> to <see cref="F:MonoGame.Extended.Particles.Modifiers.Interpolators.Interpolator`1.EndValue"/> based on the
                    provided interpolation amount
                </para>
                <para>
                    Color values are represented in the HSL (Hue, Saturation, Lightness) color space as a Vector3.
                </para>
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Particles.Modifiers.Interpolators.ColorInterpolator.Update(System.Single,MonoGame.Extended.Particles.Data.Particle*)">
            <summary>
            Updates a particle's color by interpolating between the start and end values.
            </summary>
            <param name="amount">The normalized interpolation amount (from 0.0 to 1.0).</param>
            <param name="particle">A pointer to the particle to update.</param>
        </member>
        <member name="T:MonoGame.Extended.Particles.Modifiers.Interpolators.HueInterpolator">
            <summary>
            An interpolator that gradually changes only the hue component of particle colors over their lifetime.
            </summary>
            <remarks>
            Unlike <see cref="T:MonoGame.Extended.Particles.Modifiers.Interpolators.ColorInterpolator"/> which changes all HSL components, this interpolator
            affects only the hue component, preserving the particle's existing saturation and lightness values.
            This allows for color cycling effects while maintaining consistent saturation and brightness.
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Particles.Modifiers.Interpolators.HueInterpolator.Update(System.Single,MonoGame.Extended.Particles.Data.Particle*)">
            <summary>
            Updates a particle's hue by interpolating between the start and end values.
            </summary>
            <param name="amount">The normalized interpolation amount (from 0.0 to 1.0).</param>
            <param name="particle">A pointer to the particle to update.</param>
        </member>
        <member name="T:MonoGame.Extended.Particles.Modifiers.Interpolators.Interpolator">
            <summary>
            Represents a base class for all particle interpolators.
            </summary>
            <remarks>
            Interpolators are specialized modifiers that gradually change particle properties
            based on a normalized time value (between 0.0 and 1.0) over the particle's lifetime.
            This enables smooth transitions between initial and final states, such as color fades,
            size changes, or opacity adjustments.
            </remarks>
        </member>
        <member name="F:MonoGame.Extended.Particles.Modifiers.Interpolators.Interpolator.Name">
            <summary>
            Gets or sets the display name of this interpolator.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Particles.Modifiers.Interpolators.Interpolator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MonoGame.Extended.Particles.Modifiers.Interpolators.Interpolator"/> class.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Particles.Modifiers.Interpolators.Interpolator.Update(System.Single,MonoGame.Extended.Particles.Data.Particle*)">
            <summary>
            Updates a single particle property based on the interpolation amount.
            </summary>
            <param name="amount">The normalized interpolation amount (from 0.0 to 1.0).</param>
            <param name="particle">A pointer to the particle to update.</param>
            <remarks>
            This method is called for each particle during its lifetime. The <paramref name="amount"/>
            parameter represents the particle's age as a fraction of its total lifespan.
            </remarks>
        </member>
        <member name="T:MonoGame.Extended.Particles.Modifiers.Interpolators.Interpolator`1">
            <summary>
            Represents a generic base class for particle interpolators that work with specific value types.
            </summary>
            <typeparam name="T">The type of value being interpolated. Must be a value type.</typeparam>
        </member>
        <member name="F:MonoGame.Extended.Particles.Modifiers.Interpolators.Interpolator`1.StartValue">
            <summary>
            Gets or sets the starting value for the interpolation.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.Particles.Modifiers.Interpolators.Interpolator`1.EndValue">
            <summary>
            Gets or sets the ending value for the interpolation.
            </summary>
        </member>
        <member name="T:MonoGame.Extended.Particles.Modifiers.Interpolators.OpacityInterpolator">
            <summary>
            An interpolator that gradually changes the opacity of particles over their lifetime.
            </summary>
            <remarks>
                <para>
                    The <see cref="T:MonoGame.Extended.Particles.Modifiers.Interpolators.OpacityInterpolator"/> transitions a particle's opacity (alpha) value from the inherited
                    <see cref="F:MonoGame.Extended.Particles.Modifiers.Interpolators.Interpolator`1.StartValue"/> to <see cref="F:MonoGame.Extended.Particles.Modifiers.Interpolators.Interpolator`1.EndValue"/> based on the
                    provided interpolation amount.
                </para>
                <para>
                    Valid opacity values range from 0.0 (completely transparent) to 1.0 (completely opaque).
                </para>
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Particles.Modifiers.Interpolators.OpacityInterpolator.Update(System.Single,MonoGame.Extended.Particles.Data.Particle*)">
            <summary>
            Updates a particle's opacity by interpolating between the start and end values.
            </summary>
            <param name="amount">The normalized interpolation amount (from 0.0 to 1.0).</param>
            <param name="particle">A pointer to the particle to update.</param>
        </member>
        <member name="T:MonoGame.Extended.Particles.Modifiers.Interpolators.RotationInterpolator">
            <summary>
            An interpolator that gradually changes the rotation angle of particles over their lifetime.
            </summary>
            <remarks>
            The <see cref="T:MonoGame.Extended.Particles.Modifiers.Interpolators.RotationInterpolator"/> transitions a particle's rotation value from the inherited
            <see cref="F:MonoGame.Extended.Particles.Modifiers.Interpolators.Interpolator`1.StartValue"/> to <see cref="F:MonoGame.Extended.Particles.Modifiers.Interpolators.Interpolator`1.EndValue"/> based on the
            provided interpolation amount.
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Particles.Modifiers.Interpolators.RotationInterpolator.Update(System.Single,MonoGame.Extended.Particles.Data.Particle*)">
            <summary>
            Updates a particle's rotation by interpolating between the start and end values.
            </summary>
            <param name="amount">The normalized interpolation amount (from 0.0 to 1.0).</param>
            <param name="particle">A pointer to the particle to update.</param>
        </member>
        <member name="T:MonoGame.Extended.Particles.Modifiers.Interpolators.ScaleInterpolator">
            <summary>
            An interpolator that gradually changes the size of particles over their lifetime.
            </summary>
            <remarks>
            The <see cref="T:MonoGame.Extended.Particles.Modifiers.Interpolators.ScaleInterpolator"/> transitions a particle's scale factor from the inherited
            <see cref="F:MonoGame.Extended.Particles.Modifiers.Interpolators.Interpolator`1.StartValue"/> to <see cref="F:MonoGame.Extended.Particles.Modifiers.Interpolators.Interpolator`1.EndValue"/> based on the
            provided interpolation amount (typically representing the particle's normalized age).
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Particles.Modifiers.Interpolators.ScaleInterpolator.Update(System.Single,MonoGame.Extended.Particles.Data.Particle*)">
            <summary>
            Updates a particle's scale by interpolating between the start and end values.
            </summary>
            <param name="amount">The normalized interpolation amount (from 0.0 to 1.0).</param>
            <param name="particle">A pointer to the particle to update.</param>
        </member>
        <member name="T:MonoGame.Extended.Particles.Modifiers.Interpolators.VelocityInterpolator">
            <summary>
            An interpolator that gradually changes the velocity vector of particles over their lifetime.
            </summary>
            <remarks>
            The <see cref="T:MonoGame.Extended.Particles.Modifiers.Interpolators.VelocityInterpolator"/> transitions a particle's velocity from the inherited
            <see cref="F:MonoGame.Extended.Particles.Modifiers.Interpolators.Interpolator`1.StartValue"/> to <see cref="F:MonoGame.Extended.Particles.Modifiers.Interpolators.Interpolator`1.EndValue"/> based on the
            provided interpolation amount (typically representing the particle's normalized age).
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Particles.Modifiers.Interpolators.VelocityInterpolator.Update(System.Single,MonoGame.Extended.Particles.Data.Particle*)">
            <summary>
            Updates a particle's velocity by interpolating between the start and end values.
            </summary>
            <param name="amount">The normalized interpolation amount (from 0.0 to 1.0).</param>
            <param name="particle">A pointer to the particle to update.</param>
        </member>
        <member name="T:MonoGame.Extended.Particles.Modifiers.LinearGravityModifier">
             <summary>
             A modifier that applies a constant directional force to particles, simulating gravity or wind.
             </summary>
             <remarks>
             The <see cref="T:MonoGame.Extended.Particles.Modifiers.LinearGravityModifier"/> applies a uniform acceleration in a specified direction
             to all particles, creating effects such as gravity, wind, or other constant forces. The force
             is applied proportionally to each particle's mass, simulating realistic physical behavior.
            
             Note that this modifier only changes particle velocities; the actual position changes
             occur during the standard particle update cycle.
             </remarks>
        </member>
        <member name="F:MonoGame.Extended.Particles.Modifiers.LinearGravityModifier.Direction">
            <summary>
            Gets or sets the direction vector of the gravitational force.
            </summary>
            <remarks>
            This vector defines both the direction and the relative magnitude of the force.
            </remarks>
        </member>
        <member name="F:MonoGame.Extended.Particles.Modifiers.LinearGravityModifier.Strength">
            <summary>
            Gets or sets the strength of the gravitational force, in units per second squared.
            </summary>
            <remarks>
            This value scales the overall magnitude of the force. Higher values create
            stronger acceleration effects, causing particles to change velocity more rapidly.
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Particles.Modifiers.LinearGravityModifier.Update(System.Single,MonoGame.Extended.Particles.ParticleIterator)">
            <summary>
            Updates all particles by applying a linear gravitational force.
            </summary>
            <inheritdoc/>
        </member>
        <member name="T:MonoGame.Extended.Particles.Modifiers.Modifier">
            <summary>
            Represents a base class for all particle modifiers.
            </summary>
            <remarks>
            Particle modifiers are used to alter the behavior or properties of particles during their lifetime.
            Each modifier applies changes to particles at a configurable frequency, optimizing performance by
            spreading updates across frames when appropriate.
            Custom modifiers should inherit from this class and implement the <see cref="M:MonoGame.Extended.Particles.Modifiers.Modifier.Update(System.Single,MonoGame.Extended.Particles.ParticleIterator)"/> method.
            </remarks>
        </member>
        <member name="F:MonoGame.Extended.Particles.Modifiers.Modifier.Name">
            <summary>
            Gets or sets the display name of this modifier.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.Particles.Modifiers.Modifier.Frequency">
             <summary>
             Gets or sets the update frequency of this modifier.
             </summary>
             <remarks>
             This value defines how often, in times per second, the modifier attempts to update
             the entire particle buffer. For example, a value of 60.0f means that all particles
             will be updated collectively approximately 60 times per second.
            
             To improve performance, updates are distributed across frames. Rather than updating
             every particle in every frame, the modifier mathematically distributes updates by
             processing a portion of the particles each frame based on the elapsed time and the
             desired frequency. Over time, this results in all particles being updated at the
             specified frequency on average, regardless of the actual frame rate.
            
             Higher values result in more frequent updates and smoother particle behavior, at the
             cost of performance. Lower values reduce CPU usage but may make particle changes appear
             less fluid.
             </remarks>
        </member>
        <member name="M:MonoGame.Extended.Particles.Modifiers.Modifier.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MonoGame.Extended.Particles.Modifiers.Modifier"/> class.
            </summary>
            <remarks>
            The default constructor sets the <see cref="F:MonoGame.Extended.Particles.Modifiers.Modifier.Name"/> property to the name of the derived class
            and initializes <see cref="F:MonoGame.Extended.Particles.Modifiers.Modifier.Frequency"/> to <see cref="F:MonoGame.Extended.Particles.Modifiers.Modifier.DEFAULT_MODIFIER_FREQUENCY"/>.
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Particles.Modifiers.Modifier.Update(System.Single,MonoGame.Extended.Particles.ParticleIterator)">
            <summary>
            Updates the properties of particles according to this modifier's specific behavior.
            </summary>
            <param name="elapsedSeconds">The elapsed time, in seconds, since the last update.</param>
            <param name="iterator">The iterator used to iterate the particles ot update.</param>
        </member>
        <member name="T:MonoGame.Extended.Particles.Modifiers.ModifierExecutionStrategy">
            <summary>
            Defines different strategies for executing particle modifiers within a particle system.
            </summary>
            <remarks>
            The strategy pattern implemented by this class allows the particle system to switch
            between serial (single-threaded) and parallel (multi-threaded) execution methods
            to optimize performance based on the execution environment and particle workload.
            </remarks>
        </member>
        <member name="F:MonoGame.Extended.Particles.Modifiers.ModifierExecutionStrategy.Serial">
            <summary>
            Gets a singleton instance of the serial execution strategy.
            </summary>
            <remarks>
            The serial strategy processes each modifier one after another on a single thread.
            This may be more efficient for small particle counts or when thread synchronization
            overhead outweighs the benefits of parallelism.
            </remarks>
        </member>
        <member name="F:MonoGame.Extended.Particles.Modifiers.ModifierExecutionStrategy.Parallel">
            <summary>
            Gets a singleton instance of the parallel execution strategy.
            </summary>
            <remarks>
            The parallel strategy processes modifiers concurrently using multiple threads.
            This can significantly improve performance for systems with many particles and
            multiple modifiers, especially on multi-core processors.
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Particles.Modifiers.ModifierExecutionStrategy.ExecuteModifiers(System.Collections.Generic.List{MonoGame.Extended.Particles.Modifiers.Modifier},System.Single,MonoGame.Extended.Particles.ParticleIterator)">
            <summary>
            Executes all modifiers in the collection on the particle buffer using the implemented strategy.
            </summary>
            <param name="modifiers">The collection of modifiers to execute.</param>
            <param name="elapsedSeconds">The elapsed time, in seconds, since the last update.</param>
            <param name="iterator">The iterator used to iterate the particles.</param>
        </member>
        <member name="T:MonoGame.Extended.Particles.Modifiers.ModifierExecutionStrategy.SerialModifierExecutionStrategy">
            <summary>
            Implements a serial (single-threaded) execution strategy for particle modifiers.
            </summary>
            <remarks>
            This strategy processes each modifier sequentially on a single thread,
            which can be more efficient for smaller particle counts or when the
            overhead of thread synchronization would outweigh the benefits of parallelism.
            </remarks>
        </member>
        <member name="T:MonoGame.Extended.Particles.Modifiers.ModifierExecutionStrategy.ParallelModifierExecutionStrategy">
            <summary>
            Implements a parallel (multi-threaded) execution strategy for particle modifiers.
            </summary>
            <remarks>
            This strategy processes modifiers concurrently. It can significantly improve
            performance for systems with many particles and multiple modifiers.
            </remarks>
        </member>
        <member name="T:MonoGame.Extended.Particles.Modifiers.OpacityFastFadeModifier">
             <summary>
             A modifier that rapidly decreases particle opacity based on their age.
             </summary>
             <remarks>
             The <see cref="T:MonoGame.Extended.Particles.Modifiers.OpacityFastFadeModifier"/> creates a linear fade-out effect where particles
             become more transparent as they age.
            
             Important notes:
             <list type="bullet">
               <item>
                 This modifier assumes particles have a standard lifespan of 1.0 second. For particles
                 with different lifespans, the fade effect may not complete before the particle is removed,
                 or may become fully transparent before the particle's actual end of life.
               </item>
               <item>
                 Unlike other modifiers that accumulate changes over time, this modifier directly sets
                 the opacity value each frame based solely on the particle's age.
               </item>
             </list>
             </remarks>
        </member>
        <member name="M:MonoGame.Extended.Particles.Modifiers.OpacityFastFadeModifier.Update(System.Single,MonoGame.Extended.Particles.ParticleIterator)">
            <summary>
            Updates all particles by setting their opacity based on their age.
            </summary>
            <inheritdoc/>
        </member>
        <member name="T:MonoGame.Extended.Particles.Modifiers.RotationModifier">
             <summary>
             A modifier that applies a constant rotational velocity to particles.
             </summary>
             <remarks>
             The <see cref="T:MonoGame.Extended.Particles.Modifiers.RotationModifier"/> changes the orientation of particles over time
             by applying a continuous rotation at a specified rate.
            
             The rotation is applied uniformly to all particles, but can be combined with other modifiers
             to create more complex behaviors. For non-uniform rotation, consider using multiple particle
             emitters with different rotation rates or implementing a custom modifier.
             </remarks>
        </member>
        <member name="F:MonoGame.Extended.Particles.Modifiers.RotationModifier.RotationRate">
            <summary>
            Gets or sets the rate at which particles rotate, in radians per second.
            </summary>
            <remarks>
            Positive values cause clockwise rotation, while negative values cause
            counter-clockwise rotation.
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Particles.Modifiers.RotationModifier.Update(System.Single,MonoGame.Extended.Particles.ParticleIterator)">
            <summary>
            Updates all particles by applying rotation based on the elapsed time.
            </summary>
            <inheritdoc/>
        </member>
        <member name="T:MonoGame.Extended.Particles.Modifiers.VelocityColorModifier">
             <summary>
             A modifier that changes particle colors based on their velocity.
             </summary>
             <remarks>
             The <see cref="T:MonoGame.Extended.Particles.Modifiers.VelocityColorModifier"/> adjusts particle colors dynamically according to their
             movement speed. Particles can transition smoothly between two defined colors:
             <list type="bullet">
               <item>A color for stationary or slow-moving particles (<see cref="F:MonoGame.Extended.Particles.Modifiers.VelocityColorModifier.StationaryColor"/>)</item>
               <item>A color for fast-moving particles (<see cref="F:MonoGame.Extended.Particles.Modifiers.VelocityColorModifier.VelocityColor"/>)</item>
             </list>
            
             The color values are represented in HSL (Hue, Saturation, Lightness) format as a Vector3.
             </remarks>
        </member>
        <member name="F:MonoGame.Extended.Particles.Modifiers.VelocityColorModifier.StationaryColor">
            <summary>
            Gets or sets the color for particles that are stationary or moving slowly.
            </summary>
            <remarks>
            This color is applied to particles with zero velocity and serves as the starting
            point for color interpolation. The Vector3 components represent HSL values
            (Hue, Saturation, Lightness).
            </remarks>
        </member>
        <member name="F:MonoGame.Extended.Particles.Modifiers.VelocityColorModifier.VelocityColor">
            <summary>
            Gets or sets the color for particles that have reached or exceeded the velocity threshold.
            </summary>
            <remarks>
            This color is applied to fast-moving particles and serves as the end point
            for color interpolation. The Vector3 components represent HSL values
            (Hue, Saturation, Lightness).
            </remarks>
        </member>
        <member name="F:MonoGame.Extended.Particles.Modifiers.VelocityColorModifier.VelocityThreshold">
            <summary>
            Gets or sets the velocity magnitude at which particles fully transition to the velocity color.
            </summary>
            <remarks>
            This value defines the speed threshold that determines when a particle should
            display the full <see cref="F:MonoGame.Extended.Particles.Modifiers.VelocityColorModifier.VelocityColor"/>. Particles moving slower than this
            threshold will display a color interpolated between <see cref="F:MonoGame.Extended.Particles.Modifiers.VelocityColorModifier.StationaryColor"/> and
            <see cref="F:MonoGame.Extended.Particles.Modifiers.VelocityColorModifier.VelocityColor"/> based on their speed relative to this threshold.
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Particles.Modifiers.VelocityColorModifier.Update(System.Single,MonoGame.Extended.Particles.ParticleIterator)">
            <summary>
            Updates all particles by changing their colors based on their current velocity.
            </summary>
            <inheritdoc/>
        </member>
        <member name="T:MonoGame.Extended.Particles.Modifiers.VelocityModifier">
            <summary>
            A modifier that applies interpolators to particles based on their velocity magnitude.
            </summary>
            <remarks>
            The <see cref="T:MonoGame.Extended.Particles.Modifiers.VelocityModifier"/> controls how particle properties change based on their speed
            by applying a collection of <see cref="T:MonoGame.Extended.Particles.Modifiers.Interpolators.Interpolator"/> objects to each particle. The intensity
            of the effect is determined by comparing the particle's velocity magnitude to a threshold value.
            </remarks>
        </member>
        <member name="P:MonoGame.Extended.Particles.Modifiers.VelocityModifier.Interpolators">
            <summary>
            Gets or sets the collection of interpolators that will be applied to particles.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.Particles.Modifiers.VelocityModifier.VelocityThreshold">
            <summary>
            Gets or sets the velocity magnitude at which particles reach the maximum interpolation effect.
            </summary>
            <remarks>
            This value defines the speed threshold that determines when a particle should
            receive the full interpolation effect (amount = 1.0). Particles moving slower than this
            threshold will receive a proportionally reduced effect based on their velocity magnitude.
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Particles.Modifiers.VelocityModifier.Update(System.Single,MonoGame.Extended.Particles.ParticleIterator)">
            <summary>
            Updates all particles by applying interpolators with an amount based on each particle's velocity.
            </summary>
            <inheritdoc />
        </member>
        <member name="T:MonoGame.Extended.Particles.Modifiers.VortexModifier">
             <summary>
             A modifier that creates a gravitational vortex effect, pulling particles toward a central point.
             </summary>
             <remarks>
             The <see cref="T:MonoGame.Extended.Particles.Modifiers.VortexModifier"/> simulates a gravitational attraction between a central point and
             each particle. The strength of the attraction is based on gravitational principles, where the force
             is proportional to the masses and inversely proportional to the square of the distance.
            
             The actual acceleration applied to each particle is clamped to prevent particles from moving
             too quickly when they get close to the center of the vortex.
             </remarks>
        </member>
        <member name="F:MonoGame.Extended.Particles.Modifiers.VortexModifier.Position">
            <summary>
            Gets or sets the center position of the vortex in 2D space.
            </summary>
            <remarks>
            Particles will be attracted toward this point.
            </remarks>
        </member>
        <member name="F:MonoGame.Extended.Particles.Modifiers.VortexModifier.Mass">
            <summary>
            Gets or sets the mass of the vortex center.
            </summary>
            <remarks>
            Higher mass values create stronger attraction forces.
            </remarks>
        </member>
        <member name="F:MonoGame.Extended.Particles.Modifiers.VortexModifier.MaxSpeed">
            <summary>
            Gets or sets the maximum speed that the vortex can impart on particles.
            </summary>
            <remarks>
            This value limits how quickly particles can be accelerated by the vortex,
            preventing extreme velocities when particles get very close to the center.
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Particles.Modifiers.VortexModifier.Update(System.Single,MonoGame.Extended.Particles.ParticleIterator)">
            <summary>
            Updates all particles by applying a gravitational force towards the vortex center.
            </summary>
            <inheritdoc/>
        </member>
        <member name="T:MonoGame.Extended.Particles.ParticleBuffer">
            <summary>
            Represents a circular memory buffer that efficiently stores and manages particles in contiguous unmanaged memory.
            </summary>
            <remarks>
            The <see cref="T:MonoGame.Extended.Particles.ParticleBuffer"/> class provides high-performance memory management for particle systems by
            allocating an unmanaged memory block to store particle data in a circular buffer arrangement. This implementation
            uses head and tail pointers to manage particle allocation and deallocation without requiring memory copying
            operations, making it more efficient than a linear buffer approach.
            </remarks>
        </member>
        <member name="P:MonoGame.Extended.Particles.ParticleBuffer.NativePointer">
            <summary>
            Gets the native pointer to the beginning of the unmanaged memory buffer that stores particle data.
            </summary>
            <value>
            An <see cref="T:System.IntPtr"/> pointing to the start of the allocated unmanaged memory block.
            </value>
            <remarks>
            <para>
            This property provides direct access to the underlying unmanaged memory used by the particle buffer.
            The memory pointed to by this value contains particle data stored in a contiguous block, with each
            particle occupying <see cref="F:MonoGame.Extended.Particles.Data.Particle.SizeInBytes"/> bytes.
            </para>
            <para>
            <strong>Warning:</strong> This pointer should be used with extreme caution and only within unsafe code blocks.
            Improper use of this pointer can lead to memory corruption, access violations, or other undefined behavior.
            The memory is automatically managed by this <see cref="T:MonoGame.Extended.Particles.ParticleBuffer"/> instance and should not be
            manually freed or modified outside of the provided safe methods.
            </para>
            <para>
            The memory layout is arranged as a circular buffer where particles are stored sequentially.
            Use <see cref="P:MonoGame.Extended.Particles.ParticleBuffer.Head"/> and the <see cref="P:MonoGame.Extended.Particles.ParticleBuffer.Iterator"/> for safe access to active particles rather than
            directly manipulating this pointer.
            </para>
            <para>
            This pointer becomes invalid after the <see cref="T:MonoGame.Extended.Particles.ParticleBuffer"/> is disposed. Accessing it after
            disposal will result in undefined behavior.
            </para>
            </remarks>
        </member>
        <member name="P:MonoGame.Extended.Particles.ParticleBuffer.Tail">
            <summary>
            Gets a pointer to the current tail position in the circular buffer where new particles are allocated.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Particles.ParticleBuffer.BufferEnd">
            <summary>
            Gets a pointer to the end fo the allocated buffer memory, used for circular buffer bounds checking.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Particles.ParticleBuffer.Size">
            <summary>
            Gets the maximum number of particles that can be stored in this buffer.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Particles.ParticleBuffer.Iterator">
            <summary>
            Gets an iterator for traversing the active particles in the buffer.
            </summary>
            <remarks>
            The iterator is reset each time this property is accessed, starting from the current head position.
            Use this to safely iterate through all active particles in the correct order.
            </remarks>
        </member>
        <member name="P:MonoGame.Extended.Particles.ParticleBuffer.Head">
            <summary>
            Gets a pointer to the current head position in the circular buffer where the oldest active particle is located.
            </summary>
            <remarks>
            This pointer should be used carefully and only within unsafe code blocks. The memory it points to is
            automatically freed when the <see cref="T:MonoGame.Extended.Particles.ParticleBuffer"/> is disposed.
            </remarks>
        </member>
        <member name="P:MonoGame.Extended.Particles.ParticleBuffer.Available">
            <summary>
            Gets the number of additional particles that can be added to the buffer before it is full.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Particles.ParticleBuffer.Count">
            <summary>
            Gets the current number of active particles in the buffer.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Particles.ParticleBuffer.SizeInBytes">
            <summary>
            Gets the total size of the buffer in bytes.
            </summary>
            <remarks>
            The size includes space for one additional particle beyond the specified capacity to facilitate
            circular buffer operations.
            </remarks>
        </member>
        <member name="P:MonoGame.Extended.Particles.ParticleBuffer.ActiveSizeInBytes">
            <summary>
            Gets the size of the currently active portion of the buffer in bytes.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Particles.ParticleBuffer.IsDisposed">
            <summary>
            Gets a value indicating whether this <see cref="T:MonoGame.Extended.Particles.ParticleBuffer"/> has been disposed.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Particles.ParticleBuffer.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoGame.Extended.Particles.ParticleBuffer"/> class with the specified capacity.
            </summary>
            <param name="size">The maximum number of particles that can be stored in the buffer.</param>
        </member>
        <member name="M:MonoGame.Extended.Particles.ParticleBuffer.Finalize">
            <summary/>
        </member>
        <member name="M:MonoGame.Extended.Particles.ParticleBuffer.Release(System.Int32)">
            <summary>
            Allocates space in the circular buffer for a specified number of particles to be released.
            </summary>
            <param name="releaseQuantity">The number of particles to allocate space for.</param>
            <returns>
            A <see cref="T:MonoGame.Extended.Particles.ParticleIterator"/> positioned at the start of the newly allocated particles,
            allowing iteration over the allocated particle slots.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            Thrown if this method is called after the buffer has been disposed.
            </exception>
        </member>
        <member name="M:MonoGame.Extended.Particles.ParticleBuffer.Reclaim(System.Int32)">
            <summary>
            Removes a specified number of particles from the beginning of the circular buffer.
            </summary>
            <param name="number">The number of particles to remove from the buffer.</param>
            <exception cref="T:System.ObjectDisposedException">
            Thrown if this method is called after the buffer has been disposed.
            </exception>
        </member>
        <member name="M:MonoGame.Extended.Particles.ParticleBuffer.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:MonoGame.Extended.Particles.ParticleBuffer"/>.
            </summary>
        </member>
        <member name="T:MonoGame.Extended.Particles.ParticleEffect">
             <summary>
             Represents a complete particle effect composed of multiple emitters.
             </summary>
             <remarks>
             The <see cref="T:MonoGame.Extended.Particles.ParticleEffect"/> class serves as a container for one or more <see cref="T:MonoGame.Extended.Particles.ParticleEmitter"/> instances,
             allowing for complex visual effects that combine different types of particle behaviors and appearances.
            
             Effects can be positioned, rotated, and scaled as a single unit, with all contained emitters being affected
             by these transformations. Effects also provide methods for triggering all emitters simultaneously.
             </remarks>
        </member>
        <member name="F:MonoGame.Extended.Particles.ParticleEffect.Name">
            <summary>
            Gets or sets the name of this effect, used for identification and debugging.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.Particles.ParticleEffect.Position">
            <summary>
            Gets or sets the position of this effect in 2D space.
            </summary>
            <remarks>
            This position is used as the reference point for all emitters in the effect.
            When the effect is updated, this position is passed to each emitter's update method.
            </remarks>
        </member>
        <member name="F:MonoGame.Extended.Particles.ParticleEffect.Rotation">
            <summary>
            Gets or sets the rotation of this effect, in radians.
            </summary>
            <remarks>
            This property can be used to rotate the entire effect around its position.
            Note that rotation is not automatically applied to emitters and must be handled by the rendering system.
            </remarks>
        </member>
        <member name="F:MonoGame.Extended.Particles.ParticleEffect.Scale">
            <summary>
            Gets or sets the scale factor of this effect.
            </summary>
            <remarks>
            This property can be used to uniformly or non-uniformly scale the entire effect.
            Note that scaling is not automatically applied to emitters and must be handled by the rendering system.
            </remarks>
        </member>
        <member name="F:MonoGame.Extended.Particles.ParticleEffect.Emitters">
            <summary>
            Gets or sets the collection of emitters that compose this effect.
            </summary>
            <remarks>
            Each emitter in this collection contributes to the overall visual appearance of the effect,
            potentially with different behaviors, textures, and particle properties.
            </remarks>
        </member>
        <member name="P:MonoGame.Extended.Particles.ParticleEffect.IsDisposed">
            <summary>
            Gets a value indicating whether this <see cref="T:MonoGame.Extended.Particles.ParticleEffect"/> has been disposed.
            </summary>
            <value><see langword="true"/> if the effect has been disposed; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:MonoGame.Extended.Particles.ParticleEffect.ActiveParticles">
            <summary>
            Gets the total number of active particles across all emitters in this effect.
            </summary>
            <value>The sum of <see cref="P:MonoGame.Extended.Particles.ParticleEmitter.ActiveParticles"/> for all emitters in the effect.</value>
        </member>
        <member name="M:MonoGame.Extended.Particles.ParticleEffect.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoGame.Extended.Particles.ParticleEffect"/> class with the specified name.
            </summary>
            <param name="name">The name of the effect, used for identification and debugging.</param>
            <remarks>
            This constructor initializes the effect with default position, rotation, and scale,
            and creates an empty collection of emitters.
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Particles.ParticleEffect.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:MonoGame.Extended.Particles.ParticleEffect"/> class.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Particles.ParticleEffect.FastForward(Microsoft.Xna.Framework.Vector2,System.Single,System.Single)">
            <summary>
            Advances the effect's state rapidly to simulate it having been active for a period of time.
            </summary>
            <param name="position">The position at which to simulate the effect.</param>
            <param name="seconds">The total time, in seconds, to simulate.</param>
            <param name="triggerPeriod">The time interval, in seconds, between simulated triggers.</param>
            <remarks>
            This method is useful for pre-filling a scene with particles that appear to have been emitted
            over time, rather than starting with an empty effect.
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Particles.ParticleEffect.Update(System.Single)">
            <summary>
            Updates the state of all emitters in this effect.
            </summary>
            <param name="elapsedSeconds">The elapsed time, in seconds, since the last update.</param>
            <remarks>
            This method propagates the update call to each emitter in the effect, passing along
            the elapsed time and the current position of the effect.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            Thrown if this method is called after the effect has been disposed.
            </exception>
        </member>
        <member name="M:MonoGame.Extended.Particles.ParticleEffect.Trigger">
            <summary>
            Triggers all emitters in this effect at the effect's current position.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Particles.ParticleEffect.Trigger(Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            Triggers all emitters in this effect at the specified position.
            </summary>
            <param name="position">The position in 2D space at which to trigger the emitters.</param>
            <param name="layerDepth">The layer depth at which to render the emitted particles.</param>
            <exception cref="T:System.ObjectDisposedException">
            Thrown if this method is called after the effect has been disposed.
            </exception>
        </member>
        <member name="M:MonoGame.Extended.Particles.ParticleEffect.Trigger(MonoGame.Extended.Particles.Primitives.LineSegment,System.Single)">
            <summary>
            Triggers all emitters in this effect along a line segment.
            </summary>
            <param name="line">The line segment along which to distribute triggered particles.</param>
            <param name="layerDepth">The layer depth at which to render the emitted particles.</param>
            <exception cref="T:System.ObjectDisposedException">
            Thrown if this method is called after the effect has been disposed.
            </exception>
        </member>
        <member name="M:MonoGame.Extended.Particles.ParticleEffect.FromFile(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:MonoGame.Extended.Particles.ParticleEffect"/> class from a file.
            </summary>
            <param name="path">The path to the file containing the serialized effect data.</param>
            <returns>A new <see cref="T:MonoGame.Extended.Particles.ParticleEffect"/> instance with properties and emitters as defined in the file.</returns>
            <exception cref="T:System.NotImplementedException">
            This method is not yet implemented.
            </exception>
            <remarks>
            This method is intended to deserialize effect data from a file, but has not been implemented in this version.
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Particles.ParticleEffect.FromStream(System.IO.Stream)">
            <summary>
            Creates a new instance of the <see cref="T:MonoGame.Extended.Particles.ParticleEffect"/> class from a stream.
            </summary>
            <param name="stream">The stream containing the serialized effect data.</param>
            <returns>A new <see cref="T:MonoGame.Extended.Particles.ParticleEffect"/> instance with properties and emitters as defined in the stream.</returns>
            <exception cref="T:System.NotImplementedException">
            This method is not yet implemented.
            </exception>
            <remarks>
            This method is intended to deserialize effect data from a stream, but has not been implemented in this version.
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Particles.ParticleEffect.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:MonoGame.Extended.Particles.ParticleEffect"/>.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Particles.ParticleEffect.Dispose(System.Boolean)">
            <summary>
            Releases the resources used by the <see cref="T:MonoGame.Extended.Particles.ParticleEffect"/>.
            </summary>
            <param name="disposing"><see langword="true"/> to release both managed and unmanaged resources;
            <see langword="false"/> to release only unmanaged resources.</param>
        </member>
        <member name="M:MonoGame.Extended.Particles.ParticleEffect.ToString">
            <summary>
            Returns a string that represents the current effect.
            </summary>
            <returns>The <see cref="F:MonoGame.Extended.Particles.ParticleEffect.Name"/> of this effect.</returns>
        </member>
        <member name="T:MonoGame.Extended.Particles.ParticleEffectReader">
            <summary>
            Represents a reader that deserializes a <see cref="T:MonoGame.Extended.Particles.ParticleEffect"/> from an XML configuration.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Particles.ParticleEffectReader.IsDisposed">
            <summary>
            Gets a value that indicates whether this <see cref="T:MonoGame.Extended.Particles.ParticleEffectReader"/> has been disposed of.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Particles.ParticleEffectReader.#ctor(System.String,Microsoft.Xna.Framework.Content.ContentManager)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoGame.Extended.Particles.ParticleEffectReader"/> class that reads from a file. 
            </summary>
            <param name="fileName">The file path to read the XMl from.</param>
            <param name="content">The <see cref="T:Microsoft.Xna.Framework.Content.ContentManager"/> to use for loading textures.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="content"/> is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentException"><paramref name="fileName"/> is <see langword="null"/> or empty.</exception>  
        </member>
        <member name="M:MonoGame.Extended.Particles.ParticleEffectReader.#ctor(System.IO.Stream,Microsoft.Xna.Framework.Content.ContentManager)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoGame.Extended.Particles.ParticleEffectReader"/> class that reads from a stream.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="content">The <see cref="T:Microsoft.Xna.Framework.Content.ContentManager"/> to use for loading textures.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> or <paramref name="content"/> is <see langword="null"/></exception>
        </member>
        <member name="M:MonoGame.Extended.Particles.ParticleEffectReader.Finalize">
            <summary/>
        </member>
        <member name="M:MonoGame.Extended.Particles.ParticleEffectReader.ReadParticleEffect">
            <summary>
            Reads a <see cref="T:MonoGame.Extended.Particles.ParticleEffect"/> from the XML input.
            </summary>
            <returns>The deserialized <see cref="T:MonoGame.Extended.Particles.ParticleEffect"/>.</returns>
            <exception cref="T:System.Xml.XmlException">The Xml format is invalid.</exception>
        </member>
        <member name="M:MonoGame.Extended.Particles.ParticleEffectReader.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:MonoGame.Extended.Particles.ParticleEffectWriter">
            <summary>
            Represents a writer that serializes a <see cref="T:MonoGame.Extended.Particles.ParticleEffect"/> to an XML configuration.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Particles.ParticleEffectWriter.IsDisposed">
            <summary>
            Gets a value that indicates if this <see cref="T:MonoGame.Extended.Particles.ParticleEffectWriter"/> has been disposed of.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Particles.ParticleEffectWriter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoGame.Extended.Particles.ParticleEffectWriter"/> class that writers to the writes to a file.
            </summary>
            <param name="fileName">The file path to write the XML to.</param>
        </member>
        <member name="M:MonoGame.Extended.Particles.ParticleEffectWriter.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoGame.Extended.Particles.ParticleEffectWriter"/> class that writes to a stream.
            </summary>
            <param name="stream">The stream to write to.</param>
        </member>
        <member name="M:MonoGame.Extended.Particles.ParticleEffectWriter.Finalize">
            <summary/>
        </member>
        <member name="M:MonoGame.Extended.Particles.ParticleEffectWriter.WriteParticleEffect(MonoGame.Extended.Particles.ParticleEffect)">
            <summary>
            Write a <see cref="T:MonoGame.Extended.Particles.ParticleEffect"/> to the XML output.
            </summary>
            <param name="effect">The <see cref="T:MonoGame.Extended.Particles.ParticleEffect"/> to serialize.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="effect"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MonoGame.Extended.Particles.ParticleEffectWriter.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:MonoGame.Extended.Particles.ParticleEmitter">
            <summary>
            Represents a particle emitter that creates, manages, and updates particles within a particle system.
            </summary>
            <remarks>
            The <see cref="T:MonoGame.Extended.Particles.ParticleEmitter"/> class is the core component of the particle system. It handles particle
            creation (triggering), lifecycle management, and application of modifiers according to defined profiles
            and parameters. Each emitter operates independently and can be configured with different behaviors, appearances,
            and physical properties.
            </remarks>
        </member>
        <member name="F:MonoGame.Extended.Particles.ParticleEmitter.Buffer">
            <summary>
            Gets or sets the buffer that stores and manages the particles for this emitter.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.Particles.ParticleEmitter.Name">
            <summary>
            Gets or sets the name of this emitter, used for identification and debugging.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Particles.ParticleEmitter.Capacity">
            <summary>
            Gets the maximum number of particles that this emitter can manage.
            </summary>
            <value>The size of the underlying <see cref="T:MonoGame.Extended.Particles.ParticleBuffer"/>.</value>
        </member>
        <member name="P:MonoGame.Extended.Particles.ParticleEmitter.ActiveParticles">
            <summary>
            Gets the current number of active particles in this emitter.
            </summary>
            <value>The count of particles in the underlying <see cref="T:MonoGame.Extended.Particles.ParticleBuffer"/>.</value>
        </member>
        <member name="F:MonoGame.Extended.Particles.ParticleEmitter.LifeSpan">
            <summary>
            Gets or sets the lifespan of particles emitted by this emitter, in seconds.
            </summary>
            <remarks>
            After a particle's age exceeds this value, it will be automatically reclaimed during the next cleanup cycle.
            </remarks>
        </member>
        <member name="F:MonoGame.Extended.Particles.ParticleEmitter.Offset">
            <summary>
            Gets or sets the position offset applied to this emitter.
            </summary>
            <remarks>
            This offset is applied to the emitter's position when triggering particles, allowing for fine adjustment
            of the emission point without changing the overall position passed to the <see cref="M:MonoGame.Extended.Particles.ParticleEmitter.Update(System.Single,Microsoft.Xna.Framework.Vector2)"/> method.
            </remarks>
        </member>
        <member name="F:MonoGame.Extended.Particles.ParticleEmitter.LayerDepth">
            <summary>
            Gets or sets the default layer depth for particles emitted by this emitter.
            </summary>
            <remarks>
            This value determines the rendering order of particles relative to other sprites and particles.
            Values range from 0.0 (front) to 1.0 (back).
            </remarks>
        </member>
        <member name="F:MonoGame.Extended.Particles.ParticleEmitter.AutoTrigger">
            <summary>
            Gets or sets a value indicating whether this emitter should automatically trigger particle emissions.
            </summary>
            <remarks>
            When set to <see langword="true"/>, the emitter will periodically emit particles based on the
            <see cref="F:MonoGame.Extended.Particles.ParticleEmitter.AutoTriggerFrequency"/> property, without requiring explicit calls to <see cref="M:MonoGame.Extended.Particles.ParticleEmitter.Trigger(Microsoft.Xna.Framework.Vector2,System.Single)"/>.
            </remarks>
        </member>
        <member name="F:MonoGame.Extended.Particles.ParticleEmitter.AutoTriggerFrequency">
            <summary>
            Gets or sets the frequency, in seconds, at which this emitter automatically triggers particle emissions.
            </summary>
            <remarks>
            This property only has an effect when <see cref="F:MonoGame.Extended.Particles.ParticleEmitter.AutoTrigger"/> is set to <see langword="true"/>.
            </remarks>
        </member>
        <member name="F:MonoGame.Extended.Particles.ParticleEmitter.ReclaimFrequency">
            <summary>
            Gets or sets the frequency, in times per second, at which expired particles are reclaimed.
            </summary>
            <remarks>
            Higher values result in more frequent cleanup of expired particles, potentially improving memory
            utilization at the cost of slightly increased CPU usage.
            </remarks>
        </member>
        <member name="F:MonoGame.Extended.Particles.ParticleEmitter.Parameters">
            <summary>
            Gets or sets the parameters that control the physical and visual properties of emitted particles.
            </summary>
            <remarks>
            These parameters include properties such as initial speed, color, opacity, scale, rotation, and mass.
            </remarks>
        </member>
        <member name="F:MonoGame.Extended.Particles.ParticleEmitter.ModifierExecutionStrategy">
            <summary>
            Gets or sets the strategy used to execute modifiers on particles.
            </summary>
            <remarks>
            This determines whether modifiers are executed serially (single-threaded) or in parallel (multi-threaded),
            affecting performance characteristics based on the system's capabilities and the number of particles.
            </remarks>
        </member>
        <member name="F:MonoGame.Extended.Particles.ParticleEmitter.Modifiers">
            <summary>
            Gets or sets the list of modifiers that affect particles emitted by this emitter.
            </summary>
            <remarks>
            Modifiers alter particle properties over time, creating effects such as gravity, color changes,
            rotation, and containment within boundaries.
            </remarks>
        </member>
        <member name="F:MonoGame.Extended.Particles.ParticleEmitter.Profile">
            <summary>
            Gets or sets the profile that determines the initial position and heading of emitted particles.
            </summary>
            <remarks>
            Profiles define the emission pattern, such as points, lines, rings, or areas from which particles originate.
            </remarks>
        </member>
        <member name="F:MonoGame.Extended.Particles.ParticleEmitter.TextureRegion">
            <summary>
            The <see cref="T:MonoGame.Extended.Graphics.Texture2DRegion"/> to use when rendering particles from this emitter.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.Particles.ParticleEmitter.RenderingOrder">
            <summary>
            Gets or sets the order in which particles are rendered within this emitter.
            </summary>
            <remarks>
            This property determines whether particles are drawn front-to-back or back-to-front,
            affecting how they visually overlap when using alpha blending.
            </remarks>
        </member>
        <member name="P:MonoGame.Extended.Particles.ParticleEmitter.IsDisposed">
            <summary>
            Gets a value indicating whether this <see cref="T:MonoGame.Extended.Particles.ParticleEmitter"/> has been disposed.
            </summary>
            <value><see langword="true"/> if the emitter has been disposed; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="M:MonoGame.Extended.Particles.ParticleEmitter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MonoGame.Extended.Particles.ParticleEmitter"/> class with default capacity.
            </summary>
            <remarks>
            Creates an emitter with a capacity of 1000 particles and default settings.
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Particles.ParticleEmitter.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoGame.Extended.Particles.ParticleEmitter"/> class with the specified capacity.
            </summary>
            <param name="initialCapacity">The maximum number of particles this emitter can manage.</param>
            <remarks>
            This constructor initializes the emitter with default settings but allows for specifying
            the maximum number of particles it can handle.
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Particles.ParticleEmitter.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:MonoGame.Extended.Particles.ParticleEmitter"/> class.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Particles.ParticleEmitter.ChangeCapacity(System.Int32)">
            <summary>
            Changes the maximum capacity of this emitter.
            </summary>
            <param name="size">The new maximum number of particles this emitter can manage.</param>
            <remarks>
            This method disposes the old buffer and creates a new one with the specified capacity.
            Any existing particles are lost during this operation.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            Thrown if this method is called after the emitter has been disposed.
            </exception>
        </member>
        <member name="M:MonoGame.Extended.Particles.ParticleEmitter.Update(System.Single,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Updates the state of all particles managed by this emitter.
            </summary>
            <param name="elapsedSeconds">The elapsed time, in seconds, since the last update.</param>
            <param name="position">The current position of the emitter in 2D space.</param>
            <remarks>
            This method handles automatic triggering of particle emissions, updates the positions of all active
            particles based on their velocities, applies all registered modifiers, and reclaims expired particles.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            Thrown if this method is called after the emitter has been disposed.
            </exception>
        </member>
        <member name="M:MonoGame.Extended.Particles.ParticleEmitter.Trigger(Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            Triggers the emission of particles at the specified position.
            </summary>
            <param name="position">The position in 2D space from which to emit particles.</param>
            <param name="layerDepth">The layer depth at which to render the emitted particles.</param>
            <remarks>
            This method creates a burst of particles according to the configured <see cref="F:MonoGame.Extended.Particles.ParticleEmitter.Parameters"/>.
            The number of particles released is determined by the <see cref="F:MonoGame.Extended.Particles.Data.ParticleReleaseParameters.Quantity"/> property.
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Particles.ParticleEmitter.Trigger(MonoGame.Extended.Particles.Primitives.LineSegment,System.Single)">
            <summary>
            Triggers the emission of particles along a line segment.
            </summary>
            <param name="line">The line segment along which to distribute emitted particles.</param>
            <param name="layerDepth">The layer depth at which to render the emitted particles.</param>
            <remarks>
            This method creates particles at random positions along the specified line segment.
            The number of particles released is determined by the <see cref="F:MonoGame.Extended.Particles.Data.ParticleReleaseParameters.Quantity"/> property.
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Particles.ParticleEmitter.Release(Microsoft.Xna.Framework.Vector2,System.Int32,System.Single)">
            <summary>
            Releases a specified number of particles at the given position.
            </summary>
            <param name="position">The position in 2D space from which to emit particles.</param>
            <param name="numToRelease">The number of particles to release.</param>
            <param name="layerDepth">The layer depth at which to render the emitted particles.</param>
            <remarks>
            This method initializes newly created particles with properties based on the emitter's
            <see cref="F:MonoGame.Extended.Particles.ParticleEmitter.Profile"/> and <see cref="F:MonoGame.Extended.Particles.ParticleEmitter.Parameters"/>.
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Particles.ParticleEmitter.ReclaimExpiredParticles">
            <summary>
            Reclaims particles that have exceeded their lifespan.
            </summary>
            <remarks>
            This method removes expired particles from the beginning of the buffer and compacts
            the remaining particles to maintain efficient memory usage.
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Particles.ParticleEmitter.ToString">
            <summary>
            Returns a string that represents the current emitter.
            </summary>
            <returns>The <see cref="F:MonoGame.Extended.Particles.ParticleEmitter.Name"/> of this emitter.</returns>
        </member>
        <member name="M:MonoGame.Extended.Particles.ParticleEmitter.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:MonoGame.Extended.Particles.ParticleEmitter"/>.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Particles.ParticleEmitter.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:MonoGame.Extended.Particles.ParticleEmitter"/>.
            </summary>
            <param name="disposing"><see langword="true"/> to release both managed and unmanaged resources;
            <see langword="false"/> to release only unmanaged resources.</param>
        </member>
        <member name="T:MonoGame.Extended.Particles.ParticleIterator">
            <summary>
            Provides functionality for iterating through particles in a circular buffer.
            </summary>
            <remarks>
            The <see cref="T:MonoGame.Extended.Particles.ParticleIterator"/> class enables safe traversal of active particles in a
            <see cref="T:MonoGame.Extended.Particles.ParticleBuffer"/>, automatically handling the circular nature of the buffer and wrapping around
            boundaries as needed.
            </remarks>
        </member>
        <member name="P:MonoGame.Extended.Particles.ParticleIterator.Total">
            <summary>
            Gets the total number of particles that can be iterated over.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Particles.ParticleIterator.HasNext">
            <summary>
            Gets a value indicating whether there are more particles to iterate over.
            </summary>
            <value>
            <see langword="true"/> if there are more particles available; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="M:MonoGame.Extended.Particles.ParticleIterator.#ctor(MonoGame.Extended.Particles.ParticleBuffer)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoGame.Extended.Particles.ParticleIterator"/> class.
            </summary>
            <param name="buffer">The <see cref="T:MonoGame.Extended.Particles.ParticleBuffer"/> to iterate over.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ObjectDisposedException"><paramref name="buffer"/> has previously been disposed.</exception>
        </member>
        <member name="M:MonoGame.Extended.Particles.ParticleIterator.Reset">
            <summary>
            Resets the iterator to the beginning of the active particles in the buffer.
            </summary>
            <returns>This <see cref="T:MonoGame.Extended.Particles.ParticleIterator"/> instance.</returns>
        </member>
        <member name="M:MonoGame.Extended.Particles.ParticleIterator.Reset(System.Int32)">
            <summary>
            Resets the iterator to a specific offset position within the active particles.
            </summary>
            <param name="offset">The number of particles to offset from the head position.</param>
            <returns>This <see cref="T:MonoGame.Extended.Particles.ParticleIterator"/> instance.</returns>
        </member>
        <member name="M:MonoGame.Extended.Particles.ParticleIterator.Next">
            <summary>
            Advances the iterator to the next particle and returns a pointer to the current particle.
            </summary>
            <returns>A pointer to the current particle before advancing the iterator.</returns>
        </member>
        <member name="T:MonoGame.Extended.Particles.ParticleRenderingOrder">
            <summary>
            Specifies the order in which particles are rendered within the particle system.
            </summary>
            <remarks>
            This enumeration defines the rendering order strategies that can be applied to particles to control how they are
            layered visually. The chosen rendering order affects which particles appear in front of others when they overlap.
            </remarks>
        </member>
        <member name="F:MonoGame.Extended.Particles.ParticleRenderingOrder.FrontToBack">
            <summary>
            Particles are rendered from front to back.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.Particles.ParticleRenderingOrder.BackToFront">
            <summary>
            Particles are rendered from back to front.
            </summary>
        </member>
        <member name="T:MonoGame.Extended.Particles.Primitives.LineSegment">
            <summary>
            Represents a line segment defined by two points in 2D space.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.Particles.Primitives.LineSegment._point1">
            <summary>
            The first point of the line segment.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.Particles.Primitives.LineSegment._point2">
            <summary>
            The second point of the line segment.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Particles.Primitives.LineSegment.Origin">
            <summary>
            Gets the origin point of the line segment.
            </summary>
            <value>The first point of the line segment.</value>
        </member>
        <member name="P:MonoGame.Extended.Particles.Primitives.LineSegment.Direction">
            <summary>
            Gets the direction vector of the line segment.
            </summary>
            <value>A vector from the first point to the second point.</value>
        </member>
        <member name="M:MonoGame.Extended.Particles.Primitives.LineSegment.#ctor(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoGame.Extended.Particles.Primitives.LineSegment"/> struct with the specified points.
            </summary>
            <param name="point1">The first point of the line segment.</param>
            <param name="point2">The second point of the line segment.</param>
        </member>
        <member name="M:MonoGame.Extended.Particles.Primitives.LineSegment.Translate(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Returns a new line segment that is a translated version of this line segment.
            </summary>
            <param name="vector">The vector by which to translate the line segment.</param>
            <returns>A new <see cref="T:MonoGame.Extended.Particles.Primitives.LineSegment"/> that is offset by the specified vector.</returns>
        </member>
        <member name="M:MonoGame.Extended.Particles.Primitives.LineSegment.ToVector2">
            <summary>
            Converts the line segment to a vector representing its direction and magnitude.
            </summary>
            <returns>
            A <see cref="T:Microsoft.Xna.Framework.Vector2"/> representing the direction and length of the line segment, calculated as the second
            point minus the first point.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Particles.Primitives.LineSegment.FromPoints(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Creates a new line segment from two points.
            </summary>
            <param name="point1">The first point of the line segment.</param>
            <param name="point2">The second point of the line segment.</param>
            <returns>A new <see cref="T:MonoGame.Extended.Particles.Primitives.LineSegment"/> defined by the two points.</returns>
        </member>
        <member name="M:MonoGame.Extended.Particles.Primitives.LineSegment.FromOrigin(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Creates a new line segment from an origin point and a direction vector.
            </summary>
            <param name="origin">The starting point of the line segment.</param>
            <param name="vector">The direction and length vector of the line segment.</param>
            <returns>
            A new <see cref="T:MonoGame.Extended.Particles.Primitives.LineSegment"/> starting at the origin and extending by the specified vector.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Particles.Primitives.LineSegment.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current line segment.
            </summary>
            <param name="obj">The object to compare with the current line segment.</param>
            <returns>
            <see langword="true"/> if the specified object is a <see cref="T:MonoGame.Extended.Particles.Primitives.LineSegment"/> and is equal to the
            current line segment; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Particles.Primitives.LineSegment.Equals(MonoGame.Extended.Particles.Primitives.LineSegment)">
            <summary>
            Determines whether the specified line segment is equal to the current line segment.
            </summary>
            <param name="other">The line segment to compare with the current line segment.</param>
            <returns>
            <see langword="true"/> if the specified line segment is equal to the current line segment;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Particles.Primitives.LineSegment.GetHashCode">
            <summary>
            Returns the hash code for this line segment.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:MonoGame.Extended.Particles.Primitives.LineSegment.ToString">
            <summary>
            Returns a string representation of this line segment.
            </summary>
            <returns>
            A string containing the coordinates of both points in the format:
            "(x1:y1,x2:y2)".
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Particles.Primitives.LineSegment.op_Equality(MonoGame.Extended.Particles.Primitives.LineSegment,MonoGame.Extended.Particles.Primitives.LineSegment)">
            <summary>
            Determines whether two line segments are equal.
            </summary>
            <param name="lhs">The first line segment to compare.</param>
            <param name="rhs">The second line segment to compare.</param>
            <returns>
            <see langword="true"/> if the line segments are equal; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Particles.Primitives.LineSegment.op_Inequality(MonoGame.Extended.Particles.Primitives.LineSegment,MonoGame.Extended.Particles.Primitives.LineSegment)">
            <summary>
            Determines whether two line segments are not equal.
            </summary>
            <param name="lhs">The first line segment to compare.</param>
            <param name="rhs">The second line segment to compare.</param>
            <returns>
            <see langword="true"/> if the line segments are not equal; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:MonoGame.Extended.Particles.Profiles.BoxFillProfile">
            <summary>
            A profile that randomly distributes particles throughout a rectangular area.
            </summary>
            <remarks>
            The <see cref="T:MonoGame.Extended.Particles.Profiles.BoxFillProfile"/> generates random positions within a rectangle centered the emitter's position, with
            random unit vector headings. This creates a uniform distribution of particles across the defined area, with
            particles moving in all directions.
            </remarks>
        </member>
        <member name="F:MonoGame.Extended.Particles.Profiles.BoxFillProfile.Width">
            <summary>
            The width of the rectangular area.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.Particles.Profiles.BoxFillProfile.Height">
            <summary>
            The height of the rectangular area.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Particles.Profiles.BoxFillProfile.GetOffsetAndHeading(Microsoft.Xna.Framework.Vector2*,Microsoft.Xna.Framework.Vector2*)">
            <summary>
            Computes the offset and heading for a new particle.
            </summary>
            <param name="offset">A pointer to the Vector2 where the offset from the emitter position will be stored.</param>
            <param name="heading">A pointer to the Vector2 where the unit direction vector will be stored.</param>
        </member>
        <member name="T:MonoGame.Extended.Particles.Profiles.BoxProfile">
            <summary>
            A profile that distributes particles along the edges of a rectangular boundary.
            </summary>
            <remarks>
            The <see cref="T:MonoGame.Extended.Particles.Profiles.BoxProfile"/> randomly positions new particles on one of the four sides of a rectangular area
            centered at the emitter's position. Each side has an equal probability of being selected. Particles are given random
            unit vector headings, allowing them to move in any direction regardless of their starting edge.
            </remarks>
        </member>
        <member name="F:MonoGame.Extended.Particles.Profiles.BoxProfile.Width">
            <summary>
            The width of the rectangular perimeter.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.Particles.Profiles.BoxProfile.Height">
            <summary>
            The height of the rectangular perimeter.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Particles.Profiles.BoxProfile.GetOffsetAndHeading(Microsoft.Xna.Framework.Vector2*,Microsoft.Xna.Framework.Vector2*)">
            <summary>
            Computes the offset and heading for a new particle.
            </summary>
            <param name="offset">A pointer to the Vector2 where the offset from the emitter position will be stored.</param>
            <param name="heading">A pointer to the Vector2 where the unit direction vector will be stored.</param>
        </member>
        <member name="T:MonoGame.Extended.Particles.Profiles.BoxUniformProfile">
            <summary>
            A profile that distributes particles along the edges of a rectangular boundary with uniform density.
            </summary>
            <remarks>
                <para>
                    The <see cref="T:MonoGame.Extended.Particles.Profiles.BoxUniformProfile"/> positions new particles on the perimeter of a rectangle centered at the
                    emitter's position. Unlike <see cref="T:MonoGame.Extended.Particles.Profiles.BoxProfile"/> which gives equal probability to each side, this profile
                    allocates probability proportional to the length of each side, ensuring a uniform distribution of particles
                    around the entire perimeter.
                </para>
                <para>
                    This means longer sides will receive more particles than shorter sides, creating a visually balanced
                    distribution regardless of the rectangle's dimensions.
                </para>
                <para>
                    Particles are given random unit vector headings, allowing them to move in any direction regardless of their
                    starting edge.
                </para>
            </remarks>
        </member>
        <member name="F:MonoGame.Extended.Particles.Profiles.BoxUniformProfile.Width">
            <summary>
            The width of the rectangular perimeter.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.Particles.Profiles.BoxUniformProfile.Height">
            <summary>
            The height of the rectangular perimeter.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Particles.Profiles.BoxUniformProfile.GetOffsetAndHeading(Microsoft.Xna.Framework.Vector2*,Microsoft.Xna.Framework.Vector2*)">
            <summary>
            Computes the offset and heading for a new particle.
            </summary>
            <param name="offset">A pointer to the Vector2 where the offset from the emitter position will be stored.</param>
            <param name="heading">A pointer to the Vector2 where the unit direction vector will be stored.</param>
        </member>
        <member name="T:MonoGame.Extended.Particles.Profiles.CircleProfile">
            <summary>
            A profile that distributes particles throughout a circular area with controllable radiation patterns.
            </summary>
            <remarks>
            The <see cref="T:MonoGame.Extended.Particles.Profiles.CircleProfile"/> randomly positions new particles within a circle centered at the emitter's position.
            The movement direction (heading) of each particle can be configured to radiate inward toward the center, outward
            from the center, or in random directions.
            </remarks>
        </member>
        <member name="F:MonoGame.Extended.Particles.Profiles.CircleProfile.Radius">
            <summary>
            The radius of the circular area.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.Particles.Profiles.CircleProfile.Radiate">
            <summary>
            The radiation mode that determines how particle headings are calculated.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Particles.Profiles.CircleProfile.GetOffsetAndHeading(Microsoft.Xna.Framework.Vector2*,Microsoft.Xna.Framework.Vector2*)">
            <summary>
            Computes the offset and heading for a new particle.
            </summary>
            <param name="offset">A pointer to the Vector2 where the offset from the emitter position will be stored.</param>
            <param name="heading">A pointer to the Vector2 where the unit direction vector will be stored.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when <see cref="F:MonoGame.Extended.Particles.Profiles.CircleProfile.Radiate"/> contains an unsupported value.
            </exception>
        </member>
        <member name="T:MonoGame.Extended.Particles.Profiles.CircleRadiation">
            <summary>
            Defines the radiation pattern for particles when using a <see cref="T:MonoGame.Extended.Particles.Profiles.CircleProfile"/>.
            </summary>
            <remarks>
            This enumeration determines how a particle's initial position within a circle affects its movement direction
            (heading). Different radiation patterns can create varied visual effects such as explosions, implosions, or
            randomized dispersion.
            </remarks>
        </member>
        <member name="F:MonoGame.Extended.Particles.Profiles.CircleRadiation.None">
            <summary>
            Particles move in random directions unrelated to their position.
            </summary>
            <remarks>
            In this mode, the initial heading of particles is completely random and has no relationship to their position
            within the circle. This creates a chaotic dispersion effect with no discernible pattern of movement.
            </remarks>
        </member>
        <member name="F:MonoGame.Extended.Particles.Profiles.CircleRadiation.In">
            <summary>
            Particles move toward the center of the circle.
            </summary>
            <remarks>
            In this mode, particles are given initial headings that point directly toward the center of the circle from
            their starting position. This creates an implosion or suction effect, as if particles are being drawn inward.
            </remarks>
        </member>
        <member name="F:MonoGame.Extended.Particles.Profiles.CircleRadiation.Out">
            <summary>
            Particles move away from the center of the circle.
            </summary>
            <remarks>
            In this mode, particles are given initial headings that point directly away from the center of the circle,
            extending their starting position outward. This creates an explosion or burst effect, as if particles are
            emanating from a central point.
            </remarks>
        </member>
        <member name="T:MonoGame.Extended.Particles.Profiles.LineProfile">
            <summary>
            A profile that distributes particles uniformly along a line segment with random headings.
            </summary>
            <remarks>
            The <see cref="T:MonoGame.Extended.Particles.Profiles.LineProfile"/> positions particles randomly along a line segment centered at the emitter position and
            defined by an axis direction and length. Unlike <see cref="T:MonoGame.Extended.Particles.Profiles.LineUniformProfile"/>, this profile gives each particle a
            random heading in any direction.
            </remarks>
        </member>
        <member name="F:MonoGame.Extended.Particles.Profiles.LineProfile.Axis">
            <summary>
            The direction vector of the line axis.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.Particles.Profiles.LineProfile.Length">
            <summary>
            The length of the line segment.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Particles.Profiles.LineProfile.GetOffsetAndHeading(Microsoft.Xna.Framework.Vector2*,Microsoft.Xna.Framework.Vector2*)">
            <summary>
            Computes the offset and heading for a new particle.
            </summary>
            <param name="offset">A pointer to the Vector2 where the offset from the emitter position will be stored.</param>
            <param name="heading">A pointer to the Vector2 where the unit direction vector will be stored.</param>
        </member>
        <member name="T:MonoGame.Extended.Particles.Profiles.LineUniformProfile">
            <summary>
            A profile that distributes particles uniformly along a line segment with a fixed heading direction.
            </summary>
            <remarks>
            The <see cref="T:MonoGame.Extended.Particles.Profiles.LineUniformProfile"/> positions particles randomly along a line segment centered at the emitter
            position and defined by an axis direction and length. Unlike other profiles, this profile uses a fixed heading
            direction for all particles, perpendicular to the line.
            </remarks>
        </member>
        <member name="F:MonoGame.Extended.Particles.Profiles.LineUniformProfile.Axis">
            <summary>
            The direction vector of the line axis.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.Particles.Profiles.LineUniformProfile.Length">
            <summary>
            The length of the line segment.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.Particles.Profiles.LineUniformProfile.PerpendicularDirection">
            <summary>
            The fixed heading direction for all particles spawned from this profile.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Particles.Profiles.LineUniformProfile.GetOffsetAndHeading(Microsoft.Xna.Framework.Vector2*,Microsoft.Xna.Framework.Vector2*)">
            <summary>
            Computes the offset and heading for a new particle.
            </summary>
            <param name="offset">A pointer to the Vector2 where the offset from the emitter position will be stored.</param>
            <param name="heading">A pointer to the Vector2 where the unit direction vector will be stored.</param>
        </member>
        <member name="M:MonoGame.Extended.Particles.Profiles.LineUniformProfile.SetPerpendicularDirection(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Sets the <see cref="F:MonoGame.Extended.Particles.Profiles.LineUniformProfile.PerpendicularDirection"/> property to a normalized version of the specified vector.
            </summary>
            <param name="direction">The direction vector to normalize and use as the perpendicular direction.</param>
        </member>
        <member name="T:MonoGame.Extended.Particles.Profiles.PointProfile">
            <summary>
            A profile that emits all particles from a single point with random headings.
            </summary>
            <remarks>
            The <see cref="T:MonoGame.Extended.Particles.Profiles.PointProfile"/> is the simplest emission profile, where all particles originate exactly at the
            emitter position with no offset. Each particle is given a random heading in any direction, creating a radial
            dispersion pattern.
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Particles.Profiles.PointProfile.GetOffsetAndHeading(Microsoft.Xna.Framework.Vector2*,Microsoft.Xna.Framework.Vector2*)">
            <summary>
            Computes the offset and heading for a new particle.
            </summary>
            <param name="offset">A pointer to the Vector2 where the offset from the emitter position will be stored.</param>
            <param name="heading">A pointer to the Vector2 where the unit direction vector will be stored.</param>
            <remarks>
            The offset is always set to (0,0), meaning particles will spawn exactly at the emitter position.
            </remarks>
        </member>
        <member name="T:MonoGame.Extended.Particles.Profiles.Profile">
            <summary>
            Provides an abstract base class for particle emission profiles.
            </summary>
            <remarks>
            A profile determines how particles are initially positioned and directed when they are emitted. Different profiles
            create different distribution patterns, such as points, lines, circles, or boxes.
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Particles.Profiles.Profile.GetOffsetAndHeading(Microsoft.Xna.Framework.Vector2*,Microsoft.Xna.Framework.Vector2*)">
            <summary>
            Computes the offset and heading for a new particle.
            </summary>
            <param name="offset">A pointer to the Vector2 where the offset from the emitter position will be stored.</param>
            <param name="heading">A pointer to the Vector2 where the unit direction vector will be stored.</param>
        </member>
        <member name="M:MonoGame.Extended.Particles.Profiles.Profile.Point">
            <summary>
            Creates a <see cref="T:MonoGame.Extended.Particles.Profiles.PointProfile"/> that emits particles from a single point.
            </summary>
            <returns>A new <see cref="T:MonoGame.Extended.Particles.Profiles.PointProfile"/> instance.</returns>
        </member>
        <member name="M:MonoGame.Extended.Particles.Profiles.Profile.Line(Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            Creates a <see cref="T:MonoGame.Extended.Particles.Profiles.LineProfile"/> that emits particles along a line segment.
            </summary>
            <param name="axis">The direction vector of the line.</param>
            <param name="length">The length of the line segment.</param>
            <returns>A new <see cref="T:MonoGame.Extended.Particles.Profiles.LineProfile"/> instance.</returns>
        </member>
        <member name="M:MonoGame.Extended.Particles.Profiles.Profile.LineUniform(Microsoft.Xna.Framework.Vector2,System.Single,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Creates a <see cref="T:MonoGame.Extended.Particles.Profiles.LineUniformProfile"/> that emits particles uniformly along a line segment with a fixed heading.
            </summary>
            <param name="axis">The direction vector of the line axis.</param>
            <param name="length">The length fo the line segment.</param>
            <param name="perpendicularDirection">The fixed heading direction for all particles spawned from the profile.</param>
            <returns></returns>
        </member>
        <member name="M:MonoGame.Extended.Particles.Profiles.Profile.Ring(System.Single,MonoGame.Extended.Particles.Profiles.CircleRadiation)">
            <summary>
            Creates a <see cref="T:MonoGame.Extended.Particles.Profiles.RingProfile"/> that emits particles from the perimeter of a circle.
            </summary>
            <param name="radius">The radius of the ring.</param>
            <param name="radiate">The radiation pattern for particle headings.</param>
            <returns>A new <see cref="T:MonoGame.Extended.Particles.Profiles.RingProfile"/> instance.</returns>
        </member>
        <member name="M:MonoGame.Extended.Particles.Profiles.Profile.Box(System.Single,System.Single)">
            <summary>
            Creates a <see cref="T:MonoGame.Extended.Particles.Profiles.BoxProfile"/> that emits particles from the perimeter of a rectangle.
            </summary>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
            <returns>A new <see cref="T:MonoGame.Extended.Particles.Profiles.BoxProfile"/> instance.</returns>
        </member>
        <member name="M:MonoGame.Extended.Particles.Profiles.Profile.BoxFill(System.Single,System.Single)">
            <summary>
            Creates a <see cref="T:MonoGame.Extended.Particles.Profiles.BoxFillProfile"/> that emits particles from within a rectangular area.
            </summary>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
            <returns>A new <see cref="T:MonoGame.Extended.Particles.Profiles.BoxFillProfile"/> instance.</returns>
        </member>
        <member name="M:MonoGame.Extended.Particles.Profiles.Profile.BoxUniform(System.Single,System.Single)">
            <summary>
            Creates a <see cref="T:MonoGame.Extended.Particles.Profiles.BoxUniformProfile"/> that emits particles from the perimeter of a rectangle with uniform density.
            </summary>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
            <returns>A new <see cref="T:MonoGame.Extended.Particles.Profiles.BoxUniformProfile"/> instance.</returns>
        </member>
        <member name="M:MonoGame.Extended.Particles.Profiles.Profile.Circle(System.Single,MonoGame.Extended.Particles.Profiles.CircleRadiation)">
            <summary>
            Creates a <see cref="T:MonoGame.Extended.Particles.Profiles.CircleProfile"/> that emits particles from within a circular area.
            </summary>
            <param name="radius">The radius of the circle.</param>
            <param name="radiate">The radiation pattern for particle headings.</param>
            <returns>A new <see cref="T:MonoGame.Extended.Particles.Profiles.CircleProfile"/> instance.</returns>
        </member>
        <member name="M:MonoGame.Extended.Particles.Profiles.Profile.Spray(Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            Creates a <see cref="T:MonoGame.Extended.Particles.Profiles.SprayProfile"/> that emits particles in a directional cone.
            </summary>
            <param name="direction">The central direction of the spray.</param>
            <param name="spread">The angular spread of the spray, in radians.</param>
            <returns>A new <see cref="T:MonoGame.Extended.Particles.Profiles.SprayProfile"/> instance.</returns>
        </member>
        <member name="M:MonoGame.Extended.Particles.Profiles.Profile.ToString">
            <inheritdoc />
        </member>
        <member name="T:MonoGame.Extended.Particles.Profiles.RingProfile">
            <summary>
            A profile that distributes particles along the perimeter of a circle with controllable radiation patterns.
            </summary>
            <remarks>
                <para>
                    The <see cref="T:MonoGame.Extended.Particles.Profiles.RingProfile"/> positions new particles exclusively on the circumference of a circle centered
                    at the emitter's position. Unlike <see cref="T:MonoGame.Extended.Particles.Profiles.CircleProfile"/> which distributes particles throughout the
                    circular area, this profile places particles only on the edge.
                </para>
                <para>
                    The movement direction (heading) of each particle can be configured to radiate inward toward the center,
                    outward from the center, or in random directions unrelated to their position.
                </para>
            </remarks>
        </member>
        <member name="F:MonoGame.Extended.Particles.Profiles.RingProfile.Radius">
            <summary>
            The radius if the ring.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.Particles.Profiles.RingProfile.Radiate">
            <summary>
            The radiation mode that determines how particle headings are calculated.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Particles.Profiles.RingProfile.GetOffsetAndHeading(Microsoft.Xna.Framework.Vector2*,Microsoft.Xna.Framework.Vector2*)">
            <summary>
            Computes the offset and heading for a new particle.
            </summary>
            <param name="offset">A pointer to the Vector2 where the offset from the emitter position will be stored.</param>
            <param name="heading">A pointer to the Vector2 where the unit direction vector will be stored.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when <see cref="F:MonoGame.Extended.Particles.Profiles.RingProfile.Radiate"/> contains an unsupported value.
            </exception>
        </member>
        <member name="T:MonoGame.Extended.Particles.Profiles.SprayProfile">
            <summary>
            A profile that emits particles from a single point in a directional cone pattern.
            </summary>
            <remarks>
            The <see cref="T:MonoGame.Extended.Particles.Profiles.SprayProfile"/> positions all particles exactly at the emitter's position,
            like <see cref="T:MonoGame.Extended.Particles.Profiles.PointProfile"/>, but instead of random directions in all directions, it constrains the particle
            headings to a cone-shaped area defined by a central direction and spread angle.
            </remarks>
        </member>
        <member name="F:MonoGame.Extended.Particles.Profiles.SprayProfile.Direction">
            <summary>
            The central direction vector of the spray.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.Particles.Profiles.SprayProfile.Spread">
             <summary>
             The angular spread of the spray cone (in radians).
             </summary>
             <remarks>
             This value determines how wide the spray cone is.  For example:
            
             <list type="bullet">
                 <item>A value of 0 will emit all particles in exactly the same direction.</item>
                 <item>A value of π (Pi) will create a 180-degree fan.</item>
                 <item>A value of 2π will emit in all directions (similar to <see cref="T:MonoGame.Extended.Particles.Profiles.PointProfile"/>).</item>
             </list>
             </remarks>
        </member>
        <member name="M:MonoGame.Extended.Particles.Profiles.SprayProfile.GetOffsetAndHeading(Microsoft.Xna.Framework.Vector2*,Microsoft.Xna.Framework.Vector2*)">
            <summary>
            Computes the offset and heading for a new particle.
            </summary>
            <param name="offset">A pointer to the Vector2 where the offset from the emitter position will be stored.</param>
            <param name="heading">A pointer to the Vector2 where the unit direction vector will be stored.</param>
            <remarks>
            The offset is always set to (0,0), meaning particles will spawn exactly at the emitter position.
            </remarks>
        </member>
        <member name="T:MonoGame.Extended.RectangleExtensions">
            <summary>
            Provides extension methods for the <see cref="T:Microsoft.Xna.Framework.Rectangle"/> structure.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.RectangleExtensions.GetCorners(Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Gets the corners of the rectangle in a clockwise direction starting at the top left.
            </summary>
            <param name="rectangle">The rectangle to get the corners of.</param>
            <returns>An array of <see cref="T:Microsoft.Xna.Framework.Point"/> elements representing the corners of the rectangle.</returns>
        </member>
        <member name="M:MonoGame.Extended.RectangleExtensions.ToRectangleF(Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Converts the specified <see cref="T:Microsoft.Xna.Framework.Rectangle"/> to a <see cref="T:MonoGame.Extended.RectangleF"/>.
            </summary>
            <param name="rectangle">The rectangle to convert.</param>
            <returns>The converted <see cref="T:MonoGame.Extended.RectangleF"/>.</returns>
        </member>
        <member name="M:MonoGame.Extended.RectangleExtensions.Clip(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Clips the specified rectangle against the specified clipping rectangle.
            </summary>
            <param name="rectangle">The rectangle to clip.</param>
            <param name="clippingRectangle">The rectangle to clip against.</param>
            <returns>The clipped rectangle, or <see cref="P:Microsoft.Xna.Framework.Rectangle.Empty"/> if the rectangles do not intersect.</returns>
        </member>
        <member name="M:MonoGame.Extended.RectangleExtensions.GetRelativeRectangle(Microsoft.Xna.Framework.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets a rectangle that is relative to the specified source rectangle, with the specified offsets and dimensions.
            </summary>
            <param name="source">The source rectangle.</param>
            <param name="x">The x-coordinate of the relative rectangle, relative to the source rectangle.</param>
            <param name="y">The y-coordinate of the relative rectangle, relative to the source rectangle.</param>
            <param name="width">The width, in pixels, of the relative rectangle.</param>
            <param name="height">The height, in pixels, of the relative rectangle.</param>
            <returns>The relative rectangle, clipped to the source rectangle.</returns>
        </member>
        <member name="T:MonoGame.Extended.RectangleFExtensions">
            <summary>
            Provides extension methods for the <see cref="T:MonoGame.Extended.RectangleF"/> structure.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.RectangleFExtensions.GetCorners(MonoGame.Extended.RectangleF)">
            <summary>
            Gets the corners of the rectangle in a clockwise direction starting at the top left.
            </summary>
            <param name="rectangle">The rectangle to get the corners of.</param>
            <returns>An array of <see cref="T:Microsoft.Xna.Framework.Vector2"/> elements representing the corners of the rectangle.</returns>
        </member>
        <member name="M:MonoGame.Extended.RectangleFExtensions.ToRectangle(MonoGame.Extended.RectangleF)">
            <summary>
            Converts the specified <see cref="T:MonoGame.Extended.RectangleF"/> to a <see cref="T:Microsoft.Xna.Framework.Rectangle"/>.
            </summary>
            <param name="rectangle">The rectangle to convert.</param>
            <returns>The converted <see cref="T:Microsoft.Xna.Framework.Rectangle"/>.</returns>
        </member>
        <member name="M:MonoGame.Extended.RectangleFExtensions.Clip(MonoGame.Extended.RectangleF,MonoGame.Extended.RectangleF)">
            <summary>
            Clips the specified rectangle against the specified clipping rectangle.
            </summary>
            <param name="rectangle">The rectangle to clip.</param>
            <param name="clippingRectangle">The rectangle to clip against.</param>
            <returns>The clipped rectangle, or <see cref="F:MonoGame.Extended.RectangleF.Empty"/> if the rectangles do not intersect.</returns>
        </member>
        <member name="M:MonoGame.Extended.RectangleFExtensions.GetRelativeRectangle(MonoGame.Extended.RectangleF,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Gets a rectangle that is relative to the specified source rectangle, with the specified offsets and dimensions.
            </summary>
            <param name="source">The source rectangle.</param>
            <param name="x">The x-coordinate of the relative rectangle, relative to the source rectangle.</param>
            <param name="y">The y-coordinate of the relative rectangle, relative to the source rectangle.</param>
            <param name="width">The width, in pixels, of the relative rectangle.</param>
            <param name="height">The height, in pixels, of the relative rectangle.</param>
            <returns>The relative rectangle, clipped to the source rectangle.</returns>
        </member>
        <member name="M:MonoGame.Extended.Serialization.Json.BaseTypeJsonConverter`1.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:MonoGame.Extended.Serialization.Json.BaseTypeJsonConverter`1.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
            <exception cref="T:System.InvalidOperationException" />
        </member>
        <member name="M:MonoGame.Extended.Serialization.Json.BaseTypeJsonConverter`1.Write(System.Text.Json.Utf8JsonWriter,`0,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">
            Throw if <paramref name="writer"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:MonoGame.Extended.Serialization.Json.ColorJsonConverter">
            <summary>
            Converts a <see cref="T:Microsoft.Xna.Framework.Color"/> value to or from JSON.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Serialization.Json.ColorJsonConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:MonoGame.Extended.Serialization.Json.ColorJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="M:MonoGame.Extended.Serialization.Json.ColorJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Microsoft.Xna.Framework.Color,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">
            Throw if <paramref name="writer"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:MonoGame.Extended.Serialization.Json.ContentManagerJsonConverter`1">
            <summary>
            Loads content from a JSON file into the <see cref="T:Microsoft.Xna.Framework.Content.ContentManager"/> using the asset name
            </summary>
            <typeparam name="T">The type of content to load</typeparam>
        </member>
        <member name="M:MonoGame.Extended.Serialization.Json.ContentManagerJsonConverter`1.#ctor(Microsoft.Xna.Framework.Content.ContentManager,System.Func{`0,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:MonoGame.Extended.Serialization.Json.ContentManagerJsonConverter`1"/> class.
            </summary>
            <param name="contentManager">The <see cref="T:Microsoft.Xna.Framework.Content.ContentManager"/> used to load content.</param>
            <param name="getAssetName">A function that returns the asset name for a given instance of <typeparamref name="T"/>.</param>
        </member>
        <member name="M:MonoGame.Extended.Serialization.Json.ContentManagerJsonConverter`1.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:MonoGame.Extended.Serialization.Json.ContentManagerJsonConverter`1.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="M:MonoGame.Extended.Serialization.Json.ContentManagerJsonConverter`1.Write(System.Text.Json.Utf8JsonWriter,`0,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">
            Throw if <paramref name="writer"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:MonoGame.Extended.Serialization.Json.FloatStringConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:MonoGame.Extended.Serialization.Json.FloatStringConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="M:MonoGame.Extended.Serialization.Json.FloatStringConverter.Write(System.Text.Json.Utf8JsonWriter,System.Single,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="T:MonoGame.Extended.Serialization.Json.HslColorJsonConverter">
            <summary>
            Converts a <see cref="T:MonoGame.Extended.HslColor"/> value to or from JSON.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Serialization.Json.HslColorJsonConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:MonoGame.Extended.Serialization.Json.HslColorJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="M:MonoGame.Extended.Serialization.Json.HslColorJsonConverter.Write(System.Text.Json.Utf8JsonWriter,MonoGame.Extended.HslColor,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">
            Throw if <paramref name="writer"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:MonoGame.Extended.Serialization.Json.NinePatchJsonConverter">
            <summary>
            Converts a <see cref="T:MonoGame.Extended.Graphics.NinePatch"/> value to or from JSON.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Serialization.Json.NinePatchJsonConverter.#ctor(MonoGame.Extended.Serialization.Json.ITextureRegionService)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoGame.Extended.Serialization.Json.NinePatchJsonConverter"/> class.
            </summary>
            <param name="textureRegionService">The texture region service used to retrieve texture regions.</param>
        </member>
        <member name="M:MonoGame.Extended.Serialization.Json.NinePatchJsonConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:MonoGame.Extended.Serialization.Json.NinePatchJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
            <exception cref="T:System.Text.Json.JsonException">
            Thrown if the JSON property does not contain a properly formatted <see cref="T:MonoGame.Extended.Graphics.NinePatch"/> value
            </exception>
        </member>
        <member name="M:MonoGame.Extended.Serialization.Json.NinePatchJsonConverter.Write(System.Text.Json.Utf8JsonWriter,MonoGame.Extended.Graphics.NinePatch,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">
            Throw if <paramref name="writer"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:MonoGame.Extended.Serialization.Json.RangeJsonConverter`1">
            <summary>
            Converts a <see cref="T:MonoGame.Extended.Range`1"/> value to or from JSON.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Serialization.Json.RangeJsonConverter`1.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:MonoGame.Extended.Serialization.Json.RangeJsonConverter`1.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="M:MonoGame.Extended.Serialization.Json.RangeJsonConverter`1.Write(System.Text.Json.Utf8JsonWriter,MonoGame.Extended.Range{`0},System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">
            Throw if <paramref name="writer"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:MonoGame.Extended.Serialization.Json.RectangleFJsonConverter">
            <summary>
            Converts a <see cref="T:MonoGame.Extended.RectangleF"/> value to or from JSON.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Serialization.Json.RectangleFJsonConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:MonoGame.Extended.Serialization.Json.RectangleFJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="M:MonoGame.Extended.Serialization.Json.RectangleFJsonConverter.Write(System.Text.Json.Utf8JsonWriter,MonoGame.Extended.RectangleF,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">
            Throw if <paramref name="writer"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:MonoGame.Extended.Serialization.Json.Size2JsonConverter">
            <summary>
            Converts a <see cref="T:MonoGame.Extended.SizeF"/> value to or from JSON.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Serialization.Json.Size2JsonConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:MonoGame.Extended.Serialization.Json.Size2JsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
            <exception cref="T:System.Text.Json.JsonException">
            Thrown if the JSON property does not contain a properly formatted <see cref="T:MonoGame.Extended.SizeF"/> value
            </exception>
        </member>
        <member name="M:MonoGame.Extended.Serialization.Json.Size2JsonConverter.Write(System.Text.Json.Utf8JsonWriter,MonoGame.Extended.SizeF,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">
            Throw if <paramref name="writer"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:MonoGame.Extended.Serialization.Json.SizeJsonConverter">
            <summary>
            Converts a <see cref="T:MonoGame.Extended.Size"/> value to or from JSON.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Serialization.Json.SizeJsonConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:MonoGame.Extended.Serialization.Json.SizeJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
            <exception cref="T:System.Text.Json.JsonException">
            Thrown if the JSON property does not contain a properly formatted <see cref="T:MonoGame.Extended.Size"/> value
            </exception>
        </member>
        <member name="M:MonoGame.Extended.Serialization.Json.SizeJsonConverter.Write(System.Text.Json.Utf8JsonWriter,MonoGame.Extended.Size,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">
            Throw if <paramref name="writer"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:MonoGame.Extended.Serialization.Json.TextureAtlasJsonConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:MonoGame.Extended.Serialization.Json.TextureAtlasJsonConverter.Write(System.Text.Json.Utf8JsonWriter,MonoGame.Extended.Graphics.Texture2DAtlas,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="T:MonoGame.Extended.Serialization.Json.TextureRegion2DJsonConverter">
            <summary>
            Converts a <see cref="T:MonoGame.Extended.Graphics.Texture2DRegion"/> value to or from JSON.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Serialization.Json.TextureRegion2DJsonConverter.#ctor(MonoGame.Extended.Serialization.Json.ITextureRegionService)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoGame.Extended.Serialization.Json.TextureRegion2DJsonConverter"/> class.
            </summary>
            <param name="textureRegionService">The texture region service to use for retrieving texture regions.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="textureRegionService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:MonoGame.Extended.Serialization.Json.TextureRegion2DJsonConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:MonoGame.Extended.Serialization.Json.TextureRegion2DJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="M:MonoGame.Extended.Serialization.Json.TextureRegion2DJsonConverter.Write(System.Text.Json.Utf8JsonWriter,MonoGame.Extended.Graphics.Texture2DRegion,System.Text.Json.JsonSerializerOptions)">
             <inheritdoc />
             <exception cref="T:System.ArgumentNullException">
             Throw if <paramref name="writer"/> is <see langword="null"/>.
            
             -or-
            
             Thrown if <paramref name="value"/> is <see langword="null"/>.
             </exception>
        </member>
        <member name="T:MonoGame.Extended.Serialization.Json.ThicknessJsonConverter">
            <summary>
            Converts a <see cref="T:MonoGame.Extended.Thickness"/> value to or from JSON.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Serialization.Json.ThicknessJsonConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:MonoGame.Extended.Serialization.Json.ThicknessJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="M:MonoGame.Extended.Serialization.Json.ThicknessJsonConverter.Write(System.Text.Json.Utf8JsonWriter,MonoGame.Extended.Thickness,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">
            Throw if <paramref name="writer"/> is <see langword="null"/>
            </exception>
        </member>
        <member name="T:MonoGame.Extended.Serialization.Json.Utf8JsonReaderExtensions">
            <summary>
            Provides extension methods for working with <see cref="T:System.Text.Json.Utf8JsonReader"/>.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Serialization.Json.Utf8JsonReaderExtensions.ReadAsMultiDimensional``1(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Reads a multi-dimensional JSON array and converts it to an array of the specified type.
            </summary>
            <typeparam name="T">The type of the array elements.</typeparam>
            <param name="reader">The <see cref="T:System.Text.Json.Utf8JsonReader"/> to read from.</param>
            <param name="options">An object that specifies serialization options to use.</param>
            <returns>An array of the specified type.</returns>
            <exception cref="T:System.NotSupportedException">Thrown when the token type is not supported.</exception>
        </member>
        <member name="T:MonoGame.Extended.Serialization.Json.Vector2JsonConverter">
            <summary>
            Converts a <see cref="T:Microsoft.Xna.Framework.Vector2"/> value to or from JSON.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Serialization.Json.Vector2JsonConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:MonoGame.Extended.Serialization.Json.Vector2JsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
            <exception cref="T:System.Text.Json.JsonException">
            Thrown if the JSON property does not contain a properly formatted <see cref="T:Microsoft.Xna.Framework.Vector2"/> value
            </exception>
        </member>
        <member name="M:MonoGame.Extended.Serialization.Json.Vector2JsonConverter.Write(System.Text.Json.Utf8JsonWriter,Microsoft.Xna.Framework.Vector2,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">
            Throw if <paramref name="writer"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:MonoGame.Extended.Serialization.Xml.XmlReaderExtensions">
            <summary>
            Provides extension methods for <see cref="T:System.Xml.XmlReader"/> to simplify reading and parsing XML Attributes into
            strong-typed values.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Serialization.Xml.XmlReaderExtensions.GetAttributeInt(System.Xml.XmlReader,System.String)">
            <summary>
            Reads an XML attribute as an <see langword="int"/> value.
            </summary>
            <param name="reader">The XML reader instance.</param>
            <param name="attributeName">The name of the attribute to read.</param>
            <returns>The <see langword="int"/> value parsed from the value of the specified attribute.</returns>
            <exception cref="T:System.Xml.XmlException">
            Thrown when the attribute is missing, or when the attribute value cannot be parsed as an <see langword="int"/>.
            </exception>
        </member>
        <member name="M:MonoGame.Extended.Serialization.Xml.XmlReaderExtensions.GetAttributeFloat(System.Xml.XmlReader,System.String)">
            <summary>
            Reads an XML attribute as a <see langword="float"/> value.
            </summary>
            <param name="reader">The XML reader instance.</param>
            <param name="attributeName">The name of the attribute to read.</param>
            <returns>The <see langword="float"/> value parsed from the specified attribute.</returns>
            <exception cref="T:System.Xml.XmlException">
            Thrown when the attribute is missing, or when the attribute value cannot be parsed as a <see langword="float"/>.
            </exception>
        </member>
        <member name="M:MonoGame.Extended.Serialization.Xml.XmlReaderExtensions.GetAttributeBool(System.Xml.XmlReader,System.String)">
            <summary>
            Reads an XML attribute as a <see langword="bool"/> value.
            </summary>
            <param name="reader">The XML reader instance.</param>
            <param name="attributeName">The name of the attribute to read.</param>
            <returns>The <see langword="bool"/> value parsed from the value of the specified attribute.</returns>
            <exception cref="T:System.Xml.XmlException">
            Thrown when the attribute is missing, or when the attribute value cannot be parsed as a <see langword="bool"/>.
            </exception>
        </member>
        <member name="M:MonoGame.Extended.Serialization.Xml.XmlReaderExtensions.GetAttributeEnum``1(System.Xml.XmlReader,System.String)">
            <summary>
            Reads an XML attribute as an enumeration value.
            </summary>
            <typeparam name="T">The enumeration type to parse.</typeparam>
            <param name="reader">The XML reader instance.</param>
            <param name="attributeName">The name of the attribute to read.</param>
            <returns>The enumeration value parsed from the value of the specified attribute.</returns>
            <exception cref="T:System.Xml.XmlException">
            Thrown when the attribute is missing, or when the attribute value cannot be parsed as the specified enumeration type.
            </exception>
        </member>
        <member name="M:MonoGame.Extended.Serialization.Xml.XmlReaderExtensions.GetAttributeRectangle(System.Xml.XmlReader,System.String)">
            <summary>
            Reads an XML attribute as a <see cref="T:Microsoft.Xna.Framework.Rectangle"/> value.
            </summary>
            <param name="reader">The XML reader instance.</param>
            <param name="attributeName">The name of the attribute to read.</param>
            <returns>The <see cref="T:Microsoft.Xna.Framework.Rectangle"/> value parsed from the value of the specified attribute.</returns>
            <exception cref="T:System.Xml.XmlException">
            Thrown when the attribute is missing, or when the attribute value cannot be parsed as a <see cref="T:Microsoft.Xna.Framework.Rectangle"/>.
            </exception>
        </member>
        <member name="M:MonoGame.Extended.Serialization.Xml.XmlReaderExtensions.GetAttributeVector2(System.Xml.XmlReader,System.String)">
            <summary>
            Reads an XML attribute as a <see cref="T:Microsoft.Xna.Framework.Vector2"/> value.
            </summary>
            <param name="reader">The XML reader instance.</param>
            <param name="attributeName">The name of the attribute to read.</param>
            <returns>The <see cref="T:Microsoft.Xna.Framework.Vector2"/> value parsed from the value of the specified attribute.</returns>
            <exception cref="T:System.Xml.XmlException">
            Thrown when the attribute is missing, or when the attribute value cannot be parsed as a <see cref="T:Microsoft.Xna.Framework.Vector2"/>.
            </exception>
        </member>
        <member name="M:MonoGame.Extended.Serialization.Xml.XmlReaderExtensions.GetAttributeVector3(System.Xml.XmlReader,System.String)">
            <summary>
            Reads an XML attribute as a <see cref="T:Microsoft.Xna.Framework.Vector3"/> value.
            </summary>
            <param name="reader">The XML reader instance.</param>
            <param name="attributeName">The name of the attribute to read.</param>
            <returns>The <see cref="T:Microsoft.Xna.Framework.Vector3"/> value parsed from the value of the specified attribute.</returns>
            <exception cref="T:System.Xml.XmlException">
            Thrown when the attribute is missing, or when the attribute value cannot be parsed as a <see cref="T:Microsoft.Xna.Framework.Vector3"/>.
            </exception>
        </member>
        <member name="T:MonoGame.Extended.Serialization.Xml.XmlWriterExtensions">
            <summary>
            Provides extension methods for <see cref="T:System.Xml.XmlWriter"/> to simplify writing XML attributes from strongly-typed values
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Serialization.Xml.XmlWriterExtensions.WriteAttributeInt(System.Xml.XmlWriter,System.String,System.Int32)">
            <summary>
            Writes an XML attribute from an <see langword="int"/> value.
            </summary>
            <param name="writer">The XML writer instance.</param>
            <param name="attributeName">The name of the attribute to write.</param>
            <param name="value">The <see langword="int"/> value to write as the attribute value.</param>
            <exception cref="T:System.InvalidOperationException">The writer state is not valid for this operation.</exception>
            <exception cref="T:System.ArgumentException">The attribute name is not valid.</exception>
        </member>
        <member name="M:MonoGame.Extended.Serialization.Xml.XmlWriterExtensions.WriteAttributeFloat(System.Xml.XmlWriter,System.String,System.Single)">
            <summary>
            Writes an XML attribute from a <see langword="float"/> value.
            </summary>
            <param name="writer">The XML writer instance.</param>
            <param name="attributeName">The name of the attribute to write.</param>
            <param name="value">The <see langword="float"/> value to write as the attribute value.</param>
            <exception cref="T:System.InvalidOperationException">The writer state is not valid for this operation.</exception>
            <exception cref="T:System.ArgumentException">The attribute name is not valid.</exception>
        </member>
        <member name="M:MonoGame.Extended.Serialization.Xml.XmlWriterExtensions.WriteAttributeBool(System.Xml.XmlWriter,System.String,System.Boolean)">
            <summary>
            Writes an XML attribute from a <see langword="bool"/> value.
            </summary>
            <param name="writer">The XML writer instance.</param>
            <param name="attributeName">The name of the attribute to write.</param>
            <param name="value">The <see langword="bool"/> value to write as the attribute value.</param>
            <exception cref="T:System.InvalidOperationException">The writer state is not valid for this operation.</exception>
            <exception cref="T:System.ArgumentException">The attribute name is not valid.</exception>
        </member>
        <member name="M:MonoGame.Extended.Serialization.Xml.XmlWriterExtensions.WriteAttributeRectangle(System.Xml.XmlWriter,System.String,Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Writes an XML attribute from a <see cref="T:Microsoft.Xna.Framework.Rectangle"/> value.
            </summary>
            <param name="writer">The XML writer instance.</param>
            <param name="attributeName">The name of the attribute to write.</param>
            <param name="value">The <see cref="T:Microsoft.Xna.Framework.Rectangle"/> value to write as the attribute value.</param>
            <exception cref="T:System.InvalidOperationException">The writer state is not valid for this operation.</exception>
            <exception cref="T:System.ArgumentException">The attribute name is not valid.</exception>
        </member>
        <member name="M:MonoGame.Extended.Serialization.Xml.XmlWriterExtensions.WriteAttributeVector2(System.Xml.XmlWriter,System.String,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Writes an XML attribute from a <see cref="T:Microsoft.Xna.Framework.Vector2"/> value.
            </summary>
            <param name="writer">The XML writer instance.</param>
            <param name="attributeName">The name of the attribute to write.</param>
            <param name="value">The <see cref="T:Microsoft.Xna.Framework.Vector2"/> value to write as the attribute value.</param>
            <exception cref="T:System.InvalidOperationException">The writer state is not valid for this operation.</exception>
            <exception cref="T:System.ArgumentException">The attribute name is not valid.</exception>
        </member>
        <member name="M:MonoGame.Extended.Serialization.Xml.XmlWriterExtensions.WriteAttributeVector3(System.Xml.XmlWriter,System.String,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Writes an XML attribute from a <see cref="T:Microsoft.Xna.Framework.Vector3"/> value.
            </summary>
            <param name="writer">The XML writer instance.</param>
            <param name="attributeName">The name of the attribute to write.</param>
            <param name="value">The <see cref="T:Microsoft.Xna.Framework.Vector3"/> value to write as the attribute value.</param>
            <exception cref="T:System.InvalidOperationException">The writer state is not valid for this operation.</exception>
            <exception cref="T:System.ArgumentException">The attribute name is not valid.</exception>
        </member>
        <member name="P:MonoGame.Extended.Timers.GameTimer.Enabled">
            <inheritdoc />
        </member>
        <member name="P:MonoGame.Extended.Timers.GameTimer.UpdateOrder">
            <inheritdoc />
        </member>
        <member name="E:MonoGame.Extended.Timers.GameTimer.EnabledChanged">
            <inheritdoc />
        </member>
        <member name="E:MonoGame.Extended.Timers.GameTimer.UpdateOrderChanged">
            <inheritdoc />
        </member>
        <member name="T:MonoGame.Extended.BaseTransform`1">
            <summary>
                Represents the base class for the position, rotation, and scale of a game object in two-dimensions or
                three-dimensions.
            </summary>
            <typeparam name="TMatrix">The type of the matrix.</typeparam>
            <remarks>
                <para>
                    Every game object has a transform which is used to store and manipulate the position, rotation and scale
                    of the object. Every transform can have a parent, which allows to apply position, rotation and scale to game
                    objects hierarchically.
                </para>
                <para>
                    This class shouldn't be used directly. Instead use either of the derived classes; <see cref="T:MonoGame.Extended.Transform2" /> or
                    Transform3D.
                </para>
            </remarks>
        </member>
        <member name="P:MonoGame.Extended.BaseTransform`1.LocalMatrix">
            <summary>
                Gets the model-to-local space <see cref="T:MonoGame.Extended.Matrix3x2" />.
            </summary>
            <value>
                The model-to-local space <see cref="T:MonoGame.Extended.Matrix3x2" />.
            </value>
        </member>
        <member name="P:MonoGame.Extended.BaseTransform`1.WorldMatrix">
            <summary>
                Gets the local-to-world space <see cref="T:MonoGame.Extended.Matrix3x2" />.
            </summary>
            <value>
                The local-to-world space <see cref="T:MonoGame.Extended.Matrix3x2" />.
            </value>
        </member>
        <member name="P:MonoGame.Extended.BaseTransform`1.Parent">
            <summary>
                Gets or sets the parent instance.
            </summary>
            <value>
                The parent instance.
            </value>
            <remarks>
                <para>
                    Setting <see cref="P:MonoGame.Extended.BaseTransform`1.Parent" /> to a non-null instance enables this instance to
                    inherit the position, rotation, and scale of the parent instance. Setting <see cref="P:MonoGame.Extended.BaseTransform`1.Parent" /> to
                    <code>null</code> disables the inheritance altogether for this instance.
                </para>
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.BaseTransform`1.GetLocalMatrix(`0@)">
            <summary>
                Gets the model-to-local space <see cref="T:MonoGame.Extended.Matrix3x2" />.
            </summary>
            <param name="matrix">The model-to-local space <see cref="T:MonoGame.Extended.Matrix3x2" />.</param>
        </member>
        <member name="M:MonoGame.Extended.BaseTransform`1.GetWorldMatrix(`0@)">
            <summary>
                Gets the local-to-world space <see cref="T:MonoGame.Extended.Matrix3x2" />.
            </summary>
            <param name="matrix">The local-to-world space <see cref="T:MonoGame.Extended.Matrix3x2" />.</param>
        </member>
        <member name="T:MonoGame.Extended.Transform2">
            <summary>
                Represents the position, rotation, and scale of a two-dimensional game object.
            </summary>
            <seealso cref="T:MonoGame.Extended.BaseTransform`1" />
            <seealso cref="T:MonoGame.Extended.IMovable" />
            <seealso cref="T:MonoGame.Extended.IRotatable" />
            <seealso cref="T:MonoGame.Extended.IScalable" />
            <remarks>
                <para>
                    Every game object has a transform which is used to store and manipulate the position, rotation and scale
                    of the object. Every transform can have a parent, which allows to apply position, rotation and scale to game
                    objects hierarchically.
                </para>
            </remarks>
        </member>
        <member name="P:MonoGame.Extended.Transform2.WorldPosition">
            <summary>
                Gets the world position.
            </summary>
            <value>
                The world position.
            </value>
        </member>
        <member name="P:MonoGame.Extended.Transform2.WorldScale">
            <summary>
                Gets the world scale.
            </summary>
            <value>
                The world scale.
            </value>
        </member>
        <member name="P:MonoGame.Extended.Transform2.WorldRotation">
            <summary>
                Gets the world rotation angle in radians.
            </summary>
            <value>
                The world rotation angle in radians.
            </value>
        </member>
        <member name="P:MonoGame.Extended.Transform2.Position">
            <summary>
                Gets or sets the local position.
            </summary>
            <value>
                The local position.
            </value>
        </member>
        <member name="P:MonoGame.Extended.Transform2.Rotation">
            <summary>
                Gets or sets the local rotation angle in radians.
            </summary>
            <value>
                The local rotation angle in radians.
            </value>
        </member>
        <member name="P:MonoGame.Extended.Transform2.Scale">
            <summary>
                Gets or sets the local scale.
            </summary>
            <value>
                The local scale.
            </value>
        </member>
        <member name="T:MonoGame.Extended.Transform3">
            <summary>
                Represents the position, rotation, and scale of a three-dimensional game object.
            </summary>
            <seealso cref="T:MonoGame.Extended.BaseTransform`1" />
            <remarks>
                <para>
                    Every game object has a transform which is used to store and manipulate the position, rotation and scale
                    of the object. Every transform can have a parent, which allows to apply position, rotation and scale to game
                    objects hierarchically.
                </para>
            </remarks>
        </member>
        <member name="P:MonoGame.Extended.Transform3.WorldPosition">
            <summary>
                Gets the world position.
            </summary>
            <value>
                The world position.
            </value>
        </member>
        <member name="P:MonoGame.Extended.Transform3.WorldScale">
            <summary>
                Gets the world scale.
            </summary>
            <value>
                The world scale.
            </value>
        </member>
        <member name="P:MonoGame.Extended.Transform3.WorldRotation">
            <summary>
                Gets the world rotation quaternion in radians.
            </summary>
            <value>
                The world rotation quaternion in radians.
            </value>
        </member>
        <member name="P:MonoGame.Extended.Transform3.Position">
            <summary>
                Gets or sets the local position.
            </summary>
            <value>
                The local position.
            </value>
        </member>
        <member name="P:MonoGame.Extended.Transform3.Rotation">
            <summary>
                Gets or sets the local rotation quaternion in radians.
            </summary>
            <value>
                The local rotation quaternion in radians.
            </value>
        </member>
        <member name="P:MonoGame.Extended.Transform3.Scale">
            <summary>
                Gets or sets the local scale.
            </summary>
            <value>
                The local scale.
            </value>
        </member>
        <member name="M:MonoGame.Extended.VectorDraw.PrimitiveBatch.Begin(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@)">
            <summary>
            Begin is called to tell the PrimitiveBatch what kind of primitives will be
            drawn, and to prepare the graphics card to render those primitives.
            </summary>
            <param name="projection">The projection.</param>
            <param name="view">The view.</param>
        </member>
        <member name="M:MonoGame.Extended.VectorDraw.PrimitiveBatch.End">
            <summary>
            End is called once all the primitives have been drawn using AddVertex.
            it will call Flush to actually submit the draw call to the graphics card, and
            then tell the basic effect to end.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.ViewportAdapters.BoxingViewportAdapter.#ctor(Microsoft.Xna.Framework.GameWindow,Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoGame.Extended.ViewportAdapters.BoxingViewportAdapter" />.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.ViewportAdapters.BoxingViewportAdapter.HorizontalBleed">
            <summary>
                Size of horizontal bleed areas (from left and right edges) which can be safely cut off
            </summary>
        </member>
        <member name="P:MonoGame.Extended.ViewportAdapters.BoxingViewportAdapter.VerticalBleed">
            <summary>
                Size of vertical bleed areas (from top and bottom edges) which can be safely cut off
            </summary>
        </member>
        <member name="T:XmlNodeExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Xml.XmlNode"/> class.
            </summary>
        </member>
        <member name="M:XmlNodeExtensions.GetAttributeValue(System.Xml.XmlNode,System.String,System.String@)">
            <summary>
            Retrieves the value of the specified attribute from the <see cref="T:System.Xml.XmlNode"/>.
            </summary>
            <param name="node">The XML node.</param>
            <param name="attribute">The name of the attribute.</param>
            <param name="value">
            When this method returns, contains the value of the attribute, if found; otherwise, an empty string.
            </param>
            <returns><c>true</c> if the attribute is found and has a non-empty value; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:XmlNodeExtensions.GetStringAttribute(System.Xml.XmlNode,System.String)">
            <summary>
            Retrieves the string value of the specified attribute.
            </summary>
            <param name="node">The XML node.</param>
            <param name="attribute">The name of the attribute.</param>
            <returns>
            The string value of the attribute, or the default value if the attribute is not found or is empty.
            </returns>
        </member>
        <member name="M:XmlNodeExtensions.GetByteAttribute(System.Xml.XmlNode,System.String)">
            <summary>
            Retrieves the byte value of the specified attribute.
            </summary>
            <param name="node">The XML node.</param>
            <param name="attribute">The name of the attribute.</param>
            <returns>
            The byte value of the attribute, or the default value if the attribute is not found or is empty.
            </returns>
        </member>
        <member name="M:XmlNodeExtensions.GetUInt16Attribute(System.Xml.XmlNode,System.String)">
            <summary>
            Retrieves the ushort value of the specified attribute.
            </summary>
            <param name="node">The XML node.</param>
            <param name="attribute">The name of the attribute.</param>
            <returns>
            The ushort value of the attribute, or the default value if the attribute is not found or is empty.
            </returns>
        </member>
        <member name="M:XmlNodeExtensions.GetInt16Attribute(System.Xml.XmlNode,System.String)">
            <summary>
            Retrieves the short value of the specified attribute.
            </summary>
            <param name="node">The XML node.</param>
            <param name="attribute">The name of the attribute.</param>
            <returns>
            The short value of the attribute, or the default value if the attribute is not found or is empty.
            </returns>
        </member>
        <member name="M:XmlNodeExtensions.GetUInt32Attribute(System.Xml.XmlNode,System.String)">
            <summary>
            Retrieves the uint value of the specified attribute.
            </summary>
            <param name="node">The XML node.</param>
            <param name="attribute">The name of the attribute.</param>
            <returns>
            The uint value of the attribute, or the default value if the attribute is not found or is empty.
            </returns>
        </member>
        <member name="M:XmlNodeExtensions.GetInt32Attribute(System.Xml.XmlNode,System.String)">
            <summary>
            Retrieves the int value of the specified attribute.
            </summary>
            <param name="node">The XML node.</param>
            <param name="attribute">The name of the attribute.</param>
            <returns>
            The int value of the attribute, or the default value if the attribute is not found or is empty.
            </returns>
        </member>
        <member name="M:XmlNodeExtensions.GetSingleAttribute(System.Xml.XmlNode,System.String)">
            <summary>
            Retrieves the float value of the specified attribute.
            </summary>
            <param name="node">The XML node.</param>
            <param name="attribute">The name of the attribute.</param>
            <returns>
            The float value of the attribute, or the default value if the attribute is not found or is empty.
            </returns>
        </member>
        <member name="M:XmlNodeExtensions.GetDoubleAttribute(System.Xml.XmlNode,System.String)">
            <summary>
            Retrieves the double value of the specified attribute.
            </summary>
            <param name="node">The XML node.</param>
            <param name="attribute">The name of the attribute.</param>
            <returns>
            The double value of the attribute, or the default value if the attribute is not found or is empty.
            </returns>
        </member>
        <member name="M:XmlNodeExtensions.GetBoolAttribute(System.Xml.XmlNode,System.String)">
            <summary>
            Retrieves the boolean value of the specified attribute.
            </summary>
            <param name="node">The XML node.</param>
            <param name="attribute">The name of the attribute.</param>
            <returns>
            The boolean value of the attribute, or the default value if the attribute is not found or is empty.
            </returns>
        </member>
        <member name="M:XmlNodeExtensions.GetByteDelimitedAttribute(System.Xml.XmlNode,System.String,System.Int32)">
            <summary>
            Retrieves the byte values from the specified delimited attribute and returns them in an array.
            </summary>
            <param name="node">The XML node.</param>
            <param name="attribute">The name of the attribute.</param>
            <param name="expectedCount">The expected number of byte values.</param>
            <returns>
            An array of byte values parsed from the attribute, or an array of default values if the attribute is not found
            or is empty.
            </returns>
        </member>
    </members>
</doc>
